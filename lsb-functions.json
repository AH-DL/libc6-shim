{
  "14.5. Interface Definitions for libc": {
    "functions": [
      {
        "prototype": "int _IO_feof(_IO_FILE * __fp)",
        "name": "_IO_feof",
        "type": "int",
        "args": [
          {
            "name": "__fp",
            "type": "_IO_FILE *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int _IO_getc(_IO_FILE * __fp)",
        "name": "_IO_getc",
        "type": "int",
        "args": [
          {
            "name": "__fp",
            "type": "_IO_FILE *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int _IO_putc(int __c, _IO_FILE * __fp)",
        "name": "_IO_putc",
        "type": "int",
        "args": [
          {
            "name": "__c",
            "type": "int"
          },
          {
            "name": "__fp",
            "type": "_IO_FILE *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int _IO_puts(const char * __c)",
        "name": "_IO_puts",
        "type": "int",
        "args": [
          {
            "name": "__c",
            "type": "const char *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void __assert_fail(const char * assertion, const char * file, unsigned int line, const char * function)",
        "name": "__assert_fail",
        "type": "void",
        "args": [
          {
            "name": "assertion",
            "type": "const char *"
          },
          {
            "name": "file",
            "type": "const char *"
          },
          {
            "name": "line",
            "type": "unsigned int"
          },
          {
            "name": "function",
            "type": "const char *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void __chk_fail(void)",
        "name": "__chk_fail",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "size_t __confstr_chk(int name, char * buf, size_t len, size_t buflen)",
        "name": "__confstr_chk",
        "type": "size_t",
        "args": [
          {
            "name": "name",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "const unsigned short * * __ctype_b_loc (void)",
        "name": "__ctype_b_loc",
        "type": "const unsigned short * *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "size_t __ctype_get_mb_cur_max(void)",
        "name": "__ctype_get_mb_cur_max",
        "type": "size_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int32_t * * __ctype_tolower_loc(void)",
        "name": "__ctype_tolower_loc",
        "type": "int32_t * *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int32_t * * __ctype_toupper_loc(void)",
        "name": "__ctype_toupper_loc",
        "type": "int32_t * *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int __cxa_atexit(void (*func) (void *), void * arg, void * dso_handle)",
        "name": "__cxa_atexit",
        "type": "int",
        "args": [
          {
            "name": "func",
            "type": "void (*)(void *)"
          },
          {
            "name": "arg",
            "type": "void *"
          },
          {
            "name": "dso_handle",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void __cxa_finalize(void * d)",
        "name": "__cxa_finalize",
        "type": "void",
        "args": [
          {
            "name": "d",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int * __errno_location(void)",
        "name": "__errno_location",
        "type": "int *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "char * __fgets_chk(char * s, size_t size, int strsize, FILE * stream)",
        "name": "__fgets_chk",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "strsize",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * __fgets_unlocked_chk(char * s, size_t size, int strsize, FILE * stream)",
        "name": "__fgets_unlocked_chk",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "strsize",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "wchar_t * __fgetws_chk(wchar_t * ws, size_t size, int strsize, FILE * stream)",
        "name": "__fgetws_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "ws",
            "type": "wchar_t *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "strsize",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __fgetws_unlocked_chk(wchar_t * ws, size_t strsize, int n, FILE * stream)",
        "name": "__fgetws_unlocked_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "ws",
            "type": "wchar_t *"
          },
          {
            "name": "strsize",
            "type": "size_t"
          },
          {
            "name": "n",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t __fpending(FILE * stream)",
        "name": "__fpending",
        "type": "size_t",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __fprintf_chk(FILE * stream, int flag, const char * format)",
        "name": "__fprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int __fwprintf_chk(FILE * stream, int flag, const wchar_t * format)",
        "name": "__fwprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int __fxstatat(int ver, int dirfd, const char * path, struct stat * stat_buf, int flags)",
        "name": "__fxstatat",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "dirfd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "stat_buf",
            "type": "struct stat *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fcntl.h>",
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int __fxstatat64(int ver, int dirfd, const char * path, struct stat64 * stat_buf, int flags)",
        "name": "__fxstatat64",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "dirfd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "stat_buf",
            "type": "struct stat64 *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fcntl.h>",
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fstatat64(int dirfd, const char * file, struct stat64 * buf, int flag)",
        "name": "fstatat64",
        "type": "int",
        "args": [
          {
            "name": "dirfd",
            "type": "int"
          },
          {
            "name": "file",
            "type": "const char *"
          },
          {
            "name": "buf",
            "type": "struct stat64 *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fcntl.h>",
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "char * __getcwd_chk(char * buf, size_t len, size_t buflen)",
        "name": "__getcwd_chk",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __getgroups_chk(int size, gid_t * list, size_t listlen)",
        "name": "__getgroups_chk",
        "type": "int",
        "args": [
          {
            "name": "size",
            "type": "int"
          },
          {
            "name": "list",
            "type": "gid_t *"
          },
          {
            "name": "listlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __gethostname_chk(char * buf, size_t buflen, size_t maxlen)",
        "name": "__gethostname_chk",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __getlogin_r_chk(char * buf, size_t buflen, size_t maxlen)",
        "name": "__getlogin_r_chk",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __getpagesize(void)",
        "name": "__getpagesize",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "pid_t __getpgid(pid_t pid)",
        "name": "__getpgid",
        "type": "pid_t",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int * __h_errno_location(void)",
        "name": "__h_errno_location",
        "type": "int *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __isinf(double arg)",
        "name": "__isinf",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __isinff(float arg)",
        "name": "__isinff",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __isinfl(long double arg)",
        "name": "__isinfl",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "long double"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __isnan(double arg)",
        "name": "__isnan",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __isnanf(float arg)",
        "name": "__isnanf",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __isnanl(long double arg)",
        "name": "__isnanl",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "long double"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __libc_current_sigrtmax(void)",
        "name": "__libc_current_sigrtmax",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __libc_current_sigrtmin(void)",
        "name": "__libc_current_sigrtmin",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "size_t __mbsnrtowcs_chk(wchar_t * dest, const char * * src, size_t nmc, size_t len, mbstate_t * ps, size_t destlen)",
        "name": "__mbsnrtowcs_chk",
        "type": "size_t",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const char * *"
          },
          {
            "name": "nmc",
            "type": "size_t"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t __mbsrtowcs_chk(wchar_t * dest, const char * * src, size_t len, mbstate_t * ps, size_t destlen)",
        "name": "__mbsrtowcs_chk",
        "type": "size_t",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const char * *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t __mbstowcs_chk(wchar_t * dest, const char * src, size_t len, size_t destlen)",
        "name": "__mbstowcs_chk",
        "type": "size_t",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * __memcpy_chk(void * dest, const void * src, size_t len, size_t destlen)",
        "name": "__memcpy_chk",
        "type": "void *",
        "args": [
          {
            "name": "dest",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * __memmove_chk(void * dest, const void * src, size_t len, size_t destlen)",
        "name": "__memmove_chk",
        "type": "void *",
        "args": [
          {
            "name": "dest",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * __mempcpy(void * restrict dest, const void * restrict src, size_t n)",
        "name": "__mempcpy",
        "type": "void *",
        "args": [
          {
            "name": "dest",
            "type": "void * restrict"
          },
          {
            "name": "src",
            "type": "const void * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * __mempcpy_chk(void * dest, const void * src, size_t len, size_t destlen)",
        "name": "__mempcpy_chk",
        "type": "void *",
        "args": [
          {
            "name": "dest",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * __memset_chk(void * dest, int c, size_t len, size_t destlen)",
        "name": "__memset_chk",
        "type": "void *",
        "args": [
          {
            "name": "dest",
            "type": "void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "ssize_t __pread64_chk(int fd, void * buf, size_t nbytes, off64_t offset, size_t buflen)",
        "name": "__pread64_chk",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "off64_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t __pread_chk(int fd, void * buf, size_t nbytes, off_t offset, size_t buflen)",
        "name": "__pread_chk",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "off_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __printf_chk(int flag, const char * format)",
        "name": "__printf_chk",
        "type": "int",
        "args": [
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void * __rawmemchr(const void * s, int c)",
        "name": "__rawmemchr",
        "type": "void *",
        "args": [
          {
            "name": "s",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "ssize_t __read_chk(int fd, void * buf, size_t nbytes, size_t buflen)",
        "name": "__read_chk",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t __readlink_chk(const char * path, char * buf, size_t len, size_t buflen)",
        "name": "__readlink_chk",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "char * __realpath_chk(const char * path, char * resolved_path, size_t resolved_len)",
        "name": "__realpath_chk",
        "type": "char *",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "resolved_path",
            "type": "char *"
          },
          {
            "name": "resolved_len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "ssize_t __recv_chk(int fd, void * buf, size_t len, size_t buflen, int flag)",
        "name": "__recv_chk",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t __recvfrom_chk(int fd, void * buf, size_t len, size_t buflen, int flag, struct sockaddr * from, socklen_t * fromlen)",
        "name": "__recvfrom_chk",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "from",
            "type": "struct sockaddr *"
          },
          {
            "name": "fromlen",
            "type": "socklen_t *"
          }
        ],
        "includes": [
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "int __register_atfork(void (*prepare) (void), void (*parent) (void), void (*child) (void), void *__dso_handle)",
        "name": "__register_atfork",
        "type": "int",
        "args": [
          {
            "name": "prepare",
            "type": "void (*)(void)"
          },
          {
            "name": "parent",
            "type": "void (*)(void)"
          },
          {
            "name": "child",
            "type": "void (*)(void)"
          },
          {
            "name": "__dso_handle",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __sigsetjmp(jmp_buf env, int savemask)",
        "name": "__sigsetjmp",
        "type": "int",
        "args": [
          {
            "name": "env",
            "type": "jmp_buf"
          },
          {
            "name": "savemask",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __snprintf_chk(char * str, size_t maxlen, int flag, size_t strlen, const char * format)",
        "name": "__snprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char *"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "strlen",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int __sprintf_chk(char * str, int flag, size_t strlen, const char * format)",
        "name": "__sprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "strlen",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void __stack_chk_fail(void)",
        "name": "__stack_chk_fail",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "char * __stpcpy(char * dest, const char * src)",
        "name": "__stpcpy",
        "type": "char *",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * __stpcpy_chk(char * dest, const char * src, size_t destlen)",
        "name": "__stpcpy_chk",
        "type": "char *",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * __stpncpy_chk(char * dest, const char * src, size_t n, size_t destlen)",
        "name": "__stpncpy_chk",
        "type": "char *",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * __strcat_chk(char * dest, const char * src, size_t destlen)",
        "name": "__strcat_chk",
        "type": "char *",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * __strcpy_chk(char * dest, const char * src, size_t destlen)",
        "name": "__strcpy_chk",
        "type": "char *",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * __strdup(const char * string)",
        "name": "__strdup",
        "type": "char *",
        "args": [
          {
            "name": "string",
            "type": "const char *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "char * __strncat_chk(char * s1, const char * s2, size_t n, size_t s1len)",
        "name": "__strncat_chk",
        "type": "char *",
        "args": [
          {
            "name": "s1",
            "type": "char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "s1len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * __strncpy_chk(char * s1, const char * s2, size_t n, size_t s1len)",
        "name": "__strncpy_chk",
        "type": "char *",
        "args": [
          {
            "name": "s1",
            "type": "char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "s1len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "double __strtod_internal(const char * __nptr, char * * __endptr, int __group)",
        "name": "__strtod_internal",
        "type": "double",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "float __strtof_internal(const char * __nptr, char * * __endptr, int __group)",
        "name": "__strtof_internal",
        "type": "float",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "char * __strtok_r(char * restrict s, const char * restrict delim, char * * restrict save_ptr)",
        "name": "__strtok_r",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "delim",
            "type": "const char * restrict"
          },
          {
            "name": "save_ptr",
            "type": "char * * restrict"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "long int __strtol_internal(const char * __nptr, char * * __endptr, int __base, int __group)",
        "name": "__strtol_internal",
        "type": "long int",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__base",
            "type": "int"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "long double __strtold_internal(const char * __nptr, char * * __endptr, int __group)",
        "name": "__strtold_internal",
        "type": "long double",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "long long __strtoll_internal(const char * __nptr, char * * __endptr, int __base, int __group)",
        "name": "__strtoll_internal",
        "type": "long long",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__base",
            "type": "int"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "unsigned long int __strtoul_internal(const char * __nptr, char * * __endptr, int __base, int __group)",
        "name": "__strtoul_internal",
        "type": "unsigned long int",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__base",
            "type": "int"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "unsigned long long __strtoull_internal(const char * __nptr, char * * __endptr, int __base, int __group)",
        "name": "__strtoull_internal",
        "type": "unsigned long long",
        "args": [
          {
            "name": "__nptr",
            "type": "const char *"
          },
          {
            "name": "__endptr",
            "type": "char * *"
          },
          {
            "name": "__base",
            "type": "int"
          },
          {
            "name": "__group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __swprintf_chk(wchar_t * s, size_t n, int flag, size_t slen, const wchar_t * format)",
        "name": "__swprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "slen",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "long __sysconf(int name)",
        "name": "__sysconf",
        "type": "long",
        "args": [
          {
            "name": "name",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "void __syslog_chk(int priority, int flag, const char * format)",
        "name": "__syslog_chk",
        "type": "void",
        "args": [
          {
            "name": "priority",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <syslog.h>"
        ]
      },
      {
        "prototype": "__sighandler_t __sysv_signal(int sig, __sighandler_t handler)",
        "name": "__sysv_signal",
        "type": "__sighandler_t",
        "args": [
          {
            "name": "sig",
            "type": "int"
          },
          {
            "name": "handler",
            "type": "__sighandler_t"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __ttyname_r_chk(int fd, char * buf, size_t buflen, size_t nreal)",
        "name": "__ttyname_r_chk",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "nreal",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __vfprintf_chk(FILE * fp, int flag, const char * format, va_list ap)",
        "name": "__vfprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "fp",
            "type": "FILE *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int __vfwprintf_chk(FILE * fp, int flag, const wchar_t * format, va_list ap)",
        "name": "__vfwprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "fp",
            "type": "FILE *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const wchar_t *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int __vprintf_chk(int flag, const char * format, va_list ap)",
        "name": "__vprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int __vsnprintf_chk(char * s, size_t maxlen, int flag, size_t slen, const char * format, va_list args)",
        "name": "__vsnprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "slen",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int __vsprintf_chk(char * s, int flag, size_t slen, const char * format, va_list args)",
        "name": "__vsprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "slen",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int __vswprintf_chk(wchar_t * s, size_t maxlen, int flag, size_t slen, const wchar_t * format, va_list args)",
        "name": "__vswprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "wchar_t *"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "slen",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const wchar_t *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "void __vsyslog_chk(int priority, int flag, const char * format, va_list ap)",
        "name": "__vsyslog_chk",
        "type": "void",
        "args": [
          {
            "name": "priority",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <syslog.h>"
        ]
      },
      {
        "prototype": "int __vwprintf_chk(int flag, const wchar_t * format, va_list ap)",
        "name": "__vwprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const wchar_t *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wcpcpy_chk(wchar_t * dest, const wchar_t * src, size_t destlen)",
        "name": "__wcpcpy_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wcpncpy_chk(wchar_t * dest, const wchar_t * src, size_t n, size_t destlen)",
        "name": "__wcpncpy_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t __wcrtomb_chk(char * s, wchar_t wchar, mbstate_t * ps, size_t buflen)",
        "name": "__wcrtomb_chk",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "wchar",
            "type": "wchar_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wcscat_chk(wchar_t * dest, const wchar_t * src, size_t destlen)",
        "name": "__wcscat_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wcscpy_chk(wchar_t * dest, const wchar_t * src, size_t n)",
        "name": "__wcscpy_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wcsncat_chk(wchar_t * dest, const wchar_t * src, size_t n, size_t destlen)",
        "name": "__wcsncat_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wcsncpy_chk(wchar_t * dest, const wchar_t * src, size_t n, size_t destlen)",
        "name": "__wcsncpy_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "dest",
            "type": "wchar_t *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t __wcsnrtombs_chk(char * dest, const wchar_t * * src, size_t nwc, size_t len, mbstate_t * ps, size_t destlen)",
        "name": "__wcsnrtombs_chk",
        "type": "size_t",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const wchar_t * *"
          },
          {
            "name": "nwc",
            "type": "size_t"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t __wcsrtombs_chk(char * dest, const wchar_t * * src, size_t len, mbstate_t * ps, size_t destlen)",
        "name": "__wcsrtombs_chk",
        "type": "size_t",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const wchar_t * *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t *"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "double __wcstod_internal(const wchar_t * nptr, wchar_t * * endptr, int group)",
        "name": "__wcstod_internal",
        "type": "double",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t *"
          },
          {
            "name": "endptr",
            "type": "wchar_t * *"
          },
          {
            "name": "group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "float __wcstof_internal(const wchar_t * nptr, wchar_t * * endptr, int group)",
        "name": "__wcstof_internal",
        "type": "float",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t *"
          },
          {
            "name": "endptr",
            "type": "wchar_t * *"
          },
          {
            "name": "group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "long __wcstol_internal(const wchar_t * nptr, wchar_t * * endptr, int base, int group)",
        "name": "__wcstol_internal",
        "type": "long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t *"
          },
          {
            "name": "endptr",
            "type": "wchar_t * *"
          },
          {
            "name": "base",
            "type": "int"
          },
          {
            "name": "group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "long double __wcstold_internal(const wchar_t * nptr, wchar_t * * endptr, int group)",
        "name": "__wcstold_internal",
        "type": "long double",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t *"
          },
          {
            "name": "endptr",
            "type": "wchar_t * *"
          },
          {
            "name": "group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "size_t __wcstombs_chk(char * dest, const wchar_t * src, size_t len, size_t destlen)",
        "name": "__wcstombs_chk",
        "type": "size_t",
        "args": [
          {
            "name": "dest",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const wchar_t *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "unsigned long __wcstoul_internal(const wchar_t * restrict nptr, wchar_t * * restrict endptr, int base, int group)",
        "name": "__wcstoul_internal",
        "type": "unsigned long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t * * restrict"
          },
          {
            "name": "base",
            "type": "int"
          },
          {
            "name": "group",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __wctomb_chk(char * s, wchar_t wchar, size_t buflen)",
        "name": "__wctomb_chk",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "wchar",
            "type": "wchar_t"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wmemcpy_chk(wchar_t * s1, const wchar_t * s2, size_t n, size_t ns1)",
        "name": "__wmemcpy_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ns1",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wmemmove_chk(wchar_t * s1, const wchar_t * s2, size_t n, size_t ns1)",
        "name": "__wmemmove_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ns1",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wmempcpy_chk(wchar_t * s1, const wchar_t * s2, size_t n, size_t ns1)",
        "name": "__wmempcpy_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ns1",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * __wmemset_chk(wchar_t * s, wchar_t c, size_t n, size_t destlen)",
        "name": "__wmemset_chk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s",
            "type": "wchar_t *"
          },
          {
            "name": "c",
            "type": "wchar_t"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "destlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int __wprintf_chk(int flag, const wchar_t * format)",
        "name": "__wprintf_chk",
        "type": "int",
        "args": [
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int __xmknod(int ver, const char * path, mode_t mode, dev_t * dev)",
        "name": "__xmknod",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          },
          {
            "name": "dev",
            "type": "dev_t *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int __xmknodat(int ver, int dirfd, const char * path, mode_t path, dev_t * dev)",
        "name": "__xmknodat",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "dirfd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "path",
            "type": "mode_t"
          },
          {
            "name": "dev",
            "type": "dev_t *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "char * __xpg_basename(const char * path)",
        "name": "__xpg_basename",
        "type": "char *",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libgen.h>"
        ]
      },
      {
        "prototype": "int __xpg_sigpause(int sig)",
        "name": "__xpg_sigpause",
        "type": "int",
        "args": [
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int __xpg_strerror_r(int errnum, char * buf, size_t buflen)",
        "name": "__xpg_strerror_r",
        "type": "int",
        "args": [
          {
            "name": "errnum",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int __xstat(int ver, const char * path, struct stat * stat_buf)",
        "name": "__xstat",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "stat_buf",
            "type": "struct stat *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __lxstat(int ver, const char * path, struct stat * stat_buf)",
        "name": "__lxstat",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "stat_buf",
            "type": "struct stat *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __fxstat(int ver, int fildes, struct stat * stat_buf)",
        "name": "__fxstat",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "stat_buf",
            "type": "struct stat *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __xstat64(int ver, const char * path, struct stat64 * stat_buf)",
        "name": "__xstat64",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "stat_buf",
            "type": "struct stat64 *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __lxstat64(int ver, const char * path, struct stat64 * stat_buf)",
        "name": "__lxstat64",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "stat_buf",
            "type": "struct stat64 *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int __fxstat64(int ver, int fildes, struct stat64 * stat_buf)",
        "name": "__fxstat64",
        "type": "int",
        "args": [
          {
            "name": "ver",
            "type": "int"
          },
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "stat_buf",
            "type": "struct stat64 *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int acct(const char * filename)",
        "name": "acct",
        "type": "int",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int adjtime(const struct timeval * delta, struct timeval * olddelta)",
        "name": "adjtime",
        "type": "int",
        "args": [
          {
            "name": "delta",
            "type": "const struct timeval *"
          },
          {
            "name": "olddelta",
            "type": "struct timeval *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "int alphasort64(const struct dirent64 ** d1, const struct dirent64 ** d2)",
        "name": "alphasort64",
        "type": "int",
        "args": [
          {
            "name": "d1",
            "type": "const struct dirent64 **"
          },
          {
            "name": "d2",
            "type": "const struct dirent64 **"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "error_t argz_add(char ** argz, size_t * argz_len, const char * str)",
        "name": "argz_add",
        "type": "error_t",
        "args": [
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          },
          {
            "name": "str",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "error_t argz_add_sep(char ** argz, size_t * argz_len, const char * str, int sep)",
        "name": "argz_add_sep",
        "type": "error_t",
        "args": [
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          },
          {
            "name": "str",
            "type": "const char *"
          },
          {
            "name": "sep",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "error_t argz_append(char ** argz, size_t * argz_len, const char * buf, size_t buf_len)",
        "name": "argz_append",
        "type": "error_t",
        "args": [
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          },
          {
            "name": "buf",
            "type": "const char *"
          },
          {
            "name": "buf_len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "size_t argz_count(const char * argz, size_t * argz_len)",
        "name": "argz_count",
        "type": "size_t",
        "args": [
          {
            "name": "argz",
            "type": "const char *"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "error_t argz_create(char * const argv, char ** argz, size_t * argz_len)",
        "name": "argz_create",
        "type": "error_t",
        "args": [
          {
            "name": "argv",
            "type": "char * const"
          },
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "error_t argz_create_sep(const char * str, int sep, char ** argz, size_t * argz_len)",
        "name": "argz_create_sep",
        "type": "error_t",
        "args": [
          {
            "name": "str",
            "type": "const char *"
          },
          {
            "name": "sep",
            "type": "int"
          },
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "void argz_delete(char ** argz, size_t * argz_len, char * entry)",
        "name": "argz_delete",
        "type": "void",
        "args": [
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          },
          {
            "name": "entry",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "void argz_extract(const char * argz, size_t argz_len, char ** argv)",
        "name": "argz_extract",
        "type": "void",
        "args": [
          {
            "name": "argz",
            "type": "const char *"
          },
          {
            "name": "argz_len",
            "type": "size_t"
          },
          {
            "name": "argv",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "error_t argz_insert(char ** argz_insert, size_t * argz_len, char * before, const char * entry)",
        "name": "argz_insert",
        "type": "error_t",
        "args": [
          {
            "name": "argz_insert",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          },
          {
            "name": "before",
            "type": "char *"
          },
          {
            "name": "entry",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "char argz_next(const char * argz, size_t argz_len, const char * entry)",
        "name": "argz_next",
        "type": "char",
        "args": [
          {
            "name": "argz",
            "type": "const char *"
          },
          {
            "name": "argz_len",
            "type": "size_t"
          },
          {
            "name": "entry",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "error_t argz_replace(char ** argz, size_t * argz_len, const char * str, const char * with, unsigned int * replace_count)",
        "name": "argz_replace",
        "type": "error_t",
        "args": [
          {
            "name": "argz",
            "type": "char **"
          },
          {
            "name": "argz_len",
            "type": "size_t *"
          },
          {
            "name": "str",
            "type": "const char *"
          },
          {
            "name": "with",
            "type": "const char *"
          },
          {
            "name": "replace_count",
            "type": "unsigned int *"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "void argz_stringify(char * argz, size_t argz_len, int sep)",
        "name": "argz_stringify",
        "type": "void",
        "args": [
          {
            "name": "argz",
            "type": "char *"
          },
          {
            "name": "argz_len",
            "type": "size_t"
          },
          {
            "name": "sep",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dirent.h>",
          "#include <argz.h>"
        ]
      },
      {
        "prototype": "int asprintf(char ** restrict ptr, const char * restrict format, ...)",
        "name": "asprintf",
        "type": "int",
        "args": [
          {
            "name": "ptr",
            "type": "char ** restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * basename(const char * path)",
        "name": "basename",
        "type": "char *",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libgen.h>"
        ]
      },
      {
        "prototype": "char * bind_textdomain_codeset (const char * domainname , const char * codeset )",
        "name": "bind_textdomain_codeset",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          },
          {
            "name": "codeset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "int bindresvport(int sd, struct sockaddr_in * sin)",
        "name": "bindresvport",
        "type": "int",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "sin",
            "type": "struct sockaddr_in *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "char * bindtextdomain(const char * domainname, const char * dirname)",
        "name": "bindtextdomain",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          },
          {
            "name": "dirname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "void cfmakeraw(struct termios * termios_p)",
        "name": "cfmakeraw",
        "type": "void",
        "args": [
          {
            "name": "termios_p",
            "type": "struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int cfsetspeed(struct termios *t, speed_t speed)",
        "name": "cfsetspeed",
        "type": "int",
        "args": [
          {
            "name": "t",
            "type": "struct termios *"
          },
          {
            "name": "speed",
            "type": "speed_t"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int daemon(int nochdir, int noclose)",
        "name": "daemon",
        "type": "int",
        "args": [
          {
            "name": "nochdir",
            "type": "int"
          },
          {
            "name": "noclose",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "char * dcgettext(const char * domainname, const char * msgid, int category)",
        "name": "dcgettext",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          },
          {
            "name": "msgid",
            "type": "const char *"
          },
          {
            "name": "category",
            "type": "int"
          }
        ],
        "includes": [
          "#include <libintl.h>",
          "#include <locale.h>"
        ]
      },
      {
        "prototype": "char * dcngettext(const char * domainname, const char * msgid1, const char * msgid2, unsigned long int n, int category)",
        "name": "dcngettext",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          },
          {
            "name": "msgid1",
            "type": "const char *"
          },
          {
            "name": "msgid2",
            "type": "const char *"
          },
          {
            "name": "n",
            "type": "unsigned long int"
          },
          {
            "name": "category",
            "type": "int"
          }
        ],
        "includes": [
          "#include <libintl.h>",
          "#include <locale.h>"
        ]
      },
      {
        "prototype": "char * dgettext(const char * domainname, const char * msgid)",
        "name": "dgettext",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          },
          {
            "name": "msgid",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "int dl_iterate_phdr(int(*callback) (struct dl_phdr_info *, size_t, void *), void *data)",
        "name": "dl_iterate_phdr",
        "type": "int",
        "args": [
          {
            "name": "callback",
            "type": "int(*)(struct dl_phdr_info *, size_t, void *)"
          },
          {
            "name": "data",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <link.h>"
        ]
      },
      {
        "prototype": "char * dngettext(const char * domainname, const char * msgid1, const char * msgid2, unsigned long int n)",
        "name": "dngettext",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          },
          {
            "name": "msgid1",
            "type": "const char *"
          },
          {
            "name": "msgid2",
            "type": "const char *"
          },
          {
            "name": "n",
            "type": "unsigned long int"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "int drand48_r(struct drand48_data * buffer, double * result)",
        "name": "drand48_r",
        "type": "int",
        "args": [
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          },
          {
            "name": "result",
            "type": "double *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void endutent(void)",
        "name": "endutent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <utmp.h>"
        ]
      },
      {
        "prototype": "error_t envz_add(char ** envz, size_t * envz_len, const char * name, const char * value)",
        "name": "envz_add",
        "type": "error_t",
        "args": [
          {
            "name": "envz",
            "type": "char **"
          },
          {
            "name": "envz_len",
            "type": "size_t *"
          },
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "value",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmp.h>",
          "#include <envz.h>"
        ]
      },
      {
        "prototype": "char envz_entry(const char * envz, size_t envz_len, const char * name)",
        "name": "envz_entry",
        "type": "char",
        "args": [
          {
            "name": "envz",
            "type": "const char *"
          },
          {
            "name": "envz_len",
            "type": "size_t"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmp.h>",
          "#include <envz.h>"
        ]
      },
      {
        "prototype": "char envz_get(const char * envz, size_t envz_len, const char * name)",
        "name": "envz_get",
        "type": "char",
        "args": [
          {
            "name": "envz",
            "type": "const char *"
          },
          {
            "name": "envz_len",
            "type": "size_t"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmp.h>",
          "#include <envz.h>"
        ]
      },
      {
        "prototype": "error_t envz_merge(char ** envz, size_t * envz_len, const char * envz2, size_t envz2_len, int override)",
        "name": "envz_merge",
        "type": "error_t",
        "args": [
          {
            "name": "envz",
            "type": "char **"
          },
          {
            "name": "envz_len",
            "type": "size_t *"
          },
          {
            "name": "envz2",
            "type": "const char *"
          },
          {
            "name": "envz2_len",
            "type": "size_t"
          },
          {
            "name": "override",
            "type": "int"
          }
        ],
        "includes": [
          "#include <utmp.h>",
          "#include <envz.h>"
        ]
      },
      {
        "prototype": "void envz_remove(char ** envz, size_t * envz_len, const char * name)",
        "name": "envz_remove",
        "type": "void",
        "args": [
          {
            "name": "envz",
            "type": "char **"
          },
          {
            "name": "envz_len",
            "type": "size_t *"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmp.h>",
          "#include <envz.h>"
        ]
      },
      {
        "prototype": "void envz_strip(char ** envz, size_t * envz_len)",
        "name": "envz_strip",
        "type": "void",
        "args": [
          {
            "name": "envz",
            "type": "char **"
          },
          {
            "name": "envz_len",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <utmp.h>",
          "#include <envz.h>"
        ]
      },
      {
        "prototype": "int epoll_create(int size)",
        "name": "epoll_create",
        "type": "int",
        "args": [
          {
            "name": "size",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/epoll.h>"
        ]
      },
      {
        "prototype": "int epoll_ctl(int epfd, int op, int fd, struct epoll_event * event)",
        "name": "epoll_ctl",
        "type": "int",
        "args": [
          {
            "name": "epfd",
            "type": "int"
          },
          {
            "name": "op",
            "type": "int"
          },
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "event",
            "type": "struct epoll_event *"
          }
        ],
        "includes": [
          "#include <sys/epoll.h>"
        ]
      },
      {
        "prototype": "int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout)",
        "name": "epoll_wait",
        "type": "int",
        "args": [
          {
            "name": "epfd",
            "type": "int"
          },
          {
            "name": "events",
            "type": "struct epoll_event *"
          },
          {
            "name": "maxevents",
            "type": "int"
          },
          {
            "name": "timeout",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/epoll.h>"
        ]
      },
      {
        "prototype": "int erand48_r(unsigned short[3] xsubi, struct drand48_data * buffer, double * result)",
        "name": "erand48_r",
        "type": "int",
        "args": [
          {
            "name": "xsubi",
            "type": "unsigned short[3]"
          },
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          },
          {
            "name": "result",
            "type": "double *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void err (int eval , const char * fmt , ...)",
        "name": "err",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void error (int status , int errnum , const char * format , ...)",
        "name": "error",
        "type": "void",
        "args": [
          {
            "name": "status",
            "type": "int"
          },
          {
            "name": "errnum",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <error.h>"
        ]
      },
      {
        "prototype": "void errx (int eval , const char * fmt , ...)",
        "name": "errx",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "int flock(int fd, int operation)",
        "name": "flock",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "operation",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int fstatfs(int fd, struct statfs * buf)",
        "name": "fstatfs",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "struct statfs *"
          }
        ],
        "includes": [
          "#include <sys/statfs.h>"
        ]
      },
      {
        "prototype": "int fstatfs64(int fd, struct statfs64 * buf)",
        "name": "fstatfs64",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "struct statfs64 *"
          }
        ],
        "includes": [
          "#include <sys/statfs.h>"
        ]
      },
      {
        "prototype": "int futimes(int fd, const struct timeval tv[2])",
        "name": "futimes",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "tv",
            "type": "const struct timeval [2]"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "int lutimes(const char * filename, const struct timeval tv[2])",
        "name": "lutimes",
        "type": "int",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          },
          {
            "name": "tv",
            "type": "const struct timeval [2]"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "char * getcwd(char * buf, size_t size)",
        "name": "getcwd",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getdomainname (char * name , size_t namelen )",
        "name": "getdomainname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "namelen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getdtablesize (void )",
        "name": "getdtablesize",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getgrent_r(struct group * gbuf, char * buf, size_t buflen, struct group * * gbufp)",
        "name": "getgrent_r",
        "type": "int",
        "args": [
          {
            "name": "gbuf",
            "type": "struct group *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "gbufp",
            "type": "struct group * *"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int getgrouplist(const char * user, gid_t group, gid_t * groups, int * ngroups)",
        "name": "getgrouplist",
        "type": "int",
        "args": [
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "group",
            "type": "gid_t"
          },
          {
            "name": "groups",
            "type": "gid_t *"
          },
          {
            "name": "ngroups",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int gethostbyaddr_r(const void * restrict addr, socklen_t len, int type, struct hostent * restrict result_buf, char * restrict buf, size_t buflen, struct hostent * * restrict result, int * h_errnop)",
        "name": "gethostbyaddr_r",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void * restrict"
          },
          {
            "name": "len",
            "type": "socklen_t"
          },
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "result_buf",
            "type": "struct hostent * restrict"
          },
          {
            "name": "buf",
            "type": "char * restrict"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct hostent * * restrict"
          },
          {
            "name": "h_errnop",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int gethostbyname2(const char * restrict name, int af)",
        "name": "gethostbyname2",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char * restrict"
          },
          {
            "name": "af",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int gethostbyname2_r(const char * restrict name, int af, struct hostent * restrict result_buf, char * restrict buf, size_t buflen, struct hostent ** restrict result, int * restrict h_errnop)",
        "name": "gethostbyname2_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char * restrict"
          },
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "result_buf",
            "type": "struct hostent * restrict"
          },
          {
            "name": "buf",
            "type": "char * restrict"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct hostent ** restrict"
          },
          {
            "name": "h_errnop",
            "type": "int * restrict"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int gethostbyname_r(const char * restrict name, struct hostent * restrict result_buf, char * restrict buf, size_t buflen, struct hostent ** restrict result, int * restrict h_errnop)",
        "name": "gethostbyname_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char * restrict"
          },
          {
            "name": "result_buf",
            "type": "struct hostent * restrict"
          },
          {
            "name": "buf",
            "type": "char * restrict"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct hostent ** restrict"
          },
          {
            "name": "h_errnop",
            "type": "int * restrict"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int getifaddrs(struct ifaddrs ** ifap)",
        "name": "getifaddrs",
        "type": "int",
        "args": [
          {
            "name": "ifap",
            "type": "struct ifaddrs **"
          }
        ],
        "includes": [
          "#include <ifaddrs.h>"
        ]
      },
      {
        "prototype": "void freeifaddrs(struct ifaddrs * ifa)",
        "name": "freeifaddrs",
        "type": "void",
        "args": [
          {
            "name": "ifa",
            "type": "struct ifaddrs *"
          }
        ],
        "includes": [
          "#include <ifaddrs.h>"
        ]
      },
      {
        "prototype": "int getloadavg(double loadavg[], int nelem)",
        "name": "getloadavg",
        "type": "int",
        "args": [
          {
            "name": "loadavg",
            "type": "double []"
          },
          {
            "name": "nelem",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int getopt(int argc, char * const argv[], const char * optstring)",
        "name": "getopt",
        "type": "int",
        "args": [
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char * const []"
          },
          {
            "name": "optstring",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getopt_long(int argc, char * const argv[], const char * opstring, const struct option * longopts, int * longindex)",
        "name": "getopt_long",
        "type": "int",
        "args": [
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char * const []"
          },
          {
            "name": "opstring",
            "type": "const char *"
          },
          {
            "name": "longopts",
            "type": "const struct option *"
          },
          {
            "name": "longindex",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <getopt.h>"
        ]
      },
      {
        "prototype": "int getopt_long_only(int argc, char * const argv[], const char * optstring, const struct option * longopts, int * longindex)",
        "name": "getopt_long_only",
        "type": "int",
        "args": [
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char * const []"
          },
          {
            "name": "optstring",
            "type": "const char *"
          },
          {
            "name": "longopts",
            "type": "const struct option *"
          },
          {
            "name": "longindex",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <getopt.h>"
        ]
      },
      {
        "prototype": "int getpagesize (void )",
        "name": "getpagesize",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getprotobyname_r(const char * name, struct protoent * result_buf, char * buf, size_t buflen, struct protoent * * result)",
        "name": "getprotobyname_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "result_buf",
            "type": "struct protoent *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct protoent * *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getprotobynumber_r(int proto, struct protoent * result_buf, char * buf, size_t buflen, struct protoent * * result)",
        "name": "getprotobynumber_r",
        "type": "int",
        "args": [
          {
            "name": "proto",
            "type": "int"
          },
          {
            "name": "result_buf",
            "type": "struct protoent *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct protoent * *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getprotoent_r(struct protoent * result_buf, char * buf, size_t buflen, struct protoent * * result)",
        "name": "getprotoent_r",
        "type": "int",
        "args": [
          {
            "name": "result_buf",
            "type": "struct protoent *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct protoent * *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getpwent_r(struct passwd * pwbuf, char * buf, size_t buflen, struct passwd * * pwbufp)",
        "name": "getpwent_r",
        "type": "int",
        "args": [
          {
            "name": "pwbuf",
            "type": "struct passwd *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "pwbufp",
            "type": "struct passwd * *"
          }
        ],
        "includes": [
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int getservbyname_r(const char * name, const char * proto, struct servent * result_buf, char * buf, size_t buflen, struct servent * * result)",
        "name": "getservbyname_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "proto",
            "type": "const char *"
          },
          {
            "name": "result_buf",
            "type": "struct servent *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct servent * *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getservbyport_r(int port, const char * proto, struct servent * result_buf, char * buf, size_t buflen, struct servent * * result)",
        "name": "getservbyport_r",
        "type": "int",
        "args": [
          {
            "name": "port",
            "type": "int"
          },
          {
            "name": "proto",
            "type": "const char *"
          },
          {
            "name": "result_buf",
            "type": "struct servent *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct servent * *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getservent_r(struct servent * result_buf, char * buf, size_t buflen, struct servent * * result)",
        "name": "getservent_r",
        "type": "int",
        "args": [
          {
            "name": "result_buf",
            "type": "struct servent *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct servent * *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getsockopt(int socket, int level, int option_name, void * restrict option_value, socklen_t * restrict option_len)",
        "name": "getsockopt",
        "type": "int",
        "args": [
          {
            "name": "socket",
            "type": "int"
          },
          {
            "name": "level",
            "type": "int"
          },
          {
            "name": "option_name",
            "type": "int"
          },
          {
            "name": "option_value",
            "type": "void * restrict"
          },
          {
            "name": "option_len",
            "type": "socklen_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/socket.h>",
          "#include <netinet/ip.h>"
        ]
      },
      {
        "prototype": "char * gettext(const char * msgid)",
        "name": "gettext",
        "type": "char *",
        "args": [
          {
            "name": "msgid",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "struct utmp *getutent(void)",
        "name": "getutent",
        "type": "struct utmp *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <utmp.h>"
        ]
      },
      {
        "prototype": "int getutent_r(struct utmp * buffer, struct utmp ** result)",
        "name": "getutent_r",
        "type": "int",
        "args": [
          {
            "name": "buffer",
            "type": "struct utmp *"
          },
          {
            "name": "result",
            "type": "struct utmp **"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int glob64(const char * pattern, int flags, int (*errfunc) (const char *, int), glob64_t * pglob)",
        "name": "glob64",
        "type": "int",
        "args": [
          {
            "name": "pattern",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "errfunc",
            "type": "int (*)(const char *, int)"
          },
          {
            "name": "pglob",
            "type": "glob64_t *"
          }
        ],
        "includes": [
          "#include <glob.h>"
        ]
      },
      {
        "prototype": "void globfree64(glob64_t * pglob)",
        "name": "globfree64",
        "type": "void",
        "args": [
          {
            "name": "pglob",
            "type": "glob64_t *"
          }
        ],
        "includes": [
          "#include <glob.h>"
        ]
      },
      {
        "prototype": "const char * gnu_get_libc_version(void)",
        "name": "gnu_get_libc_version",
        "type": "const char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <glob.h>",
          "#include <gnu/libc-version.h>"
        ]
      },
      {
        "prototype": "const char * gnu_get_libc_release(void)",
        "name": "gnu_get_libc_release",
        "type": "const char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <glob.h>",
          "#include <gnu/libc-version.h>"
        ]
      },
      {
        "prototype": "int hcreate_r(size_t nel, struct hsearch_data * htab)",
        "name": "hcreate_r",
        "type": "int",
        "args": [
          {
            "name": "nel",
            "type": "size_t"
          },
          {
            "name": "htab",
            "type": "struct hsearch_data *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "void hdestroy_r(struct hsearch_data * htab)",
        "name": "hdestroy_r",
        "type": "void",
        "args": [
          {
            "name": "htab",
            "type": "struct hsearch_data *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "int hsearch_r(ENTRY item, ACTION action, ENTRY * * retval, struct hsearch_data * htab)",
        "name": "hsearch_r",
        "type": "int",
        "args": [
          {
            "name": "item",
            "type": "ENTRY"
          },
          {
            "name": "action",
            "type": "ACTION"
          },
          {
            "name": "retval",
            "type": "ENTRY * *"
          },
          {
            "name": "htab",
            "type": "struct hsearch_data *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "int anet_iton(const char * cp, struct in_addr * inp)",
        "name": "anet_iton",
        "type": "int",
        "args": [
          {
            "name": "cp",
            "type": "const char *"
          },
          {
            "name": "inp",
            "type": "struct in_addr *"
          }
        ],
        "includes": [
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "int initgroups(const char * user, gid_t group)",
        "name": "initgroups",
        "type": "int",
        "args": [
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "group",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <grp.h>",
          "#include <sys/types.h>"
        ]
      },
      {
        "prototype": "int initstate_r(unsigned int seed, char * statebuf, size_t statelen, struct random_data * buffer)",
        "name": "initstate_r",
        "type": "int",
        "args": [
          {
            "name": "seed",
            "type": "unsigned int"
          },
          {
            "name": "statebuf",
            "type": "char *"
          },
          {
            "name": "statelen",
            "type": "size_t"
          },
          {
            "name": "buffer",
            "type": "struct random_data *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int inotify_add_watch(int fd, const char * path, uint32_t mask)",
        "name": "inotify_add_watch",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mask",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <sys/inotify.h>"
        ]
      },
      {
        "prototype": "int inotify_init(void)",
        "name": "inotify_init",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/inotify.h>"
        ]
      },
      {
        "prototype": "int inotify_rm_watch(int fd, int wd)",
        "name": "inotify_rm_watch",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "wd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/inotify.h>"
        ]
      },
      {
        "prototype": "int ioctl (int fildes , int request , ...)",
        "name": "ioctl",
        "type": "int",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "request",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/ioctl.h>"
        ]
      },
      {
        "prototype": "int ioctl(int sockfd, int request, void * argp)",
        "name": "ioctl",
        "type": "int",
        "args": [
          {
            "name": "sockfd",
            "type": "int"
          },
          {
            "name": "request",
            "type": "int"
          },
          {
            "name": "argp",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/ioctl.h>",
          "#include <sys/socket.h>",
          "#include <net/if.h>",
          "#include <netinet/in.h>"
        ]
      },
      {
        "prototype": "int ioctl(int fd, unsigned long request, int * argp)",
        "name": "ioctl",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "request",
            "type": "unsigned long"
          },
          {
            "name": "argp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/ioctl.h>",
          "#include <fcntl.h>"
        ]
      },
      {
        "prototype": "int jrand48_r(unsigned short[3] xsubi, struct drand48_data * buffer, long int * result)",
        "name": "jrand48_r",
        "type": "int",
        "args": [
          {
            "name": "xsubi",
            "type": "unsigned short[3]"
          },
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          },
          {
            "name": "result",
            "type": "long int *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int kill(pid_t pid, int sig)",
        "name": "kill",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int lcong48_r(unsigned short[7] param, struct drand48_data * buffer)",
        "name": "lcong48_r",
        "type": "int",
        "args": [
          {
            "name": "param",
            "type": "unsigned short[7]"
          },
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int link(const char * path1, const char * path2)",
        "name": "link",
        "type": "int",
        "args": [
          {
            "name": "path1",
            "type": "const char *"
          },
          {
            "name": "path2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int lrand48_r(struct drand48_data * buffer, long int * result)",
        "name": "lrand48_r",
        "type": "int",
        "args": [
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          },
          {
            "name": "result",
            "type": "long int *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * memmem(const void * haystack, size_t haystacklen, const void * needle, size_t needlelen)",
        "name": "memmem",
        "type": "void *",
        "args": [
          {
            "name": "haystack",
            "type": "const void *"
          },
          {
            "name": "haystacklen",
            "type": "size_t"
          },
          {
            "name": "needle",
            "type": "const void *"
          },
          {
            "name": "needlelen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memrchr(const void * s, int c, size_t n)",
        "name": "memrchr",
        "type": "void *",
        "args": [
          {
            "name": "s",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int mkstemp64(char * template)",
        "name": "mkstemp64",
        "type": "int",
        "args": [
          {
            "name": "template",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mrand48_r(struct drand48_data * buffer, long int * result)",
        "name": "mrand48_r",
        "type": "int",
        "args": [
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          },
          {
            "name": "result",
            "type": "long int *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * mremap(void * old_address, size_t old_size, size_t new_size, int flags)",
        "name": "mremap",
        "type": "void *",
        "args": [
          {
            "name": "old_address",
            "type": "void *"
          },
          {
            "name": "old_size",
            "type": "size_t"
          },
          {
            "name": "new_size",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      },
      {
        "prototype": "char * ngettext(const char * msgid1, const char * msgid2, unsigned long int n)",
        "name": "ngettext",
        "type": "char *",
        "args": [
          {
            "name": "msgid1",
            "type": "const char *"
          },
          {
            "name": "msgid2",
            "type": "const char *"
          },
          {
            "name": "n",
            "type": "unsigned long int"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "int nrand48_r(unsigned short[3] xsubi, struct drand48_data * buffer, long int * result)",
        "name": "nrand48_r",
        "type": "int",
        "args": [
          {
            "name": "xsubi",
            "type": "unsigned short[3]"
          },
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          },
          {
            "name": "result",
            "type": "long int *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int openat64(int fd, const char * path, int oflag, ...)",
        "name": "openat64",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "oflag",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      },
      {
        "prototype": "u_short * pmap_getport(struct sockaddr_in * address, const u_long program, const u_long * version, u_int protocol)",
        "name": "pmap_getport",
        "type": "u_short *",
        "args": [
          {
            "name": "address",
            "type": "struct sockaddr_in *"
          },
          {
            "name": "program",
            "type": "const u_long"
          },
          {
            "name": "version",
            "type": "const u_long *"
          },
          {
            "name": "protocol",
            "type": "u_int"
          }
        ],
        "includes": [
          "#include <rpc/pmap_clnt.h>"
        ]
      },
      {
        "prototype": "bool_t pmap_set(const u_long program, const u_long version, int protocol, u_short port)",
        "name": "pmap_set",
        "type": "bool_t",
        "args": [
          {
            "name": "program",
            "type": "const u_long"
          },
          {
            "name": "version",
            "type": "const u_long"
          },
          {
            "name": "protocol",
            "type": "int"
          },
          {
            "name": "port",
            "type": "u_short"
          }
        ],
        "includes": [
          "#include <rpc/pmap_clnt.h>"
        ]
      },
      {
        "prototype": "bool_t pmap_unset(u_long prognum, u_long versnum)",
        "name": "pmap_unset",
        "type": "bool_t",
        "args": [
          {
            "name": "prognum",
            "type": "u_long"
          },
          {
            "name": "versnum",
            "type": "u_long"
          }
        ],
        "includes": [
          "#include <rpc/pmap_clnt.h>"
        ]
      },
      {
        "prototype": "int posix_fadvise64(int fd, off64_t offset, off64_t len, int advice)",
        "name": "posix_fadvise64",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off64_t"
          },
          {
            "name": "len",
            "type": "off64_t"
          },
          {
            "name": "advice",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      },
      {
        "prototype": "int posix_fallocate64(int fd, off64_t offset, off64_t len)",
        "name": "posix_fallocate64",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off64_t"
          },
          {
            "name": "len",
            "type": "off64_t"
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      },
      {
        "prototype": "ssize_t pread64(int fd, void * buf, size_t count, off64_t offset)",
        "name": "pread64",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "count",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "off64_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "long ptrace(enum __ptrace_request request, pid_t pid, void * addr, void * data)",
        "name": "ptrace",
        "type": "long",
        "args": [
          {
            "name": "request",
            "type": "enum __ptrace_request"
          },
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "data",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/ptrace.h>"
        ]
      },
      {
        "prototype": "ssize_t pwrite64(int fd, const void * buf, size_t count, off64_t offset)",
        "name": "pwrite64",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "const void *"
          },
          {
            "name": "count",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "off64_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int random_r(struct random_data * buffer, int32_t * result)",
        "name": "random_r",
        "type": "int",
        "args": [
          {
            "name": "buffer",
            "type": "struct random_data *"
          },
          {
            "name": "result",
            "type": "int32_t *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int readdir64_r(DIR * dirp, struct dirent64 * entry, struct dirent64 * * result)",
        "name": "readdir64_r",
        "type": "int",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          },
          {
            "name": "entry",
            "type": "struct dirent64 *"
          },
          {
            "name": "result",
            "type": "struct dirent64 * *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int scandir64(const char * dir, const struct dirent64 ** namelist, int (*sel) (const struct dirent64 *), int (*compar) (const struct dirent64 **, const struct dirent64 **))",
        "name": "scandir64",
        "type": "int",
        "args": [
          {
            "name": "dir",
            "type": "const char *"
          },
          {
            "name": "namelist",
            "type": "const struct dirent64 **"
          },
          {
            "name": "sel",
            "type": "int (*)(const struct dirent64 *)"
          },
          {
            "name": "compar",
            "type": "int (*)(const struct dirent64 **, const struct dirent64 **)"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int sched_getaffinity(pid_t pid, unsigned int cpusetsize, cpu_set_t * mask)",
        "name": "sched_getaffinity",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "cpusetsize",
            "type": "unsigned int"
          },
          {
            "name": "mask",
            "type": "cpu_set_t *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int sched_setaffinity(pid_t pid, unsigned int cpusetsize, cpu_set_t * mask)",
        "name": "sched_setaffinity",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "cpusetsize",
            "type": "unsigned int"
          },
          {
            "name": "mask",
            "type": "cpu_set_t *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int sched_setscheduler(pid_t pid, int policy, const struct sched_param * param)",
        "name": "sched_setscheduler",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "policy",
            "type": "int"
          },
          {
            "name": "param",
            "type": "const struct sched_param *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int seed48_r(unsigned short[3] seed16v, struct drand48_data * buffer)",
        "name": "seed48_r",
        "type": "int",
        "args": [
          {
            "name": "seed16v",
            "type": "unsigned short[3]"
          },
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "ssize_t sendfile(int out_fd, int in_fd, off_t * offset, size_t count)",
        "name": "sendfile",
        "type": "ssize_t",
        "args": [
          {
            "name": "out_fd",
            "type": "int"
          },
          {
            "name": "in_fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t *"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/sendfile.h>"
        ]
      },
      {
        "prototype": "ssize_t sendfile64(int out_fd, int in_fd, off64_t * offset, size_t count)",
        "name": "sendfile64",
        "type": "ssize_t",
        "args": [
          {
            "name": "out_fd",
            "type": "int"
          },
          {
            "name": "in_fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off64_t *"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/sendfile.h>"
        ]
      },
      {
        "prototype": "void setbuffer(FILE * stream, char * buf, size_t size)",
        "name": "setbuffer",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int setgroups(size_t size, const gid_t * list)",
        "name": "setgroups",
        "type": "int",
        "args": [
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "list",
            "type": "const gid_t *"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int sethostname(const char * name, size_t len)",
        "name": "sethostname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/param.h.h>",
          "#include <sys/utsname.h>"
        ]
      },
      {
        "prototype": "int setsockopt(int socket, int level, int option_name, const void * option_value, socklen_t option_len)",
        "name": "setsockopt",
        "type": "int",
        "args": [
          {
            "name": "socket",
            "type": "int"
          },
          {
            "name": "level",
            "type": "int"
          },
          {
            "name": "option_name",
            "type": "int"
          },
          {
            "name": "option_value",
            "type": "const void *"
          },
          {
            "name": "option_len",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/socket.h>",
          "#include <netinet/ip.h>"
        ]
      },
      {
        "prototype": "int setstate_r(char * statebuf, struct random_data * buf)",
        "name": "setstate_r",
        "type": "int",
        "args": [
          {
            "name": "statebuf",
            "type": "char *"
          },
          {
            "name": "buf",
            "type": "struct random_data *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void setutent(void)",
        "name": "setutent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <utmp.h>"
        ]
      },
      {
        "prototype": "int sigandset(sigset_t * set, const sigset_t * left, const sigset_t * right)",
        "name": "sigandset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          },
          {
            "name": "left",
            "type": "const sigset_t *"
          },
          {
            "name": "right",
            "type": "const sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigisemptyset(const sigset_t * set)",
        "name": "sigisemptyset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "const sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigorset(sigset_t * set, const sigset_t * left, const sigset_t * right)",
        "name": "sigorset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          },
          {
            "name": "left",
            "type": "const sigset_t *"
          },
          {
            "name": "right",
            "type": "const sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigpause(int sig)",
        "name": "sigpause",
        "type": "int",
        "args": [
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigreturn(struct sigcontext * scp)",
        "name": "sigreturn",
        "type": "int",
        "args": [
          {
            "name": "scp",
            "type": "struct sigcontext *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int srand48_r(long int seedval, struct drand48_data * buffer)",
        "name": "srand48_r",
        "type": "int",
        "args": [
          {
            "name": "seedval",
            "type": "long int"
          },
          {
            "name": "buffer",
            "type": "struct drand48_data *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int srandom_r(unsigned int seed, struct random_data * buffer)",
        "name": "srandom_r",
        "type": "int",
        "args": [
          {
            "name": "seed",
            "type": "unsigned int"
          },
          {
            "name": "buffer",
            "type": "struct random_data *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int statfs(const char *path, struct statfs *buf)",
        "name": "statfs",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "buf",
            "type": "struct statfs *"
          }
        ],
        "includes": [
          "#include <sys/statfs.h>"
        ]
      },
      {
        "prototype": "int statfs64(const char * path, struct statfs64 *buf)",
        "name": "statfs64",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "buf",
            "type": "struct statfs64 *"
          }
        ],
        "includes": [
          "#include <sys/statfs.h>"
        ]
      },
      {
        "prototype": "int stime(const time_t * t)",
        "name": "stime",
        "type": "int",
        "args": [
          {
            "name": "t",
            "type": "const time_t *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "char * strcasestr(const char * s1, const char * s2)",
        "name": "strcasestr",
        "type": "char *",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strerror_r(int errnum, char * buf, size_t buflen)",
        "name": "strerror_r",
        "type": "char *",
        "args": [
          {
            "name": "errnum",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strsep(char * * stringp, const char * delim)",
        "name": "strsep",
        "type": "char *",
        "args": [
          {
            "name": "stringp",
            "type": "char * *"
          },
          {
            "name": "delim",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "long long strtoq(const char * nptr, char * * endptr, int base)",
        "name": "strtoq",
        "type": "long long",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          },
          {
            "name": "endptr",
            "type": "char * *"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "unsigned long long strtouq(const char * nptr, char * * endptr, int base)",
        "name": "strtouq",
        "type": "unsigned long long",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          },
          {
            "name": "endptr",
            "type": "char * *"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "bool_t svc_register(SVCXPRT * xprt, rpcprog_t prognum, rpcvers_t versnum, __dispatch_fn_t dispatch, rpcprot_t protocol)",
        "name": "svc_register",
        "type": "bool_t",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          },
          {
            "name": "prognum",
            "type": "rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "rpcvers_t"
          },
          {
            "name": "dispatch",
            "type": "__dispatch_fn_t"
          },
          {
            "name": "protocol",
            "type": "rpcprot_t"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_run(void)",
        "name": "svc_run",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/svc.h>"
        ]
      },
      {
        "prototype": "bool_t svc_sendreply(SVCXPRT *xprt, xdrproc_t outproc, caddr_t out)",
        "name": "svc_sendreply",
        "type": "bool_t",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          },
          {
            "name": "outproc",
            "type": "xdrproc_t"
          },
          {
            "name": "out",
            "type": "caddr_t"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "SVCXPRT * svctcp_create(int sock, u_int send_buf_size, u_int recv_buf_size)",
        "name": "svctcp_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": "sock",
            "type": "int"
          },
          {
            "name": "send_buf_size",
            "type": "u_int"
          },
          {
            "name": "recv_buf_size",
            "type": "u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "svcudp_create(int sock)",
        "name": "_arg_0",
        "type": "svcudp_create",
        "args": [
          {
            "name": "sock",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "long sysconf(int name)",
        "name": "sysconf",
        "type": "long",
        "args": [
          {
            "name": "name",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int sysinfo(struct sysinfo *info)",
        "name": "sysinfo",
        "type": "int",
        "args": [
          {
            "name": "info",
            "type": "struct sysinfo *"
          }
        ],
        "includes": [
          "#include <sys/sysinfo.h>"
        ]
      },
      {
        "prototype": "int system(const char * string)",
        "name": "system",
        "type": "int",
        "args": [
          {
            "name": "string",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * textdomain(const char * domainname)",
        "name": "textdomain",
        "type": "char *",
        "args": [
          {
            "name": "domainname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libintl.h>"
        ]
      },
      {
        "prototype": "int unlink(const char * path)",
        "name": "unlink",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int utmpname(const char * dbname)",
        "name": "utmpname",
        "type": "int",
        "args": [
          {
            "name": "dbname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmp.h>"
        ]
      },
      {
        "prototype": "int vasprintf(char * * restrict ptr, const char * restrict format, va_list arg)",
        "name": "vasprintf",
        "type": "int",
        "args": [
          {
            "name": "ptr",
            "type": "char * * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "arg",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdarg.h>",
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void verrx (int eval , const char * fmt , va_list args )",
        "name": "verrx",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdarg.h>",
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void vsyslog(int priority, char * message, va_list arglist)",
        "name": "vsyslog",
        "type": "void",
        "args": [
          {
            "name": "priority",
            "type": "int"
          },
          {
            "name": "message",
            "type": "char *"
          },
          {
            "name": "arglist",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdarg.h>",
          "#include <syslog.h>"
        ]
      },
      {
        "prototype": "pid_t wait4(pid_t pid, int * status, int options, struct rusage * rusage)",
        "name": "wait4",
        "type": "pid_t",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "status",
            "type": "int *"
          },
          {
            "name": "options",
            "type": "int"
          },
          {
            "name": "rusage",
            "type": "struct rusage *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/resource.h>",
          "#include <sys/wait.h>"
        ]
      },
      {
        "prototype": "void warn (const char * fmt , ...)",
        "name": "warn",
        "type": "void",
        "args": [
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void warnx (const char * fmt , ...)",
        "name": "warnx",
        "type": "void",
        "args": [
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "long long int wcstoq(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstoq",
        "type": "long long int",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "unsigned long long wcstouq(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstouq",
        "type": "unsigned long long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int xdr_u_int(XDR * xdrs, unsigned int * up)",
        "name": "xdr_u_int",
        "type": "int",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "up",
            "type": "unsigned int *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void xdrstdio_create(XDR * xdrs, FILE * file, enum xdr_op op)",
        "name": "xdrstdio_create",
        "type": "void",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "file",
            "type": "FILE *"
          },
          {
            "name": "op",
            "type": "enum xdr_op"
          }
        ],
        "includes": [
          "#include <rpc/xdr.h>"
        ]
      },
      {
        "prototype": "int __finite(double arg)",
        "name": "__finite",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __finitef(float arg)",
        "name": "__finitef",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __finitel(long double arg)",
        "name": "__finitel",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __fpclassify(double arg)",
        "name": "__fpclassify",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __fpclassifyf(float arg)",
        "name": "__fpclassifyf",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __signbit(double arg)",
        "name": "__signbit",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __signbitf(float arg)",
        "name": "__signbitf",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double complex clog10(double complex z)",
        "name": "clog10",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex clog10f(float complex z)",
        "name": "clog10f",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex clog10l(long double complex z)",
        "name": "clog10l",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double drem(double x, double y)",
        "name": "drem",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double dremf(double x, double y)",
        "name": "dremf",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double dreml(double x, double y)",
        "name": "dreml",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double exp10(double x)",
        "name": "exp10",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float exp10f(float x)",
        "name": "exp10f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double exp10l(long double x)",
        "name": "exp10l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int fedisableexcept(int excepts)",
        "name": "fedisableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feenableexcept(int excepts)",
        "name": "feenableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetexcept(void)",
        "name": "fegetexcept",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int finite(double arg)",
        "name": "finite",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int finitef(float arg)",
        "name": "finitef",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int finitel(long double arg)",
        "name": "finitel",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double gammaf(double x)",
        "name": "gammaf",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float gammaf(float x)",
        "name": "gammaf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double gammal(long double x)",
        "name": "gammal",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float j0f(float x)",
        "name": "j0f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double j0l(long double x)",
        "name": "j0l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float j1f(float x)",
        "name": "j1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double j1l(long double x)",
        "name": "j1l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float jnf(float x)",
        "name": "jnf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double jnl(long double x)",
        "name": "jnl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double lgamma_r(double x, int * signp)",
        "name": "lgamma_r",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "signp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float lgammaf_r(float x, int * signp)",
        "name": "lgammaf_r",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "signp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double lgammal_r(double x, int * signp)",
        "name": "lgammal_r",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "signp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int matherr(struct exception *__exc)",
        "name": "matherr",
        "type": "int",
        "args": [
          {
            "name": "__exc",
            "type": "struct exception *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double pow10(double x)",
        "name": "pow10",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float pow10f(float x)",
        "name": "pow10f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double pow10l(long double x)",
        "name": "pow10l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float scalbf(float x, double exp)",
        "name": "scalbf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "exp",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double scalbl(long double x, double exp)",
        "name": "scalbl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "exp",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double significand(double x)",
        "name": "significand",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float significandf(float x)",
        "name": "significandf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double significandl(long double x)",
        "name": "significandl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincos(double x, double * sin, double * cos)",
        "name": "sincos",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "sin",
            "type": "double *"
          },
          {
            "name": "cos",
            "type": "double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincosf(float x, float * sin, float * cos)",
        "name": "sincosf",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "sin",
            "type": "float *"
          },
          {
            "name": "cos",
            "type": "float *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincosl(long double x, long double * sin, long double * cos)",
        "name": "sincosl",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "sin",
            "type": "long double *"
          },
          {
            "name": "cos",
            "type": "long double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float y0f(float x)",
        "name": "y0f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double y0l(long double x)",
        "name": "y0l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float y1f(float x)",
        "name": "y1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double y1l(long double x)",
        "name": "y1l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float ynf(float x)",
        "name": "ynf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double ynl(long double x)",
        "name": "ynl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int pthread_getattr_np(pthread_t thread, pthread_attr_t *attr)",
        "name": "pthread_getattr_np",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutex_consistent_np(pthread_mutex_t * __mutex)",
        "name": "pthread_mutex_consistent_np",
        "type": "int",
        "args": [
          {
            "name": "__mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness)",
        "name": "pthread_mutexattr_getrobust_np",
        "type": "int",
        "args": [
          {
            "name": "__attr",
            "type": "const pthread_mutexattr_t *"
          },
          {
            "name": "__robustness",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setrobust_np(const pthread_mutexattr_t * __attr, int __robustness)",
        "name": "pthread_mutexattr_setrobust_np",
        "type": "int",
        "args": [
          {
            "name": "__attr",
            "type": "const pthread_mutexattr_t *"
          },
          {
            "name": "__robustness",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t * attr, int * pref)",
        "name": "pthread_rwlockattr_getkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_rwlockattr_t *"
          },
          {
            "name": "pref",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * attr, int * pref)",
        "name": "pthread_rwlockattr_setkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_rwlockattr_t *"
          },
          {
            "name": "pref",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument)",
        "name": "_Unwind_Backtrace",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "trace",
            "type": "_Unwind_Trace_Fn"
          },
          {
            "name": "trace_argument",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_DeleteException(struct _Unwind_Exception * object)",
        "name": "_Unwind_DeleteException",
        "type": "void",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void * _Unwind_FindEnclosingFunction(void * ip)",
        "name": "_Unwind_FindEnclosingFunction",
        "type": "void *",
        "args": [
          {
            "name": "ip",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_ForcedUnwind(struct _Unwind_Exception * object, _Unwind_Stop_Fn stop, void * stop_parameter)",
        "name": "_Unwind_ForcedUnwind",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          },
          {
            "name": "stop",
            "type": "_Unwind_Stop_Fn"
          },
          {
            "name": "stop_parameter",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "_Unwind_Word _Unwind_GetCFA(struct _Unwind_Context * context)",
        "name": "_Unwind_GetCFA",
        "type": "_Unwind_Word",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Word _Unwind_GetGR(struct _Unwind_Context * context, int index)",
        "name": "_Unwind_GetGR",
        "type": "_Unwind_Word",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "index",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context * context)",
        "name": "_Unwind_GetIP",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetIPInfo(struct _Unwind_Context * context, int * ip_before_insn)",
        "name": "_Unwind_GetIPInfo",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "ip_before_insn",
            "type": "int *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context * context)",
        "name": "_Unwind_GetLanguageSpecificData",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context * context)",
        "name": "_Unwind_GetRegionStart",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception * object)",
        "name": "_Unwind_RaiseException",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_Resume(struct _Unwind_Exception * object)",
        "name": "_Unwind_Resume",
        "type": "void",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct _Unwind_Exception * exception_object)",
        "name": "_Unwind_Resume_or_Rethrow",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "exception_object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_SetGR(struct _Unwind_Context * context, int index, uint value)",
        "name": "_Unwind_SetGR",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "index",
            "type": "int"
          },
          {
            "name": "value",
            "type": "uint"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_SetIP(struct _Unwind_Context * context, _Unwind_Ptr value)",
        "name": "_Unwind_SetIP",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "value",
            "type": "_Unwind_Ptr"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "int dladdr(const void * addr, Dl_info * dlip)",
        "name": "dladdr",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "dlip",
            "type": "Dl_info *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlopen(const char * filename, int flag)",
        "name": "dlopen",
        "type": "void *",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlvsym(void * handle, char * name, char * version)",
        "name": "dlvsym",
        "type": "void *",
        "args": [
          {
            "name": "handle",
            "type": "void *"
          },
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "version",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "char * crypt_r(const char * key, const char * salt, struct crypt_data * data)",
        "name": "crypt_r",
        "type": "char *",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "salt",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void encrypt_r(const char * block, int edflag, struct crypt_data * data)",
        "name": "encrypt_r",
        "type": "void",
        "args": [
          {
            "name": "block",
            "type": "const char *"
          },
          {
            "name": "edflag",
            "type": "int"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void setkey_r(const char * key, struct crypt_data * data)",
        "name": "setkey_r",
        "type": "void",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "int pam_acct_mgmt(pam_handle_t * pamh, int flags)",
        "name": "pam_acct_mgmt",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_authenticate(pam_handle_t * pamh, int flags)",
        "name": "pam_authenticate",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_chauthtok(pam_handle_t * pamh, const int flags)",
        "name": "pam_chauthtok",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "const int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_close_session(pam_handle_t * pamh, int flags)",
        "name": "pam_close_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_end(pam_handle_t * pamh, int pam_status)",
        "name": "pam_end",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "pam_status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_fail_delay(pam_handle_t * pamh, unsigned int micro_sec)",
        "name": "pam_fail_delay",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "micro_sec",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_get_item(const pam_handle_t * pamh, int item_type, const void * * item)",
        "name": "pam_get_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_getenv(const pam_handle_t * pamh, const char * name)",
        "name": "pam_getenv",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "char * const * pam_getenvlist(pam_handle_t * pamh)",
        "name": "pam_getenvlist",
        "type": "char * const *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_open_session(pam_handle_t * pamh, int flags)",
        "name": "pam_open_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_putenv(const pam_handle_t * pamh, const char * name_value)",
        "name": "pam_putenv",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name_value",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_set_item(pam_handle_t * pamh, int item_type, const void * item)",
        "name": "pam_set_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "extern int pam_setcred(pam_handle_t * pamh, int flags)",
        "name": "pam_setcred",
        "type": "extern int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_start(const char * service_name, const char * user, const struct pam_conv * pam_conversation, pam_handle_t * * pamh)",
        "name": "pam_start",
        "type": "int",
        "args": [
          {
            "name": "service_name",
            "type": "const char *"
          },
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "pam_conversation",
            "type": "const struct pam_conv *"
          },
          {
            "name": "pamh",
            "type": "pam_handle_t * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_strerror(pam_handle_t * pamh, int errnum)",
        "name": "pam_strerror",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "errnum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      }
    ]
  },
  "14.8. Interface Definitions for libm": {
    "functions": [
      {
        "prototype": "int __finite(double arg)",
        "name": "__finite",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __finitef(float arg)",
        "name": "__finitef",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __finitel(long double arg)",
        "name": "__finitel",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __fpclassify(double arg)",
        "name": "__fpclassify",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __fpclassifyf(float arg)",
        "name": "__fpclassifyf",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "int __signbit(double arg)",
        "name": "__signbit",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int __signbitf(float arg)",
        "name": "__signbitf",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double complex clog10(double complex z)",
        "name": "clog10",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex clog10f(float complex z)",
        "name": "clog10f",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex clog10l(long double complex z)",
        "name": "clog10l",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double drem(double x, double y)",
        "name": "drem",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double dremf(double x, double y)",
        "name": "dremf",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double dreml(double x, double y)",
        "name": "dreml",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double exp10(double x)",
        "name": "exp10",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float exp10f(float x)",
        "name": "exp10f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double exp10l(long double x)",
        "name": "exp10l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int fedisableexcept(int excepts)",
        "name": "fedisableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feenableexcept(int excepts)",
        "name": "feenableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetexcept(void)",
        "name": "fegetexcept",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int finite(double arg)",
        "name": "finite",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int finitef(float arg)",
        "name": "finitef",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int finitel(long double arg)",
        "name": "finitel",
        "type": "int",
        "args": [
          {
            "name": "arg",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double gammaf(double x)",
        "name": "gammaf",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float gammaf(float x)",
        "name": "gammaf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double gammal(long double x)",
        "name": "gammal",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float j0f(float x)",
        "name": "j0f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double j0l(long double x)",
        "name": "j0l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float j1f(float x)",
        "name": "j1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double j1l(long double x)",
        "name": "j1l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float jnf(float x)",
        "name": "jnf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double jnl(long double x)",
        "name": "jnl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double lgamma_r(double x, int * signp)",
        "name": "lgamma_r",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "signp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float lgammaf_r(float x, int * signp)",
        "name": "lgammaf_r",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "signp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double lgammal_r(double x, int * signp)",
        "name": "lgammal_r",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "signp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int matherr(struct exception *__exc)",
        "name": "matherr",
        "type": "int",
        "args": [
          {
            "name": "__exc",
            "type": "struct exception *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double pow10(double x)",
        "name": "pow10",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float pow10f(float x)",
        "name": "pow10f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double pow10l(long double x)",
        "name": "pow10l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float scalbf(float x, double exp)",
        "name": "scalbf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "exp",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double scalbl(long double x, double exp)",
        "name": "scalbl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "exp",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double significand(double x)",
        "name": "significand",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float significandf(float x)",
        "name": "significandf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double significandl(long double x)",
        "name": "significandl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincos(double x, double * sin, double * cos)",
        "name": "sincos",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "sin",
            "type": "double *"
          },
          {
            "name": "cos",
            "type": "double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincosf(float x, float * sin, float * cos)",
        "name": "sincosf",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "sin",
            "type": "float *"
          },
          {
            "name": "cos",
            "type": "float *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincosl(long double x, long double * sin, long double * cos)",
        "name": "sincosl",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "sin",
            "type": "long double *"
          },
          {
            "name": "cos",
            "type": "long double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float y0f(float x)",
        "name": "y0f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double y0l(long double x)",
        "name": "y0l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float y1f(float x)",
        "name": "y1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double y1l(long double x)",
        "name": "y1l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float ynf(float x)",
        "name": "ynf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double ynl(long double x)",
        "name": "ynl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int pthread_getattr_np(pthread_t thread, pthread_attr_t *attr)",
        "name": "pthread_getattr_np",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutex_consistent_np(pthread_mutex_t * __mutex)",
        "name": "pthread_mutex_consistent_np",
        "type": "int",
        "args": [
          {
            "name": "__mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness)",
        "name": "pthread_mutexattr_getrobust_np",
        "type": "int",
        "args": [
          {
            "name": "__attr",
            "type": "const pthread_mutexattr_t *"
          },
          {
            "name": "__robustness",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setrobust_np(const pthread_mutexattr_t * __attr, int __robustness)",
        "name": "pthread_mutexattr_setrobust_np",
        "type": "int",
        "args": [
          {
            "name": "__attr",
            "type": "const pthread_mutexattr_t *"
          },
          {
            "name": "__robustness",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t * attr, int * pref)",
        "name": "pthread_rwlockattr_getkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_rwlockattr_t *"
          },
          {
            "name": "pref",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * attr, int * pref)",
        "name": "pthread_rwlockattr_setkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_rwlockattr_t *"
          },
          {
            "name": "pref",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument)",
        "name": "_Unwind_Backtrace",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "trace",
            "type": "_Unwind_Trace_Fn"
          },
          {
            "name": "trace_argument",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_DeleteException(struct _Unwind_Exception * object)",
        "name": "_Unwind_DeleteException",
        "type": "void",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void * _Unwind_FindEnclosingFunction(void * ip)",
        "name": "_Unwind_FindEnclosingFunction",
        "type": "void *",
        "args": [
          {
            "name": "ip",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_ForcedUnwind(struct _Unwind_Exception * object, _Unwind_Stop_Fn stop, void * stop_parameter)",
        "name": "_Unwind_ForcedUnwind",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          },
          {
            "name": "stop",
            "type": "_Unwind_Stop_Fn"
          },
          {
            "name": "stop_parameter",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "_Unwind_Word _Unwind_GetCFA(struct _Unwind_Context * context)",
        "name": "_Unwind_GetCFA",
        "type": "_Unwind_Word",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Word _Unwind_GetGR(struct _Unwind_Context * context, int index)",
        "name": "_Unwind_GetGR",
        "type": "_Unwind_Word",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "index",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context * context)",
        "name": "_Unwind_GetIP",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetIPInfo(struct _Unwind_Context * context, int * ip_before_insn)",
        "name": "_Unwind_GetIPInfo",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "ip_before_insn",
            "type": "int *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context * context)",
        "name": "_Unwind_GetLanguageSpecificData",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context * context)",
        "name": "_Unwind_GetRegionStart",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception * object)",
        "name": "_Unwind_RaiseException",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_Resume(struct _Unwind_Exception * object)",
        "name": "_Unwind_Resume",
        "type": "void",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct _Unwind_Exception * exception_object)",
        "name": "_Unwind_Resume_or_Rethrow",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "exception_object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_SetGR(struct _Unwind_Context * context, int index, uint value)",
        "name": "_Unwind_SetGR",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "index",
            "type": "int"
          },
          {
            "name": "value",
            "type": "uint"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_SetIP(struct _Unwind_Context * context, _Unwind_Ptr value)",
        "name": "_Unwind_SetIP",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "value",
            "type": "_Unwind_Ptr"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "int dladdr(const void * addr, Dl_info * dlip)",
        "name": "dladdr",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "dlip",
            "type": "Dl_info *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlopen(const char * filename, int flag)",
        "name": "dlopen",
        "type": "void *",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlvsym(void * handle, char * name, char * version)",
        "name": "dlvsym",
        "type": "void *",
        "args": [
          {
            "name": "handle",
            "type": "void *"
          },
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "version",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "char * crypt_r(const char * key, const char * salt, struct crypt_data * data)",
        "name": "crypt_r",
        "type": "char *",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "salt",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void encrypt_r(const char * block, int edflag, struct crypt_data * data)",
        "name": "encrypt_r",
        "type": "void",
        "args": [
          {
            "name": "block",
            "type": "const char *"
          },
          {
            "name": "edflag",
            "type": "int"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void setkey_r(const char * key, struct crypt_data * data)",
        "name": "setkey_r",
        "type": "void",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "int pam_acct_mgmt(pam_handle_t * pamh, int flags)",
        "name": "pam_acct_mgmt",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_authenticate(pam_handle_t * pamh, int flags)",
        "name": "pam_authenticate",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_chauthtok(pam_handle_t * pamh, const int flags)",
        "name": "pam_chauthtok",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "const int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_close_session(pam_handle_t * pamh, int flags)",
        "name": "pam_close_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_end(pam_handle_t * pamh, int pam_status)",
        "name": "pam_end",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "pam_status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_fail_delay(pam_handle_t * pamh, unsigned int micro_sec)",
        "name": "pam_fail_delay",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "micro_sec",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_get_item(const pam_handle_t * pamh, int item_type, const void * * item)",
        "name": "pam_get_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_getenv(const pam_handle_t * pamh, const char * name)",
        "name": "pam_getenv",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "char * const * pam_getenvlist(pam_handle_t * pamh)",
        "name": "pam_getenvlist",
        "type": "char * const *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_open_session(pam_handle_t * pamh, int flags)",
        "name": "pam_open_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_putenv(const pam_handle_t * pamh, const char * name_value)",
        "name": "pam_putenv",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name_value",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_set_item(pam_handle_t * pamh, int item_type, const void * item)",
        "name": "pam_set_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "extern int pam_setcred(pam_handle_t * pamh, int flags)",
        "name": "pam_setcred",
        "type": "extern int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_start(const char * service_name, const char * user, const struct pam_conv * pam_conversation, pam_handle_t * * pamh)",
        "name": "pam_start",
        "type": "int",
        "args": [
          {
            "name": "service_name",
            "type": "const char *"
          },
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "pam_conversation",
            "type": "const struct pam_conv *"
          },
          {
            "name": "pamh",
            "type": "pam_handle_t * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_strerror(pam_handle_t * pamh, int errnum)",
        "name": "pam_strerror",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "errnum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      }
    ]
  },
  "14.11. Interface Definitions for libpthread": {
    "functions": [
      {
        "prototype": "int pthread_getattr_np(pthread_t thread, pthread_attr_t *attr)",
        "name": "pthread_getattr_np",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutex_consistent_np(pthread_mutex_t * __mutex)",
        "name": "pthread_mutex_consistent_np",
        "type": "int",
        "args": [
          {
            "name": "__mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness)",
        "name": "pthread_mutexattr_getrobust_np",
        "type": "int",
        "args": [
          {
            "name": "__attr",
            "type": "const pthread_mutexattr_t *"
          },
          {
            "name": "__robustness",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setrobust_np(const pthread_mutexattr_t * __attr, int __robustness)",
        "name": "pthread_mutexattr_setrobust_np",
        "type": "int",
        "args": [
          {
            "name": "__attr",
            "type": "const pthread_mutexattr_t *"
          },
          {
            "name": "__robustness",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t * attr, int * pref)",
        "name": "pthread_rwlockattr_getkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_rwlockattr_t *"
          },
          {
            "name": "pref",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * attr, int * pref)",
        "name": "pthread_rwlockattr_setkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_rwlockattr_t *"
          },
          {
            "name": "pref",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument)",
        "name": "_Unwind_Backtrace",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "trace",
            "type": "_Unwind_Trace_Fn"
          },
          {
            "name": "trace_argument",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_DeleteException(struct _Unwind_Exception * object)",
        "name": "_Unwind_DeleteException",
        "type": "void",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void * _Unwind_FindEnclosingFunction(void * ip)",
        "name": "_Unwind_FindEnclosingFunction",
        "type": "void *",
        "args": [
          {
            "name": "ip",
            "type": "void *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_ForcedUnwind(struct _Unwind_Exception * object, _Unwind_Stop_Fn stop, void * stop_parameter)",
        "name": "_Unwind_ForcedUnwind",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          },
          {
            "name": "stop",
            "type": "_Unwind_Stop_Fn"
          },
          {
            "name": "stop_parameter",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "_Unwind_Word _Unwind_GetCFA(struct _Unwind_Context * context)",
        "name": "_Unwind_GetCFA",
        "type": "_Unwind_Word",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Word _Unwind_GetGR(struct _Unwind_Context * context, int index)",
        "name": "_Unwind_GetGR",
        "type": "_Unwind_Word",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "index",
            "type": "int"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context * context)",
        "name": "_Unwind_GetIP",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetIPInfo(struct _Unwind_Context * context, int * ip_before_insn)",
        "name": "_Unwind_GetIPInfo",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "ip_before_insn",
            "type": "int *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context * context)",
        "name": "_Unwind_GetLanguageSpecificData",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "_Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context * context)",
        "name": "_Unwind_GetRegionStart",
        "type": "_Unwind_Ptr",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception * object)",
        "name": "_Unwind_RaiseException",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_Resume(struct _Unwind_Exception * object)",
        "name": "_Unwind_Resume",
        "type": "void",
        "args": [
          {
            "name": "object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "_Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct _Unwind_Exception * exception_object)",
        "name": "_Unwind_Resume_or_Rethrow",
        "type": "_Unwind_Reason_Code",
        "args": [
          {
            "name": "exception_object",
            "type": "struct _Unwind_Exception *"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_SetGR(struct _Unwind_Context * context, int index, uint value)",
        "name": "_Unwind_SetGR",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "index",
            "type": "int"
          },
          {
            "name": "value",
            "type": "uint"
          }
        ],
        "includes": [

        ]
      },
      {
        "prototype": "void _Unwind_SetIP(struct _Unwind_Context * context, _Unwind_Ptr value)",
        "name": "_Unwind_SetIP",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "struct _Unwind_Context *"
          },
          {
            "name": "value",
            "type": "_Unwind_Ptr"
          }
        ],
        "includes": [
          "#include <unwind.h>"
        ]
      },
      {
        "prototype": "int dladdr(const void * addr, Dl_info * dlip)",
        "name": "dladdr",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "dlip",
            "type": "Dl_info *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlopen(const char * filename, int flag)",
        "name": "dlopen",
        "type": "void *",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlvsym(void * handle, char * name, char * version)",
        "name": "dlvsym",
        "type": "void *",
        "args": [
          {
            "name": "handle",
            "type": "void *"
          },
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "version",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "char * crypt_r(const char * key, const char * salt, struct crypt_data * data)",
        "name": "crypt_r",
        "type": "char *",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "salt",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void encrypt_r(const char * block, int edflag, struct crypt_data * data)",
        "name": "encrypt_r",
        "type": "void",
        "args": [
          {
            "name": "block",
            "type": "const char *"
          },
          {
            "name": "edflag",
            "type": "int"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void setkey_r(const char * key, struct crypt_data * data)",
        "name": "setkey_r",
        "type": "void",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "int pam_acct_mgmt(pam_handle_t * pamh, int flags)",
        "name": "pam_acct_mgmt",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_authenticate(pam_handle_t * pamh, int flags)",
        "name": "pam_authenticate",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_chauthtok(pam_handle_t * pamh, const int flags)",
        "name": "pam_chauthtok",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "const int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_close_session(pam_handle_t * pamh, int flags)",
        "name": "pam_close_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_end(pam_handle_t * pamh, int pam_status)",
        "name": "pam_end",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "pam_status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_fail_delay(pam_handle_t * pamh, unsigned int micro_sec)",
        "name": "pam_fail_delay",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "micro_sec",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_get_item(const pam_handle_t * pamh, int item_type, const void * * item)",
        "name": "pam_get_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_getenv(const pam_handle_t * pamh, const char * name)",
        "name": "pam_getenv",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "char * const * pam_getenvlist(pam_handle_t * pamh)",
        "name": "pam_getenvlist",
        "type": "char * const *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_open_session(pam_handle_t * pamh, int flags)",
        "name": "pam_open_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_putenv(const pam_handle_t * pamh, const char * name_value)",
        "name": "pam_putenv",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name_value",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_set_item(pam_handle_t * pamh, int item_type, const void * item)",
        "name": "pam_set_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "extern int pam_setcred(pam_handle_t * pamh, int flags)",
        "name": "pam_setcred",
        "type": "extern int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_start(const char * service_name, const char * user, const struct pam_conv * pam_conversation, pam_handle_t * * pamh)",
        "name": "pam_start",
        "type": "int",
        "args": [
          {
            "name": "service_name",
            "type": "const char *"
          },
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "pam_conversation",
            "type": "const struct pam_conv *"
          },
          {
            "name": "pamh",
            "type": "pam_handle_t * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_strerror(pam_handle_t * pamh, int errnum)",
        "name": "pam_strerror",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "errnum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      }
    ]
  },
  "14.17. Interface Definitions for libdl": {
    "functions": [
      {
        "prototype": "int dladdr(const void * addr, Dl_info * dlip)",
        "name": "dladdr",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "dlip",
            "type": "Dl_info *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlopen(const char * filename, int flag)",
        "name": "dlopen",
        "type": "void *",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlvsym(void * handle, char * name, char * version)",
        "name": "dlvsym",
        "type": "void *",
        "args": [
          {
            "name": "handle",
            "type": "void *"
          },
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "version",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "char * crypt_r(const char * key, const char * salt, struct crypt_data * data)",
        "name": "crypt_r",
        "type": "char *",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "salt",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void encrypt_r(const char * block, int edflag, struct crypt_data * data)",
        "name": "encrypt_r",
        "type": "void",
        "args": [
          {
            "name": "block",
            "type": "const char *"
          },
          {
            "name": "edflag",
            "type": "int"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "void setkey_r(const char * key, struct crypt_data * data)",
        "name": "setkey_r",
        "type": "void",
        "args": [
          {
            "name": "key",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "struct crypt_data *"
          }
        ],
        "includes": [
          "#include <crypt.h>"
        ]
      },
      {
        "prototype": "int pam_acct_mgmt(pam_handle_t * pamh, int flags)",
        "name": "pam_acct_mgmt",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_authenticate(pam_handle_t * pamh, int flags)",
        "name": "pam_authenticate",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_chauthtok(pam_handle_t * pamh, const int flags)",
        "name": "pam_chauthtok",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "const int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_close_session(pam_handle_t * pamh, int flags)",
        "name": "pam_close_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_end(pam_handle_t * pamh, int pam_status)",
        "name": "pam_end",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "pam_status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_fail_delay(pam_handle_t * pamh, unsigned int micro_sec)",
        "name": "pam_fail_delay",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "micro_sec",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_get_item(const pam_handle_t * pamh, int item_type, const void * * item)",
        "name": "pam_get_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_getenv(const pam_handle_t * pamh, const char * name)",
        "name": "pam_getenv",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "char * const * pam_getenvlist(pam_handle_t * pamh)",
        "name": "pam_getenvlist",
        "type": "char * const *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_open_session(pam_handle_t * pamh, int flags)",
        "name": "pam_open_session",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_putenv(const pam_handle_t * pamh, const char * name_value)",
        "name": "pam_putenv",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "const pam_handle_t *"
          },
          {
            "name": "name_value",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_set_item(pam_handle_t * pamh, int item_type, const void * item)",
        "name": "pam_set_item",
        "type": "int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "item_type",
            "type": "int"
          },
          {
            "name": "item",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "extern int pam_setcred(pam_handle_t * pamh, int flags)",
        "name": "pam_setcred",
        "type": "extern int",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "int pam_start(const char * service_name, const char * user, const struct pam_conv * pam_conversation, pam_handle_t * * pamh)",
        "name": "pam_start",
        "type": "int",
        "args": [
          {
            "name": "service_name",
            "type": "const char *"
          },
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "pam_conversation",
            "type": "const struct pam_conv *"
          },
          {
            "name": "pamh",
            "type": "pam_handle_t * *"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      },
      {
        "prototype": "const char * pam_strerror(pam_handle_t * pamh, int errnum)",
        "name": "pam_strerror",
        "type": "const char *",
        "args": [
          {
            "name": "pamh",
            "type": "pam_handle_t *"
          },
          {
            "name": "errnum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <security/pam_appl.h>"
        ]
      }
    ]
  }
}
