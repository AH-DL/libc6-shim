#!/usr/bin/env ruby
# encoding: UTF-8

`sysctl hw.nvidia.version` =~ /^hw.nvidia.version: NVIDIA UNIX x86_64 Kernel Module  ([\d\.+]+)/
driver_version = $1

raise if not driver_version

libgl_nvidia = if ENV['SHIM_GLVND'] || driver_version.split('.').first.to_i >= 435
  "libGLX_nvidia.so.#{driver_version}"
else
  "libGL.so.#{driver_version}"
end

shim_lib = ENV['SHIM_DEBUG'] ? 'nvshim.debug.so' : 'nvshim.so'

libmap_common = [
   "libgl_nvidia #{libgl_nvidia}",
  ("libGL.so     #{libgl_nvidia}" if not ENV['SHIM_GLVND']),
  ("libGL.so.1   #{libgl_nvidia}" if not ENV['SHIM_GLVND']),
  '',
  "libGLX_nvidia.so.0            libGLX_nvidia.so.#{driver_version}",
  "libnvidia-ptxjitcompiler.so.1 libnvidia-ptxjitcompiler.so.#{driver_version}",
  '',
  "libcuda.so.1                  libcuda.so.#{driver_version}",
  "libnvcuvid.so.1               libnvcuvid.so.#{driver_version}",
  "libnvidia-encode.so.1         libnvidia-encode.so.#{driver_version}",
  "libnvidia-opencl.so.1         libnvidia-opencl.so.#{driver_version}",
  '',
  "ld-linux.so.2        #{shim_lib}",
  "ld-linux-x86-64.so.2 #{shim_lib}",
  "libc.so.6            #{shim_lib}",
  "libdl.so.2           #{shim_lib}",
  "libm.so.6            #{shim_lib}",
  "libpthread.so.0      #{shim_lib}",
  "librt.so.1           #{shim_lib}"
].compact

libmap64 = libmap_common.dup
libmap64 << 'bsd-librt.so.1 /usr/lib/librt.so.1'

libmap32 = libmap_common.dup
libmap32 << 'bsd-librt.so.1 /usr/lib32/librt.so.1'

if ENV['SHIM_FAKECXXRT']
  libmap64 << "libcxxrt.so.1 fakecxxrt.so" if File.exist?(__dir__ + '/build/lib64/fakecxxrt.so')
  libmap32 << "libcxxrt.so.1 fakecxxrt.so" if File.exist?(__dir__ + '/build/lib32/fakecxxrt.so')
end

ENV['LD_LIBMAP']          = libmap64.join("\n")
ENV['LD_32_LIBMAP']       = libmap32.join("\n")
ENV['LD_LIBRARY_PATH']    = [__dir__ + '/build/lib64', __dir__ + '/nvidia/lib64/tls', __dir__ + '/nvidia/lib64', ENV['LD_LIBRARY_PATH']   ].compact.join(':')
ENV['LD_32_LIBRARY_PATH'] = [__dir__ + '/build/lib32', __dir__ + '/nvidia/lib32/tls', __dir__ + '/nvidia/lib32', ENV['LD_32_LIBRARY_PATH']].compact.join(':')

ENV['OCL_ICD_VENDORS']    = __dir__ + '/icds/ocl'
ENV['VK_ICD_FILENAMES']   = __dir__ + '/icds/vk/nv.json'

exec *ARGV
