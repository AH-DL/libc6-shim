{
  "SYSCALL(2)": {
    "functions": [
      {
        "prototype": "int syscall(int number, ...)",
        "name": "syscall",
        "type": "int",
        "args": [
          {
            "name": "number",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/syscall.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "off_t __syscall(quad_t number, ...)",
        "name": "__syscall",
        "type": "off_t",
        "args": [
          {
            "name": "number",
            "type": "quad_t"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/syscall.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "EXIT(2)": {
    "functions": [
      {
        "prototype": "void _exit(int status)",
        "name": "_exit",
        "type": "void",
        "args": [
          {
            "name": "status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "_UMTX_OP(2)": {
    "functions": [
      {
        "prototype": "int _umtx_op(void *obj, int op, u_long val, void *uaddr, void *uaddr2)",
        "name": "_umtx_op",
        "type": "int",
        "args": [
          {
            "name": "obj",
            "type": "void *"
          },
          {
            "name": "op",
            "type": "int"
          },
          {
            "name": "val",
            "type": "u_long"
          },
          {
            "name": "uaddr",
            "type": "void *"
          },
          {
            "name": "uaddr2",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/umtx.h>"
        ]
      }
    ]
  },
  "ABORT2(2)": {
    "functions": [
      {
        "prototype": "void abort2(const char *why, int nargs, void **args)",
        "name": "abort2",
        "type": "void",
        "args": [
          {
            "name": "why",
            "type": "const char *"
          },
          {
            "name": "nargs",
            "type": "int"
          },
          {
            "name": "args",
            "type": "void **"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ACCEPT(2)": {
    "functions": [
      {
        "prototype": "int accept(int s, struct sockaddr * restrict addr, socklen_t * restrict addrlen)",
        "name": "accept",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "struct sockaddr * restrict"
          },
          {
            "name": "addrlen",
            "type": "socklen_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "int accept4(int s, struct sockaddr * restrict addr, socklen_t * restrict addrlen, int flags)",
        "name": "accept4",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "struct sockaddr * restrict"
          },
          {
            "name": "addrlen",
            "type": "socklen_t * restrict"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "ACCESS(2)": {
    "functions": [
      {
        "prototype": "int access(const char *path, int mode)",
        "name": "access",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int eaccess(const char *path, int mode)",
        "name": "eaccess",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int faccessat(int fd, const char *path, int mode, int flag)",
        "name": "faccessat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "ACCT(2)": {
    "functions": [
      {
        "prototype": "int acct(const char *file)",
        "name": "acct",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "ADJTIME(2)": {
    "functions": [
      {
        "prototype": "int adjtime(const struct timeval *delta, struct timeval *olddelta)",
        "name": "adjtime",
        "type": "int",
        "args": [
          {
            "name": "delta",
            "type": "const struct timeval *"
          },
          {
            "name": "olddelta",
            "type": "struct timeval *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      }
    ]
  },
  "AIO_CANCEL(2)": {
    "functions": [
      {
        "prototype": "int aio_cancel(int fildes, struct aiocb *iocb)",
        "name": "aio_cancel",
        "type": "int",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "iocb",
            "type": "struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_ERROR(2)": {
    "functions": [
      {
        "prototype": "int aio_error(const struct aiocb *iocb)",
        "name": "aio_error",
        "type": "int",
        "args": [
          {
            "name": "iocb",
            "type": "const struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_FSYNC(2)": {
    "functions": [
      {
        "prototype": "int aio_fsync(int op, struct aiocb *iocb)",
        "name": "aio_fsync",
        "type": "int",
        "args": [
          {
            "name": "op",
            "type": "int"
          },
          {
            "name": "iocb",
            "type": "struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_MLOCK(2)": {
    "functions": [
      {
        "prototype": "int aio_mlock(struct aiocb *iocb)",
        "name": "aio_mlock",
        "type": "int",
        "args": [
          {
            "name": "iocb",
            "type": "struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_READ(2)": {
    "functions": [
      {
        "prototype": "int aio_read(struct aiocb *iocb)",
        "name": "aio_read",
        "type": "int",
        "args": [
          {
            "name": "iocb",
            "type": "struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_RETURN(2)": {
    "functions": [
      {
        "prototype": "ssize_t aio_return(struct aiocb *iocb)",
        "name": "aio_return",
        "type": "ssize_t",
        "args": [
          {
            "name": "iocb",
            "type": "struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_SUSPEND(2)": {
    "functions": [
      {
        "prototype": "int aio_suspend(const struct aiocb *const iocbs[], int niocb, const struct timespec *timeout)",
        "name": "aio_suspend",
        "type": "int",
        "args": [
          {
            "name": "iocbs",
            "type": "const struct aiocb *const []"
          },
          {
            "name": "niocb",
            "type": "int"
          },
          {
            "name": "timeout",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_WAITCOMPLETE(2)": {
    "functions": [
      {
        "prototype": "ssize_t aio_waitcomplete(struct aiocb **iocbp, struct timespec *timeout)",
        "name": "aio_waitcomplete",
        "type": "ssize_t",
        "args": [
          {
            "name": "iocbp",
            "type": "struct aiocb **"
          },
          {
            "name": "timeout",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "AIO_WRITE(2)": {
    "functions": [
      {
        "prototype": "int aio_write(struct aiocb *iocb)",
        "name": "aio_write",
        "type": "int",
        "args": [
          {
            "name": "iocb",
            "type": "struct aiocb *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "BIND(2)": {
    "functions": [
      {
        "prototype": "int bind(int s, const struct sockaddr *addr, socklen_t addrlen)",
        "name": "bind",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "const struct sockaddr *"
          },
          {
            "name": "addrlen",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "BINDAT(2)": {
    "functions": [
      {
        "prototype": "int bindat(int fd, int s, const struct sockaddr *addr, socklen_t addrlen)",
        "name": "bindat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "const struct sockaddr *"
          },
          {
            "name": "addrlen",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "BRK(2)": {
    "functions": [
      {
        "prototype": "int brk(const void *addr)",
        "name": "brk",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "void * sbrk(intptr_t incr)",
        "name": "sbrk",
        "type": "void *",
        "args": [
          {
            "name": "incr",
            "type": "intptr_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CAP_ENTER(2)": {
    "functions": [
      {
        "prototype": "int cap_enter(void)",
        "name": "cap_enter",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "int cap_getmode(u_int *modep)",
        "name": "cap_getmode",
        "type": "int",
        "args": [
          {
            "name": "modep",
            "type": "u_int *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      }
    ]
  },
  "CAP_FCNTLS_LIMIT(2)": {
    "functions": [
      {
        "prototype": "int cap_fcntls_limit(int fd, uint32_t fcntlrights)",
        "name": "cap_fcntls_limit",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "fcntlrights",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "int cap_fcntls_get(int fd, uint32_t *fcntlrightsp)",
        "name": "cap_fcntls_get",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "fcntlrightsp",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      }
    ]
  },
  "CAP_IOCTLS_LIMIT(2)": {
    "functions": [
      {
        "prototype": "int cap_ioctls_limit(int fd, const unsigned long *cmds, size_t ncmds)",
        "name": "cap_ioctls_limit",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "cmds",
            "type": "const unsigned long *"
          },
          {
            "name": "ncmds",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "ssize_t cap_ioctls_get(int fd, unsigned long *cmds, size_t maxcmds)",
        "name": "cap_ioctls_get",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "cmds",
            "type": "unsigned long *"
          },
          {
            "name": "maxcmds",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      }
    ]
  },
  "CAP_RIGHTS_LIMIT(2)": {
    "functions": [
      {
        "prototype": "int cap_rights_limit(int fd, const cap_rights_t *rights)",
        "name": "cap_rights_limit",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "rights",
            "type": "const cap_rights_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      }
    ]
  },
  "CHDIR(2)": {
    "functions": [
      {
        "prototype": "int chdir(const char *path)",
        "name": "chdir",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int fchdir(int fd)",
        "name": "fchdir",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CHFLAGS(2)": {
    "functions": [
      {
        "prototype": "int chflags(const char *path, unsigned long flags)",
        "name": "chflags",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "unsigned long"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int lchflags(const char *path, unsigned long flags)",
        "name": "lchflags",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "unsigned long"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int fchflags(int fd, unsigned long flags)",
        "name": "fchflags",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "unsigned long"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int chflagsat(int fd, const char *path, unsigned long flags, int atflag)",
        "name": "chflagsat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "unsigned long"
          },
          {
            "name": "atflag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CHMOD(2)": {
    "functions": [
      {
        "prototype": "int chmod(const char *path, mode_t mode)",
        "name": "chmod",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fchmod(int fd, mode_t mode)",
        "name": "fchmod",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int lchmod(const char *path, mode_t mode)",
        "name": "lchmod",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fchmodat(int fd, const char *path, mode_t mode, int flag)",
        "name": "fchmodat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "CHOWN(2)": {
    "functions": [
      {
        "prototype": "int chown(const char *path, uid_t owner, gid_t group)",
        "name": "chown",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "owner",
            "type": "uid_t"
          },
          {
            "name": "group",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int fchown(int fd, uid_t owner, gid_t group)",
        "name": "fchown",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "owner",
            "type": "uid_t"
          },
          {
            "name": "group",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int lchown(const char *path, uid_t owner, gid_t group)",
        "name": "lchown",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "owner",
            "type": "uid_t"
          },
          {
            "name": "group",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag)",
        "name": "fchownat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "owner",
            "type": "uid_t"
          },
          {
            "name": "group",
            "type": "gid_t"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CHROOT(2)": {
    "functions": [
      {
        "prototype": "int chroot(const char *dirname)",
        "name": "chroot",
        "type": "int",
        "args": [
          {
            "name": "dirname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CLOCK_GETTIME(2)": {
    "functions": [
      {
        "prototype": "int clock_gettime(clockid_t clock_id, struct timespec *tp)",
        "name": "clock_gettime",
        "type": "int",
        "args": [
          {
            "name": "clock_id",
            "type": "clockid_t"
          },
          {
            "name": "tp",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "int clock_settime(clockid_t clock_id, const struct timespec *tp)",
        "name": "clock_settime",
        "type": "int",
        "args": [
          {
            "name": "clock_id",
            "type": "clockid_t"
          },
          {
            "name": "tp",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "int clock_getres(clockid_t clock_id, struct timespec *tp)",
        "name": "clock_getres",
        "type": "int",
        "args": [
          {
            "name": "clock_id",
            "type": "clockid_t"
          },
          {
            "name": "tp",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "NANOSLEEP(2)": {
    "functions": [
      {
        "prototype": "int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp)",
        "name": "clock_nanosleep",
        "type": "int",
        "args": [
          {
            "name": "clock_id",
            "type": "clockid_t"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "rqtp",
            "type": "const struct timespec *"
          },
          {
            "name": "rmtp",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "int nanosleep(const struct timespec *rqtp, struct timespec *rmtp)",
        "name": "nanosleep",
        "type": "int",
        "args": [
          {
            "name": "rqtp",
            "type": "const struct timespec *"
          },
          {
            "name": "rmtp",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "CLOSE(2)": {
    "functions": [
      {
        "prototype": "int close(int fd)",
        "name": "close",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CLOSEFROM(2)": {
    "functions": [
      {
        "prototype": "void closefrom(int lowfd)",
        "name": "closefrom",
        "type": "void",
        "args": [
          {
            "name": "lowfd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CONNECT(2)": {
    "functions": [
      {
        "prototype": "int connect(int s, const struct sockaddr *name, socklen_t namelen)",
        "name": "connect",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "name",
            "type": "const struct sockaddr *"
          },
          {
            "name": "namelen",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "CONNECTAT(2)": {
    "functions": [
      {
        "prototype": "int connectat(int fd, int s, const struct sockaddr *name, socklen_t namelen)",
        "name": "connectat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "name",
            "type": "const struct sockaddr *"
          },
          {
            "name": "namelen",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "CPUSET(2)": {
    "functions": [
      {
        "prototype": "int cpuset(cpusetid_t *setid)",
        "name": "cpuset",
        "type": "int",
        "args": [
          {
            "name": "setid",
            "type": "cpusetid_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/cpuset.h>"
        ]
      },
      {
        "prototype": "int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid)",
        "name": "cpuset_setid",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "cpuwhich_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "setid",
            "type": "cpusetid_t"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/cpuset.h>"
        ]
      },
      {
        "prototype": "int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid)",
        "name": "cpuset_getid",
        "type": "int",
        "args": [
          {
            "name": "level",
            "type": "cpulevel_t"
          },
          {
            "name": "which",
            "type": "cpuwhich_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "setid",
            "type": "cpusetid_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/cpuset.h>"
        ]
      }
    ]
  },
  "CPUSET_GETAFFINITY(2)": {
    "functions": [
      {
        "prototype": "int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t setsize, cpuset_t *mask)",
        "name": "cpuset_getaffinity",
        "type": "int",
        "args": [
          {
            "name": "level",
            "type": "cpulevel_t"
          },
          {
            "name": "which",
            "type": "cpuwhich_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "setsize",
            "type": "size_t"
          },
          {
            "name": "mask",
            "type": "cpuset_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/cpuset.h>"
        ]
      },
      {
        "prototype": "int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t setsize, const cpuset_t *mask)",
        "name": "cpuset_setaffinity",
        "type": "int",
        "args": [
          {
            "name": "level",
            "type": "cpulevel_t"
          },
          {
            "name": "which",
            "type": "cpuwhich_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "setsize",
            "type": "size_t"
          },
          {
            "name": "mask",
            "type": "const cpuset_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/cpuset.h>"
        ]
      }
    ]
  },
  "CREAT(2)": {
    "functions": [
      {
        "prototype": "int creat(const char *path, mode_t mode)",
        "name": "creat",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "DUP(2)": {
    "functions": [
      {
        "prototype": "int dup(int oldd)",
        "name": "dup",
        "type": "int",
        "args": [
          {
            "name": "oldd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int dup2(int oldd, int newd)",
        "name": "dup2",
        "type": "int",
        "args": [
          {
            "name": "oldd",
            "type": "int"
          },
          {
            "name": "newd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "INTRO(2)": {
    "functions": [

    ]
  },
  "EXECVE(2)": {
    "functions": [
      {
        "prototype": "int execve(const char *path, char *const argv[], char *const envp[])",
        "name": "execve",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "argv",
            "type": "char *const []"
          },
          {
            "name": "envp",
            "type": "char *const []"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int fexecve(int fd, char *const argv[], char *const envp[])",
        "name": "fexecve",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char *const []"
          },
          {
            "name": "envp",
            "type": "char *const []"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "EXTATTR(2)": {
    "functions": [
      {
        "prototype": "ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes)",
        "name": "extattr_get_fd",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes)",
        "name": "extattr_set_fd",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "const void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "int extattr_delete_fd(int fd, int attrnamespace, const char *attrname)",
        "name": "extattr_delete_fd",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes)",
        "name": "extattr_list_fd",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "data",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes)",
        "name": "extattr_get_file",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes)",
        "name": "extattr_set_file",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "const void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "int extattr_delete_file(const char *path, int attrnamespace, const char *attrname)",
        "name": "extattr_delete_file",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes)",
        "name": "extattr_list_file",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "data",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes)",
        "name": "extattr_get_link",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes)",
        "name": "extattr_set_link",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          },
          {
            "name": "data",
            "type": "const void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "int extattr_delete_link(const char *path, int attrnamespace, const char *attrname)",
        "name": "extattr_delete_link",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "attrname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      },
      {
        "prototype": "ssize_t extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes)",
        "name": "extattr_list_link",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "attrnamespace",
            "type": "int"
          },
          {
            "name": "data",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/extattr.h>"
        ]
      }
    ]
  },
  "FCNTL(2)": {
    "functions": [
      {
        "prototype": "int fcntl(int fd, int cmd, ...)",
        "name": "fcntl",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "FSYNC(2)": {
    "functions": [
      {
        "prototype": "int fdatasync(int fd)",
        "name": "fdatasync",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int fsync(int fd)",
        "name": "fsync",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "FFCLOCK(2)": {
    "functions": [
      {
        "prototype": "int ffclock_getcounter(ffcounter *ffcount)",
        "name": "ffclock_getcounter",
        "type": "int",
        "args": [
          {
            "name": "ffcount",
            "type": "ffcounter *"
          }
        ],
        "includes": [
          "#include <sys/timeffc.h>"
        ]
      },
      {
        "prototype": "int ffclock_getestimate(struct ffclock_estimate *cest)",
        "name": "ffclock_getestimate",
        "type": "int",
        "args": [
          {
            "name": "cest",
            "type": "struct ffclock_estimate *"
          }
        ],
        "includes": [
          "#include <sys/timeffc.h>"
        ]
      },
      {
        "prototype": "int ffclock_setestimate(struct ffclock_estimate *cest)",
        "name": "ffclock_setestimate",
        "type": "int",
        "args": [
          {
            "name": "cest",
            "type": "struct ffclock_estimate *"
          }
        ],
        "includes": [
          "#include <sys/timeffc.h>"
        ]
      }
    ]
  },
  "FHOPEN(2)": {
    "functions": [
      {
        "prototype": "int fhopen(const fhandle_t *fhp, int flags)",
        "name": "fhopen",
        "type": "int",
        "args": [
          {
            "name": "fhp",
            "type": "const fhandle_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>",
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fhstat(const fhandle_t *fhp, struct stat *sb)",
        "name": "fhstat",
        "type": "int",
        "args": [
          {
            "name": "fhp",
            "type": "const fhandle_t *"
          },
          {
            "name": "sb",
            "type": "struct stat *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>",
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fhstatfs(const fhandle_t *fhp, struct statfs *buf)",
        "name": "fhstatfs",
        "type": "int",
        "args": [
          {
            "name": "fhp",
            "type": "const fhandle_t *"
          },
          {
            "name": "buf",
            "type": "struct statfs *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>",
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "FLOCK(2)": {
    "functions": [
      {
        "prototype": "int flock(int fd, int operation)",
        "name": "flock",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "operation",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/file.h>"
        ]
      }
    ]
  },
  "FORK(2)": {
    "functions": [
      {
        "prototype": "pid_t fork(void)",
        "name": "fork",
        "type": "pid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "PATHCONF(2)": {
    "functions": [
      {
        "prototype": "long pathconf(const char *path, int name)",
        "name": "pathconf",
        "type": "long",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "name",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "long lpathconf(const char *path, int name)",
        "name": "lpathconf",
        "type": "long",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "name",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "long fpathconf(int fd, int name)",
        "name": "fpathconf",
        "type": "long",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "name",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "STAT(2)": {
    "functions": [
      {
        "prototype": "int stat(const char * restrict path, struct stat * restrict sb)",
        "name": "stat",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char * restrict"
          },
          {
            "name": "sb",
            "type": "struct stat * restrict"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int lstat(const char * restrict path, struct stat * restrict sb)",
        "name": "lstat",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char * restrict"
          },
          {
            "name": "sb",
            "type": "struct stat * restrict"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fstat(int fd, struct stat *sb)",
        "name": "fstat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "sb",
            "type": "struct stat *"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int fstatat(int fd, const char *path, struct stat *buf, int flag)",
        "name": "fstatat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "buf",
            "type": "struct stat *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "STATFS(2)": {
    "functions": [
      {
        "prototype": "int statfs(const char *path, struct statfs *buf)",
        "name": "statfs",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "buf",
            "type": "struct statfs *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      },
      {
        "prototype": "int fstatfs(int fd, struct statfs *buf)",
        "name": "fstatfs",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "struct statfs *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      }
    ]
  },
  "TRUNCATE(2)": {
    "functions": [
      {
        "prototype": "int truncate(const char *path, off_t length)",
        "name": "truncate",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "length",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int ftruncate(int fd, off_t length)",
        "name": "ftruncate",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "length",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "UTIMENSAT(2)": {
    "functions": [
      {
        "prototype": "int futimens(int fd, const struct timespec times[2])",
        "name": "futimens",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "times",
            "type": "const struct timespec [2]"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int utimensat(int fd, const char *path, const struct timespec times[2], int flag)",
        "name": "utimensat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "times",
            "type": "const struct timespec [2]"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "UTIMES(2)": {
    "functions": [
      {
        "prototype": "int utimes(const char *path, const struct timeval *times)",
        "name": "utimes",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "times",
            "type": "const struct timeval *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "int lutimes(const char *path, const struct timeval *times)",
        "name": "lutimes",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "times",
            "type": "const struct timeval *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "int futimes(int fd, const struct timeval *times)",
        "name": "futimes",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "times",
            "type": "const struct timeval *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "int futimesat(int fd, const char *path, const struct timeval times[2])",
        "name": "futimesat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "times",
            "type": "const struct timeval [2]"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      }
    ]
  },
  "GETDIRENTRIES(2)": {
    "functions": [
      {
        "prototype": "int getdirentries(int fd, char *buf, int nbytes, long *basep)",
        "name": "getdirentries",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "nbytes",
            "type": "int"
          },
          {
            "name": "basep",
            "type": "long *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int getdents(int fd, char *buf, int nbytes)",
        "name": "getdents",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "nbytes",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <dirent.h>"
        ]
      }
    ]
  },
  "GETDTABLESIZE(2)": {
    "functions": [
      {
        "prototype": "int getdtablesize(void)",
        "name": "getdtablesize",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETGID(2)": {
    "functions": [
      {
        "prototype": "gid_t getgid(void)",
        "name": "getgid",
        "type": "gid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "gid_t getegid(void)",
        "name": "getegid",
        "type": "gid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETUID(2)": {
    "functions": [
      {
        "prototype": "uid_t getuid(void)",
        "name": "getuid",
        "type": "uid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "uid_t geteuid(void)",
        "name": "geteuid",
        "type": "uid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETFH(2)": {
    "functions": [
      {
        "prototype": "int getfh(const char *path, fhandle_t *fhp)",
        "name": "getfh",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "fhp",
            "type": "fhandle_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      },
      {
        "prototype": "int lgetfh(const char *path, fhandle_t *fhp)",
        "name": "lgetfh",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "fhp",
            "type": "fhandle_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      }
    ]
  },
  "GETFSSTAT(2)": {
    "functions": [
      {
        "prototype": "int getfsstat(struct statfs *buf, long bufsize, int mode)",
        "name": "getfsstat",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "struct statfs *"
          },
          {
            "name": "bufsize",
            "type": "long"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/ucred.h>",
          "#include <sys/mount.h>"
        ]
      }
    ]
  },
  "GETGROUPS(2)": {
    "functions": [
      {
        "prototype": "int getgroups(int gidsetlen, gid_t *gidset)",
        "name": "getgroups",
        "type": "int",
        "args": [
          {
            "name": "gidsetlen",
            "type": "int"
          },
          {
            "name": "gidset",
            "type": "gid_t *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETITIMER(2)": {
    "functions": [
      {
        "prototype": "int getitimer(int which, struct itimerval *value)",
        "name": "getitimer",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "int"
          },
          {
            "name": "value",
            "type": "struct itimerval *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue)",
        "name": "setitimer",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "int"
          },
          {
            "name": "value",
            "type": "const struct itimerval *"
          },
          {
            "name": "ovalue",
            "type": "struct itimerval *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      }
    ]
  },
  "GETLOGIN(2)": {
    "functions": [
      {
        "prototype": "char * getlogin(void)",
        "name": "getlogin",
        "type": "char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getlogin_r(char *name, int len)",
        "name": "getlogin_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/param.h>"
        ]
      },
      {
        "prototype": "int setlogin(const char *name)",
        "name": "setlogin",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/param.h>"
        ]
      }
    ]
  },
  "GETLOGINCLASS(2)": {
    "functions": [
      {
        "prototype": "int getloginclass(char *name, size_t len)",
        "name": "getloginclass",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setloginclass(const char *name)",
        "name": "setloginclass",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPEERNAME(2)": {
    "functions": [
      {
        "prototype": "int getpeername(int s, struct sockaddr * restrict name, socklen_t * restrict namelen)",
        "name": "getpeername",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "name",
            "type": "struct sockaddr * restrict"
          },
          {
            "name": "namelen",
            "type": "socklen_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "GETPGRP(2)": {
    "functions": [
      {
        "prototype": "pid_t getpgrp(void)",
        "name": "getpgrp",
        "type": "pid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "pid_t getpgid(pid_t pid)",
        "name": "getpgid",
        "type": "pid_t",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPID(2)": {
    "functions": [
      {
        "prototype": "pid_t getpid(void)",
        "name": "getpid",
        "type": "pid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "pid_t getppid(void)",
        "name": "getppid",
        "type": "pid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPRIORITY(2)": {
    "functions": [
      {
        "prototype": "int getpriority(int which, int who)",
        "name": "getpriority",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "int"
          },
          {
            "name": "who",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      },
      {
        "prototype": "int setpriority(int which, int who, int prio)",
        "name": "setpriority",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "int"
          },
          {
            "name": "who",
            "type": "int"
          },
          {
            "name": "prio",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      }
    ]
  },
  "SETRESUID(2)": {
    "functions": [
      {
        "prototype": "int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid)",
        "name": "getresgid",
        "type": "int",
        "args": [
          {
            "name": "rgid",
            "type": "gid_t *"
          },
          {
            "name": "egid",
            "type": "gid_t *"
          },
          {
            "name": "sgid",
            "type": "gid_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid)",
        "name": "getresuid",
        "type": "int",
        "args": [
          {
            "name": "ruid",
            "type": "uid_t *"
          },
          {
            "name": "euid",
            "type": "uid_t *"
          },
          {
            "name": "suid",
            "type": "uid_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setresgid(gid_t rgid, gid_t egid, gid_t sgid)",
        "name": "setresgid",
        "type": "int",
        "args": [
          {
            "name": "rgid",
            "type": "gid_t"
          },
          {
            "name": "egid",
            "type": "gid_t"
          },
          {
            "name": "sgid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setresuid(uid_t ruid, uid_t euid, uid_t suid)",
        "name": "setresuid",
        "type": "int",
        "args": [
          {
            "name": "ruid",
            "type": "uid_t"
          },
          {
            "name": "euid",
            "type": "uid_t"
          },
          {
            "name": "suid",
            "type": "uid_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETRLIMIT(2)": {
    "functions": [
      {
        "prototype": "int getrlimit(int resource, struct rlimit *rlp)",
        "name": "getrlimit",
        "type": "int",
        "args": [
          {
            "name": "resource",
            "type": "int"
          },
          {
            "name": "rlp",
            "type": "struct rlimit *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      },
      {
        "prototype": "int setrlimit(int resource, const struct rlimit *rlp)",
        "name": "setrlimit",
        "type": "int",
        "args": [
          {
            "name": "resource",
            "type": "int"
          },
          {
            "name": "rlp",
            "type": "const struct rlimit *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      }
    ]
  },
  "GETRUSAGE(2)": {
    "functions": [
      {
        "prototype": "int getrusage(int who, struct rusage *rusage)",
        "name": "getrusage",
        "type": "int",
        "args": [
          {
            "name": "who",
            "type": "int"
          },
          {
            "name": "rusage",
            "type": "struct rusage *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      }
    ]
  },
  "GETSID(2)": {
    "functions": [
      {
        "prototype": "pid_t getsid(pid_t pid)",
        "name": "getsid",
        "type": "pid_t",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETSOCKNAME(2)": {
    "functions": [
      {
        "prototype": "int getsockname(int s, struct sockaddr * restrict name, socklen_t * restrict namelen)",
        "name": "getsockname",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "name",
            "type": "struct sockaddr * restrict"
          },
          {
            "name": "namelen",
            "type": "socklen_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "GETSOCKOPT(2)": {
    "functions": [
      {
        "prototype": "int getsockopt(int s, int level, int optname, void * restrict optval, socklen_t * restrict optlen)",
        "name": "getsockopt",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "level",
            "type": "int"
          },
          {
            "name": "optname",
            "type": "int"
          },
          {
            "name": "optval",
            "type": "void * restrict"
          },
          {
            "name": "optlen",
            "type": "socklen_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "int setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)",
        "name": "setsockopt",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "level",
            "type": "int"
          },
          {
            "name": "optname",
            "type": "int"
          },
          {
            "name": "optval",
            "type": "const void *"
          },
          {
            "name": "optlen",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "GETTIMEOFDAY(2)": {
    "functions": [
      {
        "prototype": "int gettimeofday(struct timeval *tp, struct timezone *tzp)",
        "name": "gettimeofday",
        "type": "int",
        "args": [
          {
            "name": "tp",
            "type": "struct timeval *"
          },
          {
            "name": "tzp",
            "type": "struct timezone *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      },
      {
        "prototype": "int settimeofday(const struct timeval *tp, const struct timezone *tzp)",
        "name": "settimeofday",
        "type": "int",
        "args": [
          {
            "name": "tp",
            "type": "const struct timeval *"
          },
          {
            "name": "tzp",
            "type": "const struct timezone *"
          }
        ],
        "includes": [
          "#include <sys/time.h>"
        ]
      }
    ]
  },
  "IOCTL(2)": {
    "functions": [
      {
        "prototype": "int ioctl(int fd, unsigned long request, ...)",
        "name": "ioctl",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "request",
            "type": "unsigned long"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/ioctl.h>"
        ]
      }
    ]
  },
  "ISSETUGID(2)": {
    "functions": [
      {
        "prototype": "int issetugid(void)",
        "name": "issetugid",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "JAIL(2)": {
    "functions": [
      {
        "prototype": "int jail(struct jail *jail)",
        "name": "jail",
        "type": "int",
        "args": [
          {
            "name": "jail",
            "type": "struct jail *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/jail.h>"
        ]
      },
      {
        "prototype": "int jail_attach(int jid)",
        "name": "jail_attach",
        "type": "int",
        "args": [
          {
            "name": "jid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/jail.h>"
        ]
      },
      {
        "prototype": "int jail_remove(int jid)",
        "name": "jail_remove",
        "type": "int",
        "args": [
          {
            "name": "jid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/jail.h>"
        ]
      },
      {
        "prototype": "int jail_get(struct iovec *iov, u_int niov, int flags)",
        "name": "jail_get",
        "type": "int",
        "args": [
          {
            "name": "iov",
            "type": "struct iovec *"
          },
          {
            "name": "niov",
            "type": "u_int"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/jail.h>",
          "#include <sys/uio.h>"
        ]
      },
      {
        "prototype": "int jail_set(struct iovec *iov, u_int niov, int flags)",
        "name": "jail_set",
        "type": "int",
        "args": [
          {
            "name": "iov",
            "type": "struct iovec *"
          },
          {
            "name": "niov",
            "type": "u_int"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/jail.h>",
          "#include <sys/uio.h>"
        ]
      }
    ]
  },
  "KENV(2)": {
    "functions": [
      {
        "prototype": "int kenv(int action, const char *name, char *value, int len)",
        "name": "kenv",
        "type": "int",
        "args": [
          {
            "name": "action",
            "type": "int"
          },
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "value",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "int"
          }
        ],
        "includes": [
          "#include <kenv.h>"
        ]
      }
    ]
  },
  "KILL(2)": {
    "functions": [
      {
        "prototype": "int kill(pid_t pid, int sig)",
        "name": "kill",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <signal.h>"
        ]
      }
    ]
  },
  "KILLPG(2)": {
    "functions": [
      {
        "prototype": "int killpg(pid_t pgrp, int sig)",
        "name": "killpg",
        "type": "int",
        "args": [
          {
            "name": "pgrp",
            "type": "pid_t"
          },
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <signal.h>"
        ]
      }
    ]
  },
  "KLDFIND(2)": {
    "functions": [
      {
        "prototype": "int kldfind(const char *file)",
        "name": "kldfind",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KLDFIRSTMOD(2)": {
    "functions": [
      {
        "prototype": "int kldfirstmod(int fileid)",
        "name": "kldfirstmod",
        "type": "int",
        "args": [
          {
            "name": "fileid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KLDLOAD(2)": {
    "functions": [
      {
        "prototype": "int kldload(const char *file)",
        "name": "kldload",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KLDNEXT(2)": {
    "functions": [
      {
        "prototype": "int kldnext(int fileid)",
        "name": "kldnext",
        "type": "int",
        "args": [
          {
            "name": "fileid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KLDSTAT(2)": {
    "functions": [
      {
        "prototype": "int kldstat(int fileid, struct kld_file_stat *stat)",
        "name": "kldstat",
        "type": "int",
        "args": [
          {
            "name": "fileid",
            "type": "int"
          },
          {
            "name": "stat",
            "type": "struct kld_file_stat *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KLDSYM(2)": {
    "functions": [
      {
        "prototype": "int kldsym(int fileid, int command, void *data)",
        "name": "kldsym",
        "type": "int",
        "args": [
          {
            "name": "fileid",
            "type": "int"
          },
          {
            "name": "command",
            "type": "int"
          },
          {
            "name": "data",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KLDUNLOAD(2)": {
    "functions": [
      {
        "prototype": "int kldunload(int fileid)",
        "name": "kldunload",
        "type": "int",
        "args": [
          {
            "name": "fileid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      },
      {
        "prototype": "int kldunloadf(int fileid, int flags)",
        "name": "kldunloadf",
        "type": "int",
        "args": [
          {
            "name": "fileid",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/linker.h>"
        ]
      }
    ]
  },
  "KTRACE(2)": {
    "functions": [
      {
        "prototype": "int ktrace(const char *tracefile, int ops, int trpoints, int pid)",
        "name": "ktrace",
        "type": "int",
        "args": [
          {
            "name": "tracefile",
            "type": "const char *"
          },
          {
            "name": "ops",
            "type": "int"
          },
          {
            "name": "trpoints",
            "type": "int"
          },
          {
            "name": "pid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/time.h>",
          "#include <sys/uio.h>",
          "#include <sys/ktrace.h>"
        ]
      }
    ]
  },
  "LINK(2)": {
    "functions": [
      {
        "prototype": "int link(const char *name1, const char *name2)",
        "name": "link",
        "type": "int",
        "args": [
          {
            "name": "name1",
            "type": "const char *"
          },
          {
            "name": "name2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int linkat(int fd1, const char *name1, int fd2, const char *name2, int flag)",
        "name": "linkat",
        "type": "int",
        "args": [
          {
            "name": "fd1",
            "type": "int"
          },
          {
            "name": "name1",
            "type": "const char *"
          },
          {
            "name": "fd2",
            "type": "int"
          },
          {
            "name": "name2",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "LIO_LISTIO(2)": {
    "functions": [
      {
        "prototype": "int lio_listio(int mode, struct aiocb * const list[], int nent, struct sigevent *sig)",
        "name": "lio_listio",
        "type": "int",
        "args": [
          {
            "name": "mode",
            "type": "int"
          },
          {
            "name": "list",
            "type": "struct aiocb * const []"
          },
          {
            "name": "nent",
            "type": "int"
          },
          {
            "name": "sig",
            "type": "struct sigevent *"
          }
        ],
        "includes": [
          "#include <aio.h>"
        ]
      }
    ]
  },
  "LISTEN(2)": {
    "functions": [
      {
        "prototype": "int listen(int s, int backlog)",
        "name": "listen",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "backlog",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "LSEEK(2)": {
    "functions": [
      {
        "prototype": "off_t lseek(int fildes, off_t offset, int whence)",
        "name": "lseek",
        "type": "off_t",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          },
          {
            "name": "whence",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "MADVISE(2)": {
    "functions": [
      {
        "prototype": "int madvise(void *addr, size_t len, int behav)",
        "name": "madvise",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "behav",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      },
      {
        "prototype": "int posix_madvise(void *addr, size_t len, int behav)",
        "name": "posix_madvise",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "behav",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MINCORE(2)": {
    "functions": [
      {
        "prototype": "int mincore(const void *addr, size_t len, char *vec)",
        "name": "mincore",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "vec",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MINHERIT(2)": {
    "functions": [
      {
        "prototype": "int minherit(void *addr, size_t len, int inherit)",
        "name": "minherit",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "inherit",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MKDIR(2)": {
    "functions": [
      {
        "prototype": "int mkdir(const char *path, mode_t mode)",
        "name": "mkdir",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int mkdirat(int fd, const char *path, mode_t mode)",
        "name": "mkdirat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "MKFIFO(2)": {
    "functions": [
      {
        "prototype": "int mkfifo(const char *path, mode_t mode)",
        "name": "mkfifo",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int mkfifoat(int fd, const char *path, mode_t mode)",
        "name": "mkfifoat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "MKNOD(2)": {
    "functions": [
      {
        "prototype": "int mknod(const char *path, mode_t mode, dev_t dev)",
        "name": "mknod",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          },
          {
            "name": "dev",
            "type": "dev_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      },
      {
        "prototype": "int mknodat(int fd, const char *path, mode_t mode, dev_t dev)",
        "name": "mknodat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          },
          {
            "name": "dev",
            "type": "dev_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "MLOCK(2)": {
    "functions": [
      {
        "prototype": "int mlock(const void *addr, size_t len)",
        "name": "mlock",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      },
      {
        "prototype": "int munlock(const void *addr, size_t len)",
        "name": "munlock",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MLOCKALL(2)": {
    "functions": [
      {
        "prototype": "int mlockall(int flags)",
        "name": "mlockall",
        "type": "int",
        "args": [
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      },
      {
        "prototype": "int munlockall(void)",
        "name": "munlockall",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MMAP(2)": {
    "functions": [
      {
        "prototype": "void * mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)",
        "name": "mmap",
        "type": "void *",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "prot",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MODFIND(2)": {
    "functions": [
      {
        "prototype": "int modfind(const char *modname)",
        "name": "modfind",
        "type": "int",
        "args": [
          {
            "name": "modname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/module.h>"
        ]
      }
    ]
  },
  "MODNEXT(2)": {
    "functions": [
      {
        "prototype": "int modnext(int modid)",
        "name": "modnext",
        "type": "int",
        "args": [
          {
            "name": "modid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/module.h>"
        ]
      },
      {
        "prototype": "int modfnext(int modid)",
        "name": "modfnext",
        "type": "int",
        "args": [
          {
            "name": "modid",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/module.h>"
        ]
      }
    ]
  },
  "MODSTAT(2)": {
    "functions": [
      {
        "prototype": "int modstat(int modid, struct module_stat *stat)",
        "name": "modstat",
        "type": "int",
        "args": [
          {
            "name": "modid",
            "type": "int"
          },
          {
            "name": "stat",
            "type": "struct module_stat *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/module.h>"
        ]
      }
    ]
  },
  "MOUNT(2)": {
    "functions": [
      {
        "prototype": "int mount(const char *type, const char *dir, int flags, void *data)",
        "name": "mount",
        "type": "int",
        "args": [
          {
            "name": "type",
            "type": "const char *"
          },
          {
            "name": "dir",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "data",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      },
      {
        "prototype": "int unmount(const char *dir, int flags)",
        "name": "unmount",
        "type": "int",
        "args": [
          {
            "name": "dir",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      },
      {
        "prototype": "int nmount(struct iovec *iov, u_int niov, int flags)",
        "name": "nmount",
        "type": "int",
        "args": [
          {
            "name": "iov",
            "type": "struct iovec *"
          },
          {
            "name": "niov",
            "type": "u_int"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>",
          "#include <sys/uio.h>"
        ]
      }
    ]
  },
  "MPROTECT(2)": {
    "functions": [
      {
        "prototype": "int mprotect(const void *addr, size_t len, int prot)",
        "name": "mprotect",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "prot",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MSGCTL(2)": {
    "functions": [
      {
        "prototype": "int msgctl(int msqid, int cmd, struct msqid_ds *buf)",
        "name": "msgctl",
        "type": "int",
        "args": [
          {
            "name": "msqid",
            "type": "int"
          },
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "struct msqid_ds *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/msg.h>"
        ]
      }
    ]
  },
  "MSGGET(2)": {
    "functions": [
      {
        "prototype": "int msgget(key_t key, int msgflg)",
        "name": "msgget",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "key_t"
          },
          {
            "name": "msgflg",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/msg.h>"
        ]
      }
    ]
  },
  "MSGRCV(2)": {
    "functions": [
      {
        "prototype": "int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)",
        "name": "msgrcv",
        "type": "int",
        "args": [
          {
            "name": "msqid",
            "type": "int"
          },
          {
            "name": "msgp",
            "type": "void *"
          },
          {
            "name": "msgsz",
            "type": "size_t"
          },
          {
            "name": "msgtyp",
            "type": "long"
          },
          {
            "name": "msgflg",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/msg.h>"
        ]
      }
    ]
  },
  "MSGSND(2)": {
    "functions": [
      {
        "prototype": "int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg)",
        "name": "msgsnd",
        "type": "int",
        "args": [
          {
            "name": "msqid",
            "type": "int"
          },
          {
            "name": "msgp",
            "type": "const void *"
          },
          {
            "name": "msgsz",
            "type": "size_t"
          },
          {
            "name": "msgflg",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/msg.h>"
        ]
      }
    ]
  },
  "MSYNC(2)": {
    "functions": [
      {
        "prototype": "int msync(void *addr, size_t len, int flags)",
        "name": "msync",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MUNMAP(2)": {
    "functions": [
      {
        "prototype": "int munmap(void *addr, size_t len)",
        "name": "munmap",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "NFSSVC(2)": {
    "functions": [
      {
        "prototype": "int nfssvc(int flags, void *argstructp)",
        "name": "nfssvc",
        "type": "int",
        "args": [
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "argstructp",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>",
          "#include <sys/time.h>",
          "#include <nfs/rpcv2.h>",
          "#include <nfsserver/nfs.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "NUMA_GETAFFINITY(2)": {
    "functions": [
      {
        "prototype": "int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy)",
        "name": "numa_getaffinity",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "cpuwhich_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "policy",
            "type": "struct vm_domain_policy_entry *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/numa.h>"
        ]
      },
      {
        "prototype": "int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy)",
        "name": "numa_setaffinity",
        "type": "int",
        "args": [
          {
            "name": "which",
            "type": "cpuwhich_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "policy",
            "type": "const struct vm_domain_policy_entry *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/numa.h>"
        ]
      }
    ]
  },
  "OPEN(2)": {
    "functions": [
      {
        "prototype": "int open(const char *path, int flags, ...)",
        "name": "open",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      },
      {
        "prototype": "int openat(int fd, const char *path, int flags, ...)",
        "name": "openat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "PDFORK(2)": {
    "functions": [
      {
        "prototype": "pid_t pdfork(int *fdp, int flags)",
        "name": "pdfork",
        "type": "pid_t",
        "args": [
          {
            "name": "fdp",
            "type": "int *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/procdesc.h>"
        ]
      },
      {
        "prototype": "int pdgetpid(int fd, pid_t *pidp)",
        "name": "pdgetpid",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "pidp",
            "type": "pid_t *"
          }
        ],
        "includes": [
          "#include <sys/procdesc.h>"
        ]
      },
      {
        "prototype": "int pdkill(int fd, int signum)",
        "name": "pdkill",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "signum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/procdesc.h>"
        ]
      },
      {
        "prototype": "int pdwait4(int fd, int *status, int options, struct rusage *rusage)",
        "name": "pdwait4",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "status",
            "type": "int *"
          },
          {
            "name": "options",
            "type": "int"
          },
          {
            "name": "rusage",
            "type": "struct rusage *"
          }
        ],
        "includes": [
          "#include <sys/procdesc.h>"
        ]
      }
    ]
  },
  "PIPE(2)": {
    "functions": [
      {
        "prototype": "int pipe(int fildes[2])",
        "name": "pipe",
        "type": "int",
        "args": [
          {
            "name": "fildes",
            "type": "int [2]"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int pipe2(int fildes[2], int flags)",
        "name": "pipe2",
        "type": "int",
        "args": [
          {
            "name": "fildes",
            "type": "int [2]"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "POLL(2)": {
    "functions": [
      {
        "prototype": "int poll(struct pollfd fds[], nfds_t nfds, int timeout)",
        "name": "poll",
        "type": "int",
        "args": [
          {
            "name": "fds",
            "type": "struct pollfd []"
          },
          {
            "name": "nfds",
            "type": "nfds_t"
          },
          {
            "name": "timeout",
            "type": "int"
          }
        ],
        "includes": [
          "#include <poll.h>"
        ]
      },
      {
        "prototype": "int ppoll(struct pollfd fds[], nfds_t nfds, const struct timespec * restrict timeout, const sigset_t * restrict newsigmask)",
        "name": "ppoll",
        "type": "int",
        "args": [
          {
            "name": "fds",
            "type": "struct pollfd []"
          },
          {
            "name": "nfds",
            "type": "nfds_t"
          },
          {
            "name": "timeout",
            "type": "const struct timespec * restrict"
          },
          {
            "name": "newsigmask",
            "type": "const sigset_t * restrict"
          }
        ],
        "includes": [
          "#include <poll.h>"
        ]
      }
    ]
  },
  "POSIX_FADVISE(2)": {
    "functions": [
      {
        "prototype": "int posix_fadvise(int fd, off_t offset, off_t len, int advice)",
        "name": "posix_fadvise",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          },
          {
            "name": "len",
            "type": "off_t"
          },
          {
            "name": "advice",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "POSIX_FALLOCATE(2)": {
    "functions": [
      {
        "prototype": "int posix_fallocate(int fd, off_t offset, off_t len)",
        "name": "posix_fallocate",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          },
          {
            "name": "len",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "POSIX_OPENPT(2)": {
    "functions": [
      {
        "prototype": "int posix_openpt(int oflag)",
        "name": "posix_openpt",
        "type": "int",
        "args": [
          {
            "name": "oflag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "READ(2)": {
    "functions": [
      {
        "prototype": "ssize_t read(int fd, void *buf, size_t nbytes)",
        "name": "read",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t pread(int fd, void *buf, size_t nbytes, off_t offset)",
        "name": "pread",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t readv(int fd, const struct iovec *iov, int iovcnt)",
        "name": "readv",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "iov",
            "type": "const struct iovec *"
          },
          {
            "name": "iovcnt",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/uio.h>"
        ]
      },
      {
        "prototype": "ssize_t preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset)",
        "name": "preadv",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "iov",
            "type": "const struct iovec *"
          },
          {
            "name": "iovcnt",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/uio.h>"
        ]
      }
    ]
  },
  "PROCCTL(2)": {
    "functions": [
      {
        "prototype": "int procctl(idtype_t idtype, id_t id, int cmd, void *arg)",
        "name": "procctl",
        "type": "int",
        "args": [
          {
            "name": "idtype",
            "type": "idtype_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "arg",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/procctl.h>"
        ]
      }
    ]
  },
  "PROFIL(2)": {
    "functions": [
      {
        "prototype": "int profil(char *samples, size_t size, vm_offset_t offset, int scale)",
        "name": "profil",
        "type": "int",
        "args": [
          {
            "name": "samples",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "vm_offset_t"
          },
          {
            "name": "scale",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "PSELECT(2)": {
    "functions": [
      {
        "prototype": "int pselect(int nfds, fd_set * restrict readfds, fd_set * restrict writefds, fd_set * restrict exceptfds, const struct timespec * restrict timeout, const sigset_t * restrict newsigmask)",
        "name": "pselect",
        "type": "int",
        "args": [
          {
            "name": "nfds",
            "type": "int"
          },
          {
            "name": "readfds",
            "type": "fd_set * restrict"
          },
          {
            "name": "writefds",
            "type": "fd_set * restrict"
          },
          {
            "name": "exceptfds",
            "type": "fd_set * restrict"
          },
          {
            "name": "timeout",
            "type": "const struct timespec * restrict"
          },
          {
            "name": "newsigmask",
            "type": "const sigset_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/select.h>"
        ]
      }
    ]
  },
  "PTRACE(2)": {
    "functions": [
      {
        "prototype": "int ptrace(int request, pid_t pid, caddr_t addr, int data)",
        "name": "ptrace",
        "type": "int",
        "args": [
          {
            "name": "request",
            "type": "int"
          },
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "addr",
            "type": "caddr_t"
          },
          {
            "name": "data",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ptrace.h>"
        ]
      }
    ]
  },
  "WRITE(2)": {
    "functions": [
      {
        "prototype": "ssize_t write(int fd, const void *buf, size_t nbytes)",
        "name": "write",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "const void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t pwrite(int fd, const void *buf, size_t nbytes, off_t offset)",
        "name": "pwrite",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "const void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          },
          {
            "name": "offset",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t writev(int fd, const struct iovec *iov, int iovcnt)",
        "name": "writev",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "iov",
            "type": "const struct iovec *"
          },
          {
            "name": "iovcnt",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/uio.h>"
        ]
      },
      {
        "prototype": "ssize_t pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset)",
        "name": "pwritev",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "iov",
            "type": "const struct iovec *"
          },
          {
            "name": "iovcnt",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/uio.h>"
        ]
      }
    ]
  },
  "QUOTACTL(2)": {
    "functions": [
      {
        "prototype": "int quotactl(const char *path, int cmd, int id, void *addr)",
        "name": "quotactl",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "id",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <ufs/ufs/quota.h>"
        ]
      }
    ]
  },
  "RCTL_ADD_RULE(2)": {
    "functions": [
      {
        "prototype": "int rctl_add_rule(const char *inbufp, size_t inbuflen, char *outbufp, size_t outbuflen)",
        "name": "rctl_add_rule",
        "type": "int",
        "args": [
          {
            "name": "inbufp",
            "type": "const char *"
          },
          {
            "name": "inbuflen",
            "type": "size_t"
          },
          {
            "name": "outbufp",
            "type": "char *"
          },
          {
            "name": "outbuflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/rctl.h>"
        ]
      },
      {
        "prototype": "int rctl_get_limits(const char *inbufp, size_t inbuflen, char *outbufp, size_t outbuflen)",
        "name": "rctl_get_limits",
        "type": "int",
        "args": [
          {
            "name": "inbufp",
            "type": "const char *"
          },
          {
            "name": "inbuflen",
            "type": "size_t"
          },
          {
            "name": "outbufp",
            "type": "char *"
          },
          {
            "name": "outbuflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/rctl.h>"
        ]
      },
      {
        "prototype": "int rctl_get_racct(const char *inbufp, size_t inbuflen, char *outbufp, size_t outbuflen)",
        "name": "rctl_get_racct",
        "type": "int",
        "args": [
          {
            "name": "inbufp",
            "type": "const char *"
          },
          {
            "name": "inbuflen",
            "type": "size_t"
          },
          {
            "name": "outbufp",
            "type": "char *"
          },
          {
            "name": "outbuflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/rctl.h>"
        ]
      },
      {
        "prototype": "int rctl_get_rules(const char *inbufp, size_t inbuflen, char *outbufp, size_t outbuflen)",
        "name": "rctl_get_rules",
        "type": "int",
        "args": [
          {
            "name": "inbufp",
            "type": "const char *"
          },
          {
            "name": "inbuflen",
            "type": "size_t"
          },
          {
            "name": "outbufp",
            "type": "char *"
          },
          {
            "name": "outbuflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/rctl.h>"
        ]
      },
      {
        "prototype": "int rctl_remove_rule(const char *inbufp, size_t inbuflen, char *outbufp, size_t outbuflen)",
        "name": "rctl_remove_rule",
        "type": "int",
        "args": [
          {
            "name": "inbufp",
            "type": "const char *"
          },
          {
            "name": "inbuflen",
            "type": "size_t"
          },
          {
            "name": "outbufp",
            "type": "char *"
          },
          {
            "name": "outbuflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/rctl.h>"
        ]
      }
    ]
  },
  "READLINK(2)": {
    "functions": [
      {
        "prototype": "ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsiz)",
        "name": "readlink",
        "type": "ssize_t",
        "args": [
          {
            "name": "path",
            "type": "const char *restrict"
          },
          {
            "name": "buf",
            "type": "char *restrict"
          },
          {
            "name": "bufsiz",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "ssize_t readlinkat(int fd, const char *restrict path, char *restrict buf, size_t bufsize)",
        "name": "readlinkat",
        "type": "ssize_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *restrict"
          },
          {
            "name": "buf",
            "type": "char *restrict"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "REBOOT(2)": {
    "functions": [
      {
        "prototype": "int reboot(int howto)",
        "name": "reboot",
        "type": "int",
        "args": [
          {
            "name": "howto",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>",
          "#include <sys/reboot.h>"
        ]
      }
    ]
  },
  "RECV(2)": {
    "functions": [
      {
        "prototype": "ssize_t recv(int s, void *buf, size_t len, int flags)",
        "name": "recv",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr * restrict from, socklen_t * restrict fromlen)",
        "name": "recvfrom",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "from",
            "type": "struct sockaddr * restrict"
          },
          {
            "name": "fromlen",
            "type": "socklen_t * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t recvmsg(int s, struct msghdr *msg, int flags)",
        "name": "recvmsg",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "struct msghdr *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t recvmmsg(int s, struct mmsghdr * restrict msgvec, size_t vlen, int flags, const struct timespec * restrict timeout)",
        "name": "recvmmsg",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msgvec",
            "type": "struct mmsghdr * restrict"
          },
          {
            "name": "vlen",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "timeout",
            "type": "const struct timespec * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "RENAME(2)": {
    "functions": [
      {
        "prototype": "int rename(const char *from, const char *to)",
        "name": "rename",
        "type": "int",
        "args": [
          {
            "name": "from",
            "type": "const char *"
          },
          {
            "name": "to",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int renameat(int fromfd, const char *from, int tofd, const char *to)",
        "name": "renameat",
        "type": "int",
        "args": [
          {
            "name": "fromfd",
            "type": "int"
          },
          {
            "name": "from",
            "type": "const char *"
          },
          {
            "name": "tofd",
            "type": "int"
          },
          {
            "name": "to",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "REVOKE(2)": {
    "functions": [
      {
        "prototype": "int revoke(const char *path)",
        "name": "revoke",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "RFORK(2)": {
    "functions": [
      {
        "prototype": "pid_t rfork(int flags)",
        "name": "rfork",
        "type": "pid_t",
        "args": [
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "RMDIR(2)": {
    "functions": [
      {
        "prototype": "int rmdir(const char *path)",
        "name": "rmdir",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "RTPRIO(2)": {
    "functions": [
      {
        "prototype": "int rtprio(int function, pid_t pid, struct rtprio *rtp)",
        "name": "rtprio",
        "type": "int",
        "args": [
          {
            "name": "function",
            "type": "int"
          },
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "rtp",
            "type": "struct rtprio *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/rtprio.h>"
        ]
      },
      {
        "prototype": "int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp)",
        "name": "rtprio_thread",
        "type": "int",
        "args": [
          {
            "name": "function",
            "type": "int"
          },
          {
            "name": "lwpid",
            "type": "lwpid_t"
          },
          {
            "name": "rtp",
            "type": "struct rtprio *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/rtprio.h>"
        ]
      }
    ]
  },
  "SCHED_GET_PRIORITY_MAX(2)": {
    "functions": [
      {
        "prototype": "int sched_get_priority_max(int policy)",
        "name": "sched_get_priority_max",
        "type": "int",
        "args": [
          {
            "name": "policy",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int sched_get_priority_min(int policy)",
        "name": "sched_get_priority_min",
        "type": "int",
        "args": [
          {
            "name": "policy",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int sched_rr_get_interval(pid_t pid, struct timespec *interval)",
        "name": "sched_rr_get_interval",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "interval",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      }
    ]
  },
  "SCHED_SETPARAM(2)": {
    "functions": [
      {
        "prototype": "int sched_setparam(pid_t pid, const struct sched_param *param)",
        "name": "sched_setparam",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "param",
            "type": "const struct sched_param *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int sched_getparam(pid_t pid, struct sched_param *param)",
        "name": "sched_getparam",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "param",
            "type": "struct sched_param *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      }
    ]
  },
  "SCHED_SETSCHEDULER(2)": {
    "functions": [
      {
        "prototype": "int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param)",
        "name": "sched_setscheduler",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "policy",
            "type": "int"
          },
          {
            "name": "param",
            "type": "const struct sched_param *"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      },
      {
        "prototype": "int sched_getscheduler(pid_t pid)",
        "name": "sched_getscheduler",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      }
    ]
  },
  "SCHED_YIELD(2)": {
    "functions": [
      {
        "prototype": "int sched_yield(void)",
        "name": "sched_yield",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sched.h>"
        ]
      }
    ]
  },
  "SCTP_GENERIC_RECVMSG(2)": {
    "functions": [
      {
        "prototype": "int sctp_generic_recvmsg(int s, struct iovec *iov, int iovlen, struct sockaddr *from, socklen_t *fromlen, struct sctp_sndrcvinfo *sinfo, int *msgflags)",
        "name": "sctp_generic_recvmsg",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "iov",
            "type": "struct iovec *"
          },
          {
            "name": "iovlen",
            "type": "int"
          },
          {
            "name": "from",
            "type": "struct sockaddr *"
          },
          {
            "name": "fromlen",
            "type": "socklen_t *"
          },
          {
            "name": "sinfo",
            "type": "struct sctp_sndrcvinfo *"
          },
          {
            "name": "msgflags",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_GENERIC_SENDMSG(2)": {
    "functions": [
      {
        "prototype": "int sctp_generic_sendmsg(int s, void *msg, int msglen, struct sockaddr *to, socklen_t len, struct sctp_sndrcvinfo *sinfo, int flags)",
        "name": "sctp_generic_sendmsg",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "void *"
          },
          {
            "name": "msglen",
            "type": "int"
          },
          {
            "name": "to",
            "type": "struct sockaddr *"
          },
          {
            "name": "len",
            "type": "socklen_t"
          },
          {
            "name": "sinfo",
            "type": "struct sctp_sndrcvinfo *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      },
      {
        "prototype": "int sctp_generic_sendmsg_iov(int s, struct iovec *iov, int iovlen, struct sockaddr *to, struct sctp_sndrcvinfo *sinfo, int flags)",
        "name": "sctp_generic_sendmsg_iov",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "iov",
            "type": "struct iovec *"
          },
          {
            "name": "iovlen",
            "type": "int"
          },
          {
            "name": "to",
            "type": "struct sockaddr *"
          },
          {
            "name": "sinfo",
            "type": "struct sctp_sndrcvinfo *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_PEELOFF(2)": {
    "functions": [
      {
        "prototype": "int sctp_peeloff(int s, sctp_assoc_t id)",
        "name": "sctp_peeloff",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "id",
            "type": "sctp_assoc_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SELECT(2)": {
    "functions": [
      {
        "prototype": "int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)",
        "name": "select",
        "type": "int",
        "args": [
          {
            "name": "nfds",
            "type": "int"
          },
          {
            "name": "readfds",
            "type": "fd_set *"
          },
          {
            "name": "writefds",
            "type": "fd_set *"
          },
          {
            "name": "exceptfds",
            "type": "fd_set *"
          },
          {
            "name": "timeout",
            "type": "struct timeval *"
          }
        ],
        "includes": [
          "#include <sys/select.h>"
        ]
      }
    ]
  },
  "SEMCTL(2)": {
    "functions": [
      {
        "prototype": "int semctl(int semid, int semnum, int cmd, ...)",
        "name": "semctl",
        "type": "int",
        "args": [
          {
            "name": "semid",
            "type": "int"
          },
          {
            "name": "semnum",
            "type": "int"
          },
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/sem.h>"
        ]
      }
    ]
  },
  "SEMGET(2)": {
    "functions": [
      {
        "prototype": "int semget(key_t key, int nsems, int flag)",
        "name": "semget",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "key_t"
          },
          {
            "name": "nsems",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/sem.h>"
        ]
      }
    ]
  },
  "SEMOP(2)": {
    "functions": [
      {
        "prototype": "int semop(int semid, struct sembuf *array, size_t nops)",
        "name": "semop",
        "type": "int",
        "args": [
          {
            "name": "semid",
            "type": "int"
          },
          {
            "name": "array",
            "type": "struct sembuf *"
          },
          {
            "name": "nops",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/sem.h>"
        ]
      }
    ]
  },
  "SEND(2)": {
    "functions": [
      {
        "prototype": "ssize_t send(int s, const void *msg, size_t len, int flags)",
        "name": "send",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t sendto(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen_t tolen)",
        "name": "sendto",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "to",
            "type": "const struct sockaddr *"
          },
          {
            "name": "tolen",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t sendmsg(int s, const struct msghdr *msg, int flags)",
        "name": "sendmsg",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const struct msghdr *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      },
      {
        "prototype": "ssize_t sendmmsg(int s, struct mmsghdr * restrict msgvec, size_t vlen, int flags)",
        "name": "sendmmsg",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msgvec",
            "type": "struct mmsghdr * restrict"
          },
          {
            "name": "vlen",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "SENDFILE(2)": {
    "functions": [
      {
        "prototype": "int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags)",
        "name": "sendfile",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          },
          {
            "name": "hdtr",
            "type": "struct sf_hdtr *"
          },
          {
            "name": "sbytes",
            "type": "off_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <sys/uio.h>"
        ]
      }
    ]
  },
  "SETUID(2)": {
    "functions": [
      {
        "prototype": "int setuid(uid_t uid)",
        "name": "setuid",
        "type": "int",
        "args": [
          {
            "name": "uid",
            "type": "uid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int seteuid(uid_t euid)",
        "name": "seteuid",
        "type": "int",
        "args": [
          {
            "name": "euid",
            "type": "uid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setgid(gid_t gid)",
        "name": "setgid",
        "type": "int",
        "args": [
          {
            "name": "gid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setegid(gid_t egid)",
        "name": "setegid",
        "type": "int",
        "args": [
          {
            "name": "egid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SETFIB(2)": {
    "functions": [
      {
        "prototype": "int setfib(int fib)",
        "name": "setfib",
        "type": "int",
        "args": [
          {
            "name": "fib",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "SETGROUPS(2)": {
    "functions": [
      {
        "prototype": "int setgroups(int ngroups, const gid_t *gidset)",
        "name": "setgroups",
        "type": "int",
        "args": [
          {
            "name": "ngroups",
            "type": "int"
          },
          {
            "name": "gidset",
            "type": "const gid_t *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SETPGID(2)": {
    "functions": [
      {
        "prototype": "int setpgid(pid_t pid, pid_t pgrp)",
        "name": "setpgid",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "pgrp",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setpgrp(pid_t pid, pid_t pgrp)",
        "name": "setpgrp",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "pgrp",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SETREGID(2)": {
    "functions": [
      {
        "prototype": "int setregid(gid_t rgid, gid_t egid)",
        "name": "setregid",
        "type": "int",
        "args": [
          {
            "name": "rgid",
            "type": "gid_t"
          },
          {
            "name": "egid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SETREUID(2)": {
    "functions": [
      {
        "prototype": "int setreuid(uid_t ruid, uid_t euid)",
        "name": "setreuid",
        "type": "int",
        "args": [
          {
            "name": "ruid",
            "type": "uid_t"
          },
          {
            "name": "euid",
            "type": "uid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SETSID(2)": {
    "functions": [
      {
        "prototype": "pid_t setsid(void)",
        "name": "setsid",
        "type": "pid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SHM_OPEN(2)": {
    "functions": [
      {
        "prototype": "int shm_open(const char *path, int flags, mode_t mode)",
        "name": "shm_open",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/mman.h>",
          "#include <fcntl.h>"
        ]
      },
      {
        "prototype": "int shm_unlink(const char *path)",
        "name": "shm_unlink",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/mman.h>",
          "#include <fcntl.h>"
        ]
      }
    ]
  },
  "SHMAT(2)": {
    "functions": [
      {
        "prototype": "void * shmat(int shmid, const void *addr, int flag)",
        "name": "shmat",
        "type": "void *",
        "args": [
          {
            "name": "shmid",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/shm.h>"
        ]
      },
      {
        "prototype": "int shmdt(const void *addr)",
        "name": "shmdt",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/shm.h>"
        ]
      }
    ]
  },
  "SHMCTL(2)": {
    "functions": [
      {
        "prototype": "int shmctl(int shmid, int cmd, struct shmid_ds *buf)",
        "name": "shmctl",
        "type": "int",
        "args": [
          {
            "name": "shmid",
            "type": "int"
          },
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "struct shmid_ds *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>",
          "#include <sys/shm.h>"
        ]
      }
    ]
  },
  "SHMGET(2)": {
    "functions": [
      {
        "prototype": "int shmget(key_t key, size_t size, int flag)",
        "name": "shmget",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "key_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/shm.h>"
        ]
      }
    ]
  },
  "SHUTDOWN(2)": {
    "functions": [
      {
        "prototype": "int shutdown(int s, int how)",
        "name": "shutdown",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "how",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "SIGALTSTACK(2)": {
    "functions": [
      {
        "prototype": "int sigaltstack(const stack_t * restrict ss, stack_t * restrict oss)",
        "name": "sigaltstack",
        "type": "int",
        "args": [
          {
            "name": "ss",
            "type": "const stack_t * restrict"
          },
          {
            "name": "oss",
            "type": "stack_t * restrict"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGSETMASK(2)": {
    "functions": [
      {
        "prototype": "int sigsetmask(int mask)",
        "name": "sigsetmask",
        "type": "int",
        "args": [
          {
            "name": "mask",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigblock(int mask)",
        "name": "sigblock",
        "type": "int",
        "args": [
          {
            "name": "mask",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigmask(int signum)",
        "name": "sigmask",
        "type": "int",
        "args": [
          {
            "name": "signum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGPENDING(2)": {
    "functions": [
      {
        "prototype": "int sigpending(sigset_t *set)",
        "name": "sigpending",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGPROCMASK(2)": {
    "functions": [
      {
        "prototype": "int sigprocmask(int how, const sigset_t * restrict set, sigset_t * restrict oset)",
        "name": "sigprocmask",
        "type": "int",
        "args": [
          {
            "name": "how",
            "type": "int"
          },
          {
            "name": "set",
            "type": "const sigset_t * restrict"
          },
          {
            "name": "oset",
            "type": "sigset_t * restrict"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGQUEUE(2)": {
    "functions": [
      {
        "prototype": "int sigqueue(pid_t pid, int signo, const union sigval value)",
        "name": "sigqueue",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "signo",
            "type": "int"
          },
          {
            "name": "value",
            "type": "const union sigval"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGRETURN(2)": {
    "functions": [
      {
        "prototype": "int sigreturn(const ucontext_t *scp)",
        "name": "sigreturn",
        "type": "int",
        "args": [
          {
            "name": "scp",
            "type": "const ucontext_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGSTACK(2)": {
    "functions": [

    ]
  },
  "SIGSUSPEND(2)": {
    "functions": [
      {
        "prototype": "int sigsuspend(const sigset_t *sigmask)",
        "name": "sigsuspend",
        "type": "int",
        "args": [
          {
            "name": "sigmask",
            "type": "const sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGTIMEDWAIT(2)": {
    "functions": [
      {
        "prototype": "int sigtimedwait(const sigset_t *restrict set, siginfo_t *restrict info, const struct timespec *restrict timeout)",
        "name": "sigtimedwait",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "const sigset_t *restrict"
          },
          {
            "name": "info",
            "type": "siginfo_t *restrict"
          },
          {
            "name": "timeout",
            "type": "const struct timespec *restrict"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigwaitinfo(const sigset_t * restrict set, siginfo_t * restrict info)",
        "name": "sigwaitinfo",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "const sigset_t * restrict"
          },
          {
            "name": "info",
            "type": "siginfo_t * restrict"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGWAIT(2)": {
    "functions": [
      {
        "prototype": "int sigwait(const sigset_t * restrict set, int * restrict sig)",
        "name": "sigwait",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "const sigset_t * restrict"
          },
          {
            "name": "sig",
            "type": "int * restrict"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SOCKET(2)": {
    "functions": [
      {
        "prototype": "int socket(int domain, int type, int protocol)",
        "name": "socket",
        "type": "int",
        "args": [
          {
            "name": "domain",
            "type": "int"
          },
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "protocol",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "SOCKETPAIR(2)": {
    "functions": [
      {
        "prototype": "int socketpair(int domain, int type, int protocol, int *sv)",
        "name": "socketpair",
        "type": "int",
        "args": [
          {
            "name": "domain",
            "type": "int"
          },
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "protocol",
            "type": "int"
          },
          {
            "name": "sv",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "SWAPON(2)": {
    "functions": [
      {
        "prototype": "int swapon(const char *special)",
        "name": "swapon",
        "type": "int",
        "args": [
          {
            "name": "special",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int swapoff(const char *special)",
        "name": "swapoff",
        "type": "int",
        "args": [
          {
            "name": "special",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SYMLINK(2)": {
    "functions": [
      {
        "prototype": "int symlink(const char *name1, const char *name2)",
        "name": "symlink",
        "type": "int",
        "args": [
          {
            "name": "name1",
            "type": "const char *"
          },
          {
            "name": "name2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int symlinkat(const char *name1, int fd, const char *name2)",
        "name": "symlinkat",
        "type": "int",
        "args": [
          {
            "name": "name1",
            "type": "const char *"
          },
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "name2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SYNC(2)": {
    "functions": [
      {
        "prototype": "void sync(void)",
        "name": "sync",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SYSARCH(2)": {
    "functions": [
      {
        "prototype": "int sysarch(int number, void *args)",
        "name": "sysarch",
        "type": "int",
        "args": [
          {
            "name": "number",
            "type": "int"
          },
          {
            "name": "args",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <machine/sysarch.h>"
        ]
      }
    ]
  },
  "THR_EXIT(2)": {
    "functions": [
      {
        "prototype": "void thr_exit(long *state)",
        "name": "thr_exit",
        "type": "void",
        "args": [
          {
            "name": "state",
            "type": "long *"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "THR_kill(2)": {
    "functions": [
      {
        "prototype": "int thr_kill(long id, int sig)",
        "name": "thr_kill",
        "type": "int",
        "args": [
          {
            "name": "id",
            "type": "long"
          },
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      },
      {
        "prototype": "int thr_kill2(pid_t pid, long id, int sig)",
        "name": "thr_kill2",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "id",
            "type": "long"
          },
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "THR_NEW(2)": {
    "functions": [
      {
        "prototype": "int thr_new(struct thr_param *param, int param_size)",
        "name": "thr_new",
        "type": "int",
        "args": [
          {
            "name": "param",
            "type": "struct thr_param *"
          },
          {
            "name": "param_size",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "THR_SELF(2)": {
    "functions": [
      {
        "prototype": "int thr_self(long *id)",
        "name": "thr_self",
        "type": "int",
        "args": [
          {
            "name": "id",
            "type": "long *"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "THR_SET_NAME(2)": {
    "functions": [
      {
        "prototype": "int thr_set_name(long id, const char *name)",
        "name": "thr_set_name",
        "type": "int",
        "args": [
          {
            "name": "id",
            "type": "long"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "THR_SUSPEND(2)": {
    "functions": [
      {
        "prototype": "int thr_suspend(struct timespec *timeout)",
        "name": "thr_suspend",
        "type": "int",
        "args": [
          {
            "name": "timeout",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "THR_WAKE(2)": {
    "functions": [
      {
        "prototype": "int thr_wake(long id)",
        "name": "thr_wake",
        "type": "int",
        "args": [
          {
            "name": "id",
            "type": "long"
          }
        ],
        "includes": [
          "#include <sys/thr.h>"
        ]
      }
    ]
  },
  "UMASK(2)": {
    "functions": [
      {
        "prototype": "mode_t umask(mode_t numask)",
        "name": "umask",
        "type": "mode_t",
        "args": [
          {
            "name": "numask",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>"
        ]
      }
    ]
  },
  "UNDELETE(2)": {
    "functions": [
      {
        "prototype": "int undelete(const char *path)",
        "name": "undelete",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "UNLINK(2)": {
    "functions": [
      {
        "prototype": "int unlink(const char *path)",
        "name": "unlink",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int unlinkat(int fd, const char *path, int flag)",
        "name": "unlinkat",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "UTRACE(2)": {
    "functions": [
      {
        "prototype": "int utrace(const void *addr, size_t len)",
        "name": "utrace",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/time.h>",
          "#include <sys/uio.h>",
          "#include <sys/ktrace.h>"
        ]
      }
    ]
  },
  "UUIDGEN(2)": {
    "functions": [
      {
        "prototype": "int uuidgen(struct uuid *store, int count)",
        "name": "uuidgen",
        "type": "int",
        "args": [
          {
            "name": "store",
            "type": "struct uuid *"
          },
          {
            "name": "count",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/uuid.h>"
        ]
      }
    ]
  },
  "VFORK(2)": {
    "functions": [
      {
        "prototype": "pid_t vfork(void)",
        "name": "vfork",
        "type": "pid_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "WAIT(2)": {
    "functions": [
      {
        "prototype": "pid_t wait(int *status)",
        "name": "wait",
        "type": "pid_t",
        "args": [
          {
            "name": "status",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/wait.h>"
        ]
      },
      {
        "prototype": "pid_t waitpid(pid_t wpid, int *status, int options)",
        "name": "waitpid",
        "type": "pid_t",
        "args": [
          {
            "name": "wpid",
            "type": "pid_t"
          },
          {
            "name": "status",
            "type": "int *"
          },
          {
            "name": "options",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/wait.h>"
        ]
      },
      {
        "prototype": "int waitid(idtype_t idtype, id_t id, siginfo_t *info, int options)",
        "name": "waitid",
        "type": "int",
        "args": [
          {
            "name": "idtype",
            "type": "idtype_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "info",
            "type": "siginfo_t *"
          },
          {
            "name": "options",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/wait.h>",
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "pid_t wait3(int *status, int options, struct rusage *rusage)",
        "name": "wait3",
        "type": "pid_t",
        "args": [
          {
            "name": "status",
            "type": "int *"
          },
          {
            "name": "options",
            "type": "int"
          },
          {
            "name": "rusage",
            "type": "struct rusage *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/wait.h>",
          "#include <signal.h>",
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      },
      {
        "prototype": "pid_t wait4(pid_t wpid, int *status, int options, struct rusage *rusage)",
        "name": "wait4",
        "type": "pid_t",
        "args": [
          {
            "name": "wpid",
            "type": "pid_t"
          },
          {
            "name": "status",
            "type": "int *"
          },
          {
            "name": "options",
            "type": "int"
          },
          {
            "name": "rusage",
            "type": "struct rusage *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/wait.h>",
          "#include <signal.h>",
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      },
      {
        "prototype": "pid_t wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *infop)",
        "name": "wait6",
        "type": "pid_t",
        "args": [
          {
            "name": "idtype",
            "type": "idtype_t"
          },
          {
            "name": "id",
            "type": "id_t"
          },
          {
            "name": "status",
            "type": "int *"
          },
          {
            "name": "options",
            "type": "int"
          },
          {
            "name": "wrusage",
            "type": "struct __wrusage *"
          },
          {
            "name": "infop",
            "type": "siginfo_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/wait.h>",
          "#include <signal.h>",
          "#include <sys/time.h>",
          "#include <sys/resource.h>"
        ]
      }
    ]
  },
  "EXIT(3)": {
    "functions": [
      {
        "prototype": "void exit(int status)",
        "name": "exit",
        "type": "void",
        "args": [
          {
            "name": "status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void _Exit(int status)",
        "name": "_Exit",
        "type": "void",
        "args": [
          {
            "name": "status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ICONV(3)": {
    "functions": [
      {
        "prototype": "iconv_t iconv_open(const char *dstname, const char *srcname)",
        "name": "iconv_open",
        "type": "iconv_t",
        "args": [
          {
            "name": "dstname",
            "type": "const char *"
          },
          {
            "name": "srcname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      },
      {
        "prototype": "int iconv_open_into(const char *dstname, const char *srcname, iconv_allocation_t *ptr)",
        "name": "iconv_open_into",
        "type": "int",
        "args": [
          {
            "name": "dstname",
            "type": "const char *"
          },
          {
            "name": "srcname",
            "type": "const char *"
          },
          {
            "name": "ptr",
            "type": "iconv_allocation_t *"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      },
      {
        "prototype": "int iconv_close(iconv_t cd)",
        "name": "iconv_close",
        "type": "int",
        "args": [
          {
            "name": "cd",
            "type": "iconv_t"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      },
      {
        "prototype": "size_t iconv(iconv_t cd, char ** restrict src, size_t * restrict srcleft, char ** restrict dst, size_t * restrict dstleft)",
        "name": "iconv",
        "type": "size_t",
        "args": [
          {
            "name": "cd",
            "type": "iconv_t"
          },
          {
            "name": "src",
            "type": "char ** restrict"
          },
          {
            "name": "srcleft",
            "type": "size_t * restrict"
          },
          {
            "name": "dst",
            "type": "char ** restrict"
          },
          {
            "name": "dstleft",
            "type": "size_t * restrict"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      },
      {
        "prototype": "size_t __iconv(iconv_t cd, char ** restrict src, size_t * restrict srcleft, char ** restrict dst, size_t * restrict dstleft, uint32_t flags, size_t * invalids)",
        "name": "__iconv",
        "type": "size_t",
        "args": [
          {
            "name": "cd",
            "type": "iconv_t"
          },
          {
            "name": "src",
            "type": "char ** restrict"
          },
          {
            "name": "srcleft",
            "type": "size_t * restrict"
          },
          {
            "name": "dst",
            "type": "char ** restrict"
          },
          {
            "name": "dstleft",
            "type": "size_t * restrict"
          },
          {
            "name": "flags",
            "type": "uint32_t"
          },
          {
            "name": "invalids",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      }
    ]
  },
  "__ICONV_GET_LIST(3)": {
    "functions": [
      {
        "prototype": "int __iconv_get_list(char ***names, size_t count, bool paired)",
        "name": "__iconv_get_list",
        "type": "int",
        "args": [
          {
            "name": "names",
            "type": "char ***"
          },
          {
            "name": "count",
            "type": "size_t"
          },
          {
            "name": "paired",
            "type": "bool"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      },
      {
        "prototype": "void __iconv_free_list(char **names, size_t count)",
        "name": "__iconv_free_list",
        "type": "void",
        "args": [
          {
            "name": "names",
            "type": "char **"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      }
    ]
  },
  "RPC_SVC_CALLS(3)": {
    "functions": [
      {
        "prototype": "int svc_dg_enablecache(SVCXPRT *xprt, const unsigned cache_size)",
        "name": "svc_dg_enablecache",
        "type": "int",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          },
          {
            "name": "cache_size",
            "type": "const unsigned"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_exit(void)",
        "name": "svc_exit",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t svc_freeargs(const SVCXPRT *xprt, const xdrproc_t inproc, caddr_t in)",
        "name": "svc_freeargs",
        "type": "bool_t",
        "args": [
          {
            "name": "xprt",
            "type": "const SVCXPRT *"
          },
          {
            "name": "inproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "in",
            "type": "caddr_t"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t svc_getargs(const SVCXPRT *xprt, const xdrproc_t inproc, caddr_t in)",
        "name": "svc_getargs",
        "type": "bool_t",
        "args": [
          {
            "name": "xprt",
            "type": "const SVCXPRT *"
          },
          {
            "name": "inproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "in",
            "type": "caddr_t"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_getreq_common(const int fd)",
        "name": "svc_getreq_common",
        "type": "void",
        "args": [
          {
            "name": "fd",
            "type": "const int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_getreq_poll(struct pollfd *pfdp, const int pollretval)",
        "name": "svc_getreq_poll",
        "type": "void",
        "args": [
          {
            "name": "pfdp",
            "type": "struct pollfd *"
          },
          {
            "name": "pollretval",
            "type": "const int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_getreqset(fd_set * rdfds)",
        "name": "svc_getreqset",
        "type": "void",
        "args": [
          {
            "name": "rdfds",
            "type": "fd_set *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "struct netbuf * svc_getrpccaller(const SVCXPRT *xprt)",
        "name": "svc_getrpccaller",
        "type": "struct netbuf *",
        "args": [
          {
            "name": "xprt",
            "type": "const SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "struct cmsgcred * __svc_getcallercreds(const SVCXPRT *xprt)",
        "name": "__svc_getcallercreds",
        "type": "struct cmsgcred *",
        "args": [
          {
            "name": "xprt",
            "type": "const SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_run(void)",
        "name": "svc_run",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t svc_sendreply(SVCXPRT *xprt, xdrproc_t outproc, void *out)",
        "name": "svc_sendreply",
        "type": "bool_t",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          },
          {
            "name": "outproc",
            "type": "xdrproc_t"
          },
          {
            "name": "out",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "SETJMP(3)": {
    "functions": [
      {
        "prototype": "int sigsetjmp(sigjmp_buf env, int savemask)",
        "name": "sigsetjmp",
        "type": "int",
        "args": [
          {
            "name": "env",
            "type": "sigjmp_buf"
          },
          {
            "name": "savemask",
            "type": "int"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      },
      {
        "prototype": "void siglongjmp(sigjmp_buf env, int val)",
        "name": "siglongjmp",
        "type": "void",
        "args": [
          {
            "name": "env",
            "type": "sigjmp_buf"
          },
          {
            "name": "val",
            "type": "int"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      },
      {
        "prototype": "int setjmp(jmp_buf env)",
        "name": "setjmp",
        "type": "int",
        "args": [
          {
            "name": "env",
            "type": "jmp_buf"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      },
      {
        "prototype": "void longjmp(jmp_buf env, int val)",
        "name": "longjmp",
        "type": "void",
        "args": [
          {
            "name": "env",
            "type": "jmp_buf"
          },
          {
            "name": "val",
            "type": "int"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      },
      {
        "prototype": "int _setjmp(jmp_buf env)",
        "name": "_setjmp",
        "type": "int",
        "args": [
          {
            "name": "env",
            "type": "jmp_buf"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      },
      {
        "prototype": "void _longjmp(jmp_buf env, int val)",
        "name": "_longjmp",
        "type": "void",
        "args": [
          {
            "name": "env",
            "type": "jmp_buf"
          },
          {
            "name": "val",
            "type": "int"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      },
      {
        "prototype": "void longjmperror(void)",
        "name": "longjmperror",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <setjmp.h>"
        ]
      }
    ]
  },
  "RAND48(3)": {
    "functions": [
      {
        "prototype": "double drand48(void)",
        "name": "drand48",
        "type": "double",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "double erand48(unsigned short xseed[3])",
        "name": "erand48",
        "type": "double",
        "args": [
          {
            "name": "xseed",
            "type": "unsigned short [3]"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "long lrand48(void)",
        "name": "lrand48",
        "type": "long",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "long nrand48(unsigned short xseed[3])",
        "name": "nrand48",
        "type": "long",
        "args": [
          {
            "name": "xseed",
            "type": "unsigned short [3]"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "long mrand48(void)",
        "name": "mrand48",
        "type": "long",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "long jrand48(unsigned short xseed[3])",
        "name": "jrand48",
        "type": "long",
        "args": [
          {
            "name": "xseed",
            "type": "unsigned short [3]"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void srand48(long seed)",
        "name": "srand48",
        "type": "void",
        "args": [
          {
            "name": "seed",
            "type": "long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "unsigned short * seed48(unsigned short xseed[3])",
        "name": "seed48",
        "type": "unsigned short *",
        "args": [
          {
            "name": "xseed",
            "type": "unsigned short [3]"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void lcong48(unsigned short p[7])",
        "name": "lcong48",
        "type": "void",
        "args": [
          {
            "name": "p",
            "type": "unsigned short [7]"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "A64L(3)": {
    "functions": [
      {
        "prototype": "long a64l(const char *s)",
        "name": "a64l",
        "type": "long",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * l64a(long int l)",
        "name": "l64a",
        "type": "char *",
        "args": [
          {
            "name": "l",
            "type": "long int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int l64a_r(long int l, char *buffer, int buflen)",
        "name": "l64a_r",
        "type": "int",
        "args": [
          {
            "name": "l",
            "type": "long int"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ABORT(3)": {
    "functions": [
      {
        "prototype": "void abort(void)",
        "name": "abort",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ABS(3)": {
    "functions": [
      {
        "prototype": "int abs(int j)",
        "name": "abs",
        "type": "int",
        "args": [
          {
            "name": "j",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ACL(3)": {
    "functions": [

    ]
  },
  "ACL_ADD_FLAG_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_add_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)",
        "name": "acl_add_flag_np",
        "type": "int",
        "args": [
          {
            "name": "flagset_d",
            "type": "acl_flagset_t"
          },
          {
            "name": "flag",
            "type": "acl_flag_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_ADD_PERM(3)": {
    "functions": [
      {
        "prototype": "int acl_add_perm(acl_permset_t permset_d, acl_perm_t perm)",
        "name": "acl_add_perm",
        "type": "int",
        "args": [
          {
            "name": "permset_d",
            "type": "acl_permset_t"
          },
          {
            "name": "perm",
            "type": "acl_perm_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_CALC_MASK(3)": {
    "functions": [
      {
        "prototype": "int acl_calc_mask(acl_t *acl_p)",
        "name": "acl_calc_mask",
        "type": "int",
        "args": [
          {
            "name": "acl_p",
            "type": "acl_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_CLEAR_FLAGS_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_clear_flags_np(acl_flagset_t flagset_d)",
        "name": "acl_clear_flags_np",
        "type": "int",
        "args": [
          {
            "name": "flagset_d",
            "type": "acl_flagset_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_CLEAR_PERMS(3)": {
    "functions": [
      {
        "prototype": "int acl_clear_perms(acl_permset_t permset_d)",
        "name": "acl_clear_perms",
        "type": "int",
        "args": [
          {
            "name": "permset_d",
            "type": "acl_permset_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_COPY_ENTRY(3)": {
    "functions": [
      {
        "prototype": "int acl_copy_entry(acl_entry_t dest_d, acl_entry_t src_d)",
        "name": "acl_copy_entry",
        "type": "int",
        "args": [
          {
            "name": "dest_d",
            "type": "acl_entry_t"
          },
          {
            "name": "src_d",
            "type": "acl_entry_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_CREATE_ENTRY(3)": {
    "functions": [
      {
        "prototype": "int acl_create_entry(acl_t *acl_p, acl_entry_t *entry_p)",
        "name": "acl_create_entry",
        "type": "int",
        "args": [
          {
            "name": "acl_p",
            "type": "acl_t *"
          },
          {
            "name": "entry_p",
            "type": "acl_entry_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_create_entry_np(acl_t *acl_p, acl_entry_t *entry_p, int index)",
        "name": "acl_create_entry_np",
        "type": "int",
        "args": [
          {
            "name": "acl_p",
            "type": "acl_t *"
          },
          {
            "name": "entry_p",
            "type": "acl_entry_t *"
          },
          {
            "name": "index",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_DELETE(3)": {
    "functions": [
      {
        "prototype": "int acl_delete_def_file(const char *path_p)",
        "name": "acl_delete_def_file",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_delete_def_link_np(const char *path_p)",
        "name": "acl_delete_def_link_np",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_delete_fd_np(int filedes, acl_type_t type)",
        "name": "acl_delete_fd_np",
        "type": "int",
        "args": [
          {
            "name": "filedes",
            "type": "int"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_delete_file_np(const char *path_p, acl_type_t type)",
        "name": "acl_delete_file_np",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_delete_link_np(const char *path_p, acl_type_t type)",
        "name": "acl_delete_link_np",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_DELETE_ENTRY(3)": {
    "functions": [
      {
        "prototype": "int acl_delete_entry(acl_t acl, acl_entry_t entry_d)",
        "name": "acl_delete_entry",
        "type": "int",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_delete_entry_np(acl_t acl, int index)",
        "name": "acl_delete_entry_np",
        "type": "int",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "index",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_DELETE_FLAG_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_delete_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)",
        "name": "acl_delete_flag_np",
        "type": "int",
        "args": [
          {
            "name": "flagset_d",
            "type": "acl_flagset_t"
          },
          {
            "name": "flag",
            "type": "acl_flag_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_DELETE_PERM(3)": {
    "functions": [
      {
        "prototype": "int acl_delete_perm(acl_permset_t permset_d, acl_perm_t perm)",
        "name": "acl_delete_perm",
        "type": "int",
        "args": [
          {
            "name": "permset_d",
            "type": "acl_permset_t"
          },
          {
            "name": "perm",
            "type": "acl_perm_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_DUP(3)": {
    "functions": [
      {
        "prototype": "acl_t acl_dup(acl_t acl)",
        "name": "acl_dup",
        "type": "acl_t",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_FREE(3)": {
    "functions": [
      {
        "prototype": "int acl_free(void *obj_p)",
        "name": "acl_free",
        "type": "int",
        "args": [
          {
            "name": "obj_p",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_FROM_TEXT(3)": {
    "functions": [
      {
        "prototype": "acl_t acl_from_text(const char *buf_p)",
        "name": "acl_from_text",
        "type": "acl_t",
        "args": [
          {
            "name": "buf_p",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET(3)": {
    "functions": [
      {
        "prototype": "acl_t acl_get_fd(int fd)",
        "name": "acl_get_fd",
        "type": "acl_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "acl_t acl_get_fd_np(int fd, acl_type_t type)",
        "name": "acl_get_fd_np",
        "type": "acl_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "acl_t acl_get_file(const char *path_p, acl_type_t type)",
        "name": "acl_get_file",
        "type": "acl_t",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "acl_t acl_get_link_np(const char *path_p, acl_type_t type)",
        "name": "acl_get_link_np",
        "type": "acl_t",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_BRAND_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_get_brand_np(acl_t acl, int *brand_p)",
        "name": "acl_get_brand_np",
        "type": "int",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "brand_p",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_ENTRY(3)": {
    "functions": [
      {
        "prototype": "int acl_get_entry(acl_t acl, int entry_id, acl_entry_t *entry_p)",
        "name": "acl_get_entry",
        "type": "int",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "entry_id",
            "type": "int"
          },
          {
            "name": "entry_p",
            "type": "acl_entry_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_ENTRY_TYPE_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_get_entry_type_np(acl_entry_t entry_d, acl_entry_type_t *entry_type_p)",
        "name": "acl_get_entry_type_np",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "entry_type_p",
            "type": "acl_entry_type_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_FLAG_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_get_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)",
        "name": "acl_get_flag_np",
        "type": "int",
        "args": [
          {
            "name": "flagset_d",
            "type": "acl_flagset_t"
          },
          {
            "name": "flag",
            "type": "acl_flag_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_FLAGSET_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_get_flagset_np(acl_entry_t entry_d, acl_flagset_t *flagset_p)",
        "name": "acl_get_flagset_np",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "flagset_p",
            "type": "acl_flagset_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_PERM_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_get_perm_np(acl_permset_t permset_d, acl_perm_t perm)",
        "name": "acl_get_perm_np",
        "type": "int",
        "args": [
          {
            "name": "permset_d",
            "type": "acl_permset_t"
          },
          {
            "name": "perm",
            "type": "acl_perm_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_PERMSET(3)": {
    "functions": [
      {
        "prototype": "int acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p)",
        "name": "acl_get_permset",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "permset_p",
            "type": "acl_permset_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_QUALIFIER(3)": {
    "functions": [
      {
        "prototype": "void * acl_get_qualifier(acl_entry_t entry_d)",
        "name": "acl_get_qualifier",
        "type": "void *",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_GET_TAG_TYPE(3)": {
    "functions": [
      {
        "prototype": "int acl_get_tag_type(acl_entry_t entry_d, acl_tag_t *tag_type_p)",
        "name": "acl_get_tag_type",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "tag_type_p",
            "type": "acl_tag_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_INIT(3)": {
    "functions": [
      {
        "prototype": "acl_t acl_init(int count)",
        "name": "acl_init",
        "type": "acl_t",
        "args": [
          {
            "name": "count",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_STRIP_NP(3)": {
    "functions": [
      {
        "prototype": "acl_t acl_strip_np(const acl_t acl, int recalculate_mask)",
        "name": "acl_strip_np",
        "type": "acl_t",
        "args": [
          {
            "name": "acl",
            "type": "const acl_t"
          },
          {
            "name": "recalculate_mask",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_SET(3)": {
    "functions": [
      {
        "prototype": "int acl_set_fd(int fd, acl_t acl)",
        "name": "acl_set_fd",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_set_fd_np(int fd, acl_t acl, acl_type_t type)",
        "name": "acl_set_fd_np",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_set_file(const char *path_p, acl_type_t type, acl_t acl)",
        "name": "acl_set_file",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          },
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_set_link_np(const char *path_p, acl_type_t type, acl_t acl)",
        "name": "acl_set_link_np",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          },
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_SET_ENTRY_TYPE_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_set_entry_type_np(acl_entry_t entry_d, acl_entry_type_t entry_type)",
        "name": "acl_set_entry_type_np",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "entry_type",
            "type": "acl_entry_type_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_SET_FLAGSET_NP(3)": {
    "functions": [
      {
        "prototype": "int acl_set_flagset_np(acl_entry_t entry_d, acl_flagset_t flagset_d)",
        "name": "acl_set_flagset_np",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "flagset_d",
            "type": "acl_flagset_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_SET_PERMSET(3)": {
    "functions": [
      {
        "prototype": "int acl_set_permset(acl_entry_t entry_d, acl_permset_t permset_d)",
        "name": "acl_set_permset",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "permset_d",
            "type": "acl_permset_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_SET_QUALIFIER(3)": {
    "functions": [
      {
        "prototype": "int acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p)",
        "name": "acl_set_qualifier",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "tag_qualifier_p",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_SET_TAG_TYPE(3)": {
    "functions": [
      {
        "prototype": "int acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type)",
        "name": "acl_set_tag_type",
        "type": "int",
        "args": [
          {
            "name": "entry_d",
            "type": "acl_entry_t"
          },
          {
            "name": "tag_type",
            "type": "acl_tag_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_TO_TEXT(3)": {
    "functions": [
      {
        "prototype": "char * acl_to_text(acl_t acl, ssize_t *len_p)",
        "name": "acl_to_text",
        "type": "char *",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "len_p",
            "type": "ssize_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "char * acl_to_text_np(acl_t acl, ssize_t *len_p, int flags)",
        "name": "acl_to_text_np",
        "type": "char *",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          },
          {
            "name": "len_p",
            "type": "ssize_t *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACL_VALID(3)": {
    "functions": [
      {
        "prototype": "int acl_valid(acl_t acl)",
        "name": "acl_valid",
        "type": "int",
        "args": [
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_valid_fd_np(int fd, acl_type_t type, acl_t acl)",
        "name": "acl_valid_fd_np",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          },
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_valid_file_np(const char *path_p, acl_type_t type, acl_t acl)",
        "name": "acl_valid_file_np",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          },
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      },
      {
        "prototype": "int acl_valid_link_np(const char *path_p, acl_type_t type, acl_t acl)",
        "name": "acl_valid_link_np",
        "type": "int",
        "args": [
          {
            "name": "path_p",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "acl_type_t"
          },
          {
            "name": "acl",
            "type": "acl_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/acl.h>"
        ]
      }
    ]
  },
  "ACOS(3)": {
    "functions": [
      {
        "prototype": "double acos(double x)",
        "name": "acos",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float acosf(float x)",
        "name": "acosf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double acosl(long double x)",
        "name": "acosl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "ACOSH(3)": {
    "functions": [
      {
        "prototype": "double acosh(double x)",
        "name": "acosh",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float acoshf(float x)",
        "name": "acoshf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double acoshl(long double x)",
        "name": "acoshl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "INET(3)": {
    "functions": [
      {
        "prototype": "int inet_aton(const char *cp, struct in_addr *pin)",
        "name": "inet_aton",
        "type": "int",
        "args": [
          {
            "name": "cp",
            "type": "const char *"
          },
          {
            "name": "pin",
            "type": "struct in_addr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "in_addr_t inet_addr(const char *cp)",
        "name": "inet_addr",
        "type": "in_addr_t",
        "args": [
          {
            "name": "cp",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "in_addr_t inet_network(const char *cp)",
        "name": "inet_network",
        "type": "in_addr_t",
        "args": [
          {
            "name": "cp",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "char * inet_ntoa(struct in_addr in)",
        "name": "inet_ntoa",
        "type": "char *",
        "args": [
          {
            "name": "in",
            "type": "struct in_addr"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "char * inet_ntoa_r(struct in_addr in, char *buf, socklen_t size)",
        "name": "inet_ntoa_r",
        "type": "char *",
        "args": [
          {
            "name": "in",
            "type": "struct in_addr"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "const char * inet_ntop(int af, const void * restrict src, char * restrict dst, socklen_t size)",
        "name": "inet_ntop",
        "type": "const char *",
        "args": [
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "src",
            "type": "const void * restrict"
          },
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "size",
            "type": "socklen_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "int inet_pton(int af, const char * restrict src, void * restrict dst)",
        "name": "inet_pton",
        "type": "int",
        "args": [
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          },
          {
            "name": "dst",
            "type": "void * restrict"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "struct in_addr inet_makeaddr(in_addr_t net, in_addr_t lna)",
        "name": "inet_makeaddr",
        "type": "struct in_addr",
        "args": [
          {
            "name": "net",
            "type": "in_addr_t"
          },
          {
            "name": "lna",
            "type": "in_addr_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "in_addr_t inet_lnaof(struct in_addr in)",
        "name": "inet_lnaof",
        "type": "in_addr_t",
        "args": [
          {
            "name": "in",
            "type": "struct in_addr"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "in_addr_t inet_netof(struct in_addr in)",
        "name": "inet_netof",
        "type": "in_addr_t",
        "args": [
          {
            "name": "in",
            "type": "struct in_addr"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      }
    ]
  },
  "ALARM(3)": {
    "functions": [
      {
        "prototype": "unsigned int alarm(unsigned int seconds)",
        "name": "alarm",
        "type": "unsigned int",
        "args": [
          {
            "name": "seconds",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "JEMALLOC(3)": {
    "functions": [
      {
        "prototype": "void *calloc(size_t number, size_t size)",
        "name": "calloc",
        "type": "void *",
        "args": [
          {
            "name": "number",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "int posix_memalign(void **ptr, size_t alignment, size_t size)",
        "name": "posix_memalign",
        "type": "int",
        "args": [
          {
            "name": "ptr",
            "type": "void **"
          },
          {
            "name": "alignment",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void *aligned_alloc(size_t alignment, size_t size)",
        "name": "aligned_alloc",
        "type": "void *",
        "args": [
          {
            "name": "alignment",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void *realloc(void *ptr, size_t size)",
        "name": "realloc",
        "type": "void *",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void free(void *ptr)",
        "name": "free",
        "type": "void",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void *rallocx(void *ptr, size_t size, int flags)",
        "name": "rallocx",
        "type": "void *",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "size_t xallocx(void *ptr, size_t size, size_t extra, int flags)",
        "name": "xallocx",
        "type": "size_t",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "extra",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "size_t sallocx(void *ptr, int flags)",
        "name": "sallocx",
        "type": "size_t",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void dallocx(void *ptr, int flags)",
        "name": "dallocx",
        "type": "void",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void sdallocx(void *ptr, size_t size, int flags)",
        "name": "sdallocx",
        "type": "void",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "size_t nallocx(size_t size, int flags)",
        "name": "nallocx",
        "type": "size_t",
        "args": [
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "int mallctl(const char *name, void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "name": "mallctl",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "oldp",
            "type": "void *"
          },
          {
            "name": "oldlenp",
            "type": "size_t *"
          },
          {
            "name": "newp",
            "type": "void *"
          },
          {
            "name": "newlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "int mallctlnametomib(const char *name, size_t *mibp, size_t *miblenp)",
        "name": "mallctlnametomib",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "mibp",
            "type": "size_t *"
          },
          {
            "name": "miblenp",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "int mallctlbymib(const size_t *mib, size_t miblen, void *oldp, size_t *oldlenp, void *newp, size_t newlen)",
        "name": "mallctlbymib",
        "type": "int",
        "args": [
          {
            "name": "mib",
            "type": "const size_t *"
          },
          {
            "name": "miblen",
            "type": "size_t"
          },
          {
            "name": "oldp",
            "type": "void *"
          },
          {
            "name": "oldlenp",
            "type": "size_t *"
          },
          {
            "name": "newp",
            "type": "void *"
          },
          {
            "name": "newlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "void malloc_stats_print(void (*write_cb) (void *, const char *), void *cbopaque, const char *opts)",
        "name": "malloc_stats_print",
        "type": "void",
        "args": [
          {
            "name": "write_cb",
            "type": "void (*)(void *, const char *)"
          },
          {
            "name": "cbopaque",
            "type": "void *"
          },
          {
            "name": "opts",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      },
      {
        "prototype": "size_t malloc_usable_size(const void *ptr)",
        "name": "malloc_usable_size",
        "type": "size_t",
        "args": [
          {
            "name": "ptr",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <malloc_np.h>"
        ]
      }
    ]
  },
  "ALLOCA(3)": {
    "functions": [
      {
        "prototype": "void * alloca(size_t size)",
        "name": "alloca",
        "type": "void *",
        "args": [
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "SCANDIR(3)": {
    "functions": [
      {
        "prototype": "int scandir(const char *dirname, struct dirent ***namelist, int (*select)(const struct dirent *), int (*compar)(const struct dirent **, const struct dirent **))",
        "name": "scandir",
        "type": "int",
        "args": [
          {
            "name": "dirname",
            "type": "const char *"
          },
          {
            "name": "namelist",
            "type": "struct dirent ***"
          },
          {
            "name": "select",
            "type": "int (*)(const struct dirent *)"
          },
          {
            "name": "compar",
            "type": "int (*)(const struct dirent **, const struct dirent **)"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int alphasort(const struct dirent **d1, const struct dirent **d2)",
        "name": "alphasort",
        "type": "int",
        "args": [
          {
            "name": "d1",
            "type": "const struct dirent **"
          },
          {
            "name": "d2",
            "type": "const struct dirent **"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      }
    ]
  },
  "ARC4RANDOM(3)": {
    "functions": [
      {
        "prototype": "uint32_t arc4random(void)",
        "name": "arc4random",
        "type": "uint32_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void arc4random_buf(void *buf, size_t nbytes)",
        "name": "arc4random_buf",
        "type": "void",
        "args": [
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "uint32_t arc4random_uniform(uint32_t upper_bound)",
        "name": "arc4random_uniform",
        "type": "uint32_t",
        "args": [
          {
            "name": "upper_bound",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void arc4random_stir(void)",
        "name": "arc4random_stir",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void arc4random_addrandom(unsigned char *dat, int datlen)",
        "name": "arc4random_addrandom",
        "type": "void",
        "args": [
          {
            "name": "dat",
            "type": "unsigned char *"
          },
          {
            "name": "datlen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "CTIME(3)": {
    "functions": [
      {
        "prototype": "char * ctime(const time_t *clock)",
        "name": "ctime",
        "type": "char *",
        "args": [
          {
            "name": "clock",
            "type": "const time_t *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "double difftime(time_t time1, time_t time0)",
        "name": "difftime",
        "type": "double",
        "args": [
          {
            "name": "time1",
            "type": "time_t"
          },
          {
            "name": "time0",
            "type": "time_t"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "char * asctime(const struct tm *tm)",
        "name": "asctime",
        "type": "char *",
        "args": [
          {
            "name": "tm",
            "type": "const struct tm *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "struct tm * localtime(const time_t *clock)",
        "name": "localtime",
        "type": "struct tm *",
        "args": [
          {
            "name": "clock",
            "type": "const time_t *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "struct tm * gmtime(const time_t *clock)",
        "name": "gmtime",
        "type": "struct tm *",
        "args": [
          {
            "name": "clock",
            "type": "const time_t *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "time_t mktime(struct tm *tm)",
        "name": "mktime",
        "type": "time_t",
        "args": [
          {
            "name": "tm",
            "type": "struct tm *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "time_t timegm(struct tm *tm)",
        "name": "timegm",
        "type": "time_t",
        "args": [
          {
            "name": "tm",
            "type": "struct tm *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "char * ctime_r(const time_t *clock, char *buf)",
        "name": "ctime_r",
        "type": "char *",
        "args": [
          {
            "name": "clock",
            "type": "const time_t *"
          },
          {
            "name": "buf",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "struct tm * localtime_r(const time_t *clock, struct tm *result)",
        "name": "localtime_r",
        "type": "struct tm *",
        "args": [
          {
            "name": "clock",
            "type": "const time_t *"
          },
          {
            "name": "result",
            "type": "struct tm *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "struct tm * gmtime_r(const time_t *clock, struct tm *result)",
        "name": "gmtime_r",
        "type": "struct tm *",
        "args": [
          {
            "name": "clock",
            "type": "const time_t *"
          },
          {
            "name": "result",
            "type": "struct tm *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "char * asctime_r(const struct tm *tm, char *buf)",
        "name": "asctime_r",
        "type": "char *",
        "args": [
          {
            "name": "tm",
            "type": "const struct tm *"
          },
          {
            "name": "buf",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "ASIN(3)": {
    "functions": [
      {
        "prototype": "double asin(double x)",
        "name": "asin",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float asinf(float x)",
        "name": "asinf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double asinl(long double x)",
        "name": "asinl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "ASINH(3)": {
    "functions": [
      {
        "prototype": "double asinh(double x)",
        "name": "asinh",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float asinhf(float x)",
        "name": "asinhf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double asinhl(long double x)",
        "name": "asinhl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "PRINTF(3)": {
    "functions": [
      {
        "prototype": "int printf(const char * restrict format, ...)",
        "name": "printf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fprintf(FILE * restrict stream, const char * restrict format, ...)",
        "name": "fprintf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int sprintf(char * restrict str, const char * restrict format, ...)",
        "name": "sprintf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int snprintf(char * restrict str, size_t size, const char * restrict format, ...)",
        "name": "snprintf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int asprintf(char **ret, const char *format, ...)",
        "name": "asprintf",
        "type": "int",
        "args": [
          {
            "name": "ret",
            "type": "char **"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int dprintf(int fd, const char * restrict format, ...)",
        "name": "dprintf",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int vprintf(const char * restrict format, va_list ap)",
        "name": "vprintf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vfprintf(FILE * restrict stream, const char * restrict format, va_list ap)",
        "name": "vfprintf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vsprintf(char * restrict str, const char * restrict format, va_list ap)",
        "name": "vsprintf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vsnprintf(char * restrict str, size_t size, const char * restrict format, va_list ap)",
        "name": "vsnprintf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vasprintf(char **ret, const char *format, va_list ap)",
        "name": "vasprintf",
        "type": "int",
        "args": [
          {
            "name": "ret",
            "type": "char **"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vdprintf(int fd, const char * restrict format, va_list ap)",
        "name": "vdprintf",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      }
    ]
  },
  "PRINTF_L(3)": {
    "functions": [
      {
        "prototype": "int printf_l(locale_t loc, const char * restrict format, ...)",
        "name": "printf_l",
        "type": "int",
        "args": [
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int asprintf_l(char **ret, locale_t loc, const char * format, ...)",
        "name": "asprintf_l",
        "type": "int",
        "args": [
          {
            "name": "ret",
            "type": "char **"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int fprintf_l(FILE * restrict stream, locale_t loc, const char * restrict format, ...)",
        "name": "fprintf_l",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int snprintf_l(char * restrict str, size_t size, locale_t loc, const char * restrict format, ...)",
        "name": "snprintf_l",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int sprintf_l(char * restrict str, locale_t loc, const char * restrict format, ...)",
        "name": "sprintf_l",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vasprintf_l(char **ret, locale_t loc, const char *format, va_list ap)",
        "name": "vasprintf_l",
        "type": "int",
        "args": [
          {
            "name": "ret",
            "type": "char **"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char *"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vfprintf_l(FILE * restrict stream, locale_t loc, const char * restrict format, va_list ap)",
        "name": "vfprintf_l",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vprintf_l(locale_t loc, const char * restrict format, va_list ap)",
        "name": "vprintf_l",
        "type": "int",
        "args": [
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vsnprintf_l(char * restrict str, size_t size, locale_t loc, const char * restrict format, va_list ap)",
        "name": "vsnprintf_l",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vsprintf_l(char * restrict str, locale_t loc, const char * restrict format, va_list ap)",
        "name": "vsprintf_l",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "AT_QUICK_EXIT(3)": {
    "functions": [
      {
        "prototype": "int at_quick_exit(void (*func)(void))",
        "name": "at_quick_exit",
        "type": "int",
        "args": [
          {
            "name": "func",
            "type": "void (*)(void)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ATAN(3)": {
    "functions": [
      {
        "prototype": "double atan(double x)",
        "name": "atan",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float atanf(float x)",
        "name": "atanf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double atanl(long double x)",
        "name": "atanl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "ATAN2(3)": {
    "functions": [
      {
        "prototype": "double atan2(double y, double x)",
        "name": "atan2",
        "type": "double",
        "args": [
          {
            "name": "y",
            "type": "double"
          },
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float atan2f(float y, float x)",
        "name": "atan2f",
        "type": "float",
        "args": [
          {
            "name": "y",
            "type": "float"
          },
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double atan2l(long double y, long double x)",
        "name": "atan2l",
        "type": "long double",
        "args": [
          {
            "name": "y",
            "type": "long double"
          },
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double carg(double complex z)",
        "name": "carg",
        "type": "double",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <math.h>",
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float cargf(float complex z)",
        "name": "cargf",
        "type": "float",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <math.h>",
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double cargl(long double complex z)",
        "name": "cargl",
        "type": "long double",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <math.h>",
          "#include <complex.h>"
        ]
      }
    ]
  },
  "ATANH(3)": {
    "functions": [
      {
        "prototype": "double atanh(double x)",
        "name": "atanh",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float atanhf(float x)",
        "name": "atanhf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double atanhl(long double x)",
        "name": "atanhl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "ATEXIT(3)": {
    "functions": [
      {
        "prototype": "int atexit(void (*function)(void))",
        "name": "atexit",
        "type": "int",
        "args": [
          {
            "name": "function",
            "type": "void (*)(void)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int atexit_b(void (^function)(void))",
        "name": "atexit_b",
        "type": "int",
        "args": [
          {
            "name": "function",
            "type": "void (*)(void)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ATOF(3)": {
    "functions": [
      {
        "prototype": "double atof(const char *nptr)",
        "name": "atof",
        "type": "double",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ATOI(3)": {
    "functions": [
      {
        "prototype": "int atoi(const char *nptr)",
        "name": "atoi",
        "type": "int",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ATOL(3)": {
    "functions": [
      {
        "prototype": "long atol(const char *nptr)",
        "name": "atol",
        "type": "long",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "long long atoll(const char *nptr)",
        "name": "atoll",
        "type": "long long",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "RPC_CLNT_AUTH(3)": {
    "functions": [
      {
        "prototype": "void auth_destroy(AUTH *auth)",
        "name": "auth_destroy",
        "type": "void",
        "args": [
          {
            "name": "auth",
            "type": "AUTH *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "AUTH * authnone_create(void)",
        "name": "authnone_create",
        "type": "AUTH *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "AUTH * authsys_create(const char *host, const uid_t uid, const gid_t gid, const int len, const gid_t *aup_gids)",
        "name": "authsys_create",
        "type": "AUTH *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "uid",
            "type": "const uid_t"
          },
          {
            "name": "gid",
            "type": "const gid_t"
          },
          {
            "name": "len",
            "type": "const int"
          },
          {
            "name": "aup_gids",
            "type": "const gid_t *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "AUTH * authsys_create_default(void)",
        "name": "authsys_create_default",
        "type": "AUTH *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "RPC_SOC(3)": {
    "functions": [

    ]
  },
  "BCMP(3)": {
    "functions": [
      {
        "prototype": "int bcmp(const void *b1, const void *b2, size_t len)",
        "name": "bcmp",
        "type": "int",
        "args": [
          {
            "name": "b1",
            "type": "const void *"
          },
          {
            "name": "b2",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      }
    ]
  },
  "BCOPY(3)": {
    "functions": [
      {
        "prototype": "void bcopy(const void *src, void *dst, size_t len)",
        "name": "bcopy",
        "type": "void",
        "args": [
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      }
    ]
  },
  "BINDRESVPORT(3)": {
    "functions": [
      {
        "prototype": "int bindresvport(int sd, struct sockaddr_in *sin)",
        "name": "bindresvport",
        "type": "int",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "sin",
            "type": "struct sockaddr_in *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "int bindresvport_sa(int sd, struct sockaddr *sa)",
        "name": "bindresvport_sa",
        "type": "int",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "sa",
            "type": "struct sockaddr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "BSEARCH(3)": {
    "functions": [
      {
        "prototype": "void * bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar) (const void *, const void *))",
        "name": "bsearch",
        "type": "void *",
        "args": [
          {
            "name": "key",
            "type": "const void *"
          },
          {
            "name": "base",
            "type": "const void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "BSTRING(3)": {
    "functions": [
      {
        "prototype": "int bcmp(const void *b1, const void *b2, size_t len)",
        "name": "bcmp",
        "type": "int",
        "args": [
          {
            "name": "b1",
            "type": "const void *"
          },
          {
            "name": "b2",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void bcopy(const void *src, void *dst, size_t len)",
        "name": "bcopy",
        "type": "void",
        "args": [
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void bzero(void *b, size_t len)",
        "name": "bzero",
        "type": "void",
        "args": [
          {
            "name": "b",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memchr(const void *b, int c, size_t len)",
        "name": "memchr",
        "type": "void *",
        "args": [
          {
            "name": "b",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int memcmp(const void *b1, const void *b2, size_t len)",
        "name": "memcmp",
        "type": "int",
        "args": [
          {
            "name": "b1",
            "type": "const void *"
          },
          {
            "name": "b2",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memccpy(void *dst, const void *src, int c, size_t len)",
        "name": "memccpy",
        "type": "void *",
        "args": [
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memcpy(void *dst, const void *src, size_t len)",
        "name": "memcpy",
        "type": "void *",
        "args": [
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memmove(void *dst, const void *src, size_t len)",
        "name": "memmove",
        "type": "void *",
        "args": [
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memset(void *b, int c, size_t len)",
        "name": "memset",
        "type": "void *",
        "args": [
          {
            "name": "b",
            "type": "void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "BTOWC(3)": {
    "functions": [
      {
        "prototype": "wint_t btowc(int c)",
        "name": "btowc",
        "type": "wint_t",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wctob(wint_t c)",
        "name": "wctob",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wint_t btowc_l(int c, locale_t loc)",
        "name": "btowc_l",
        "type": "wint_t",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int wctob_l(wint_t c, locale_t loc)",
        "name": "wctob_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "BYTEORDER(3)": {
    "functions": [
      {
        "prototype": "uint32_t htonl(uint32_t hostlong)",
        "name": "htonl",
        "type": "uint32_t",
        "args": [
          {
            "name": "hostlong",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <arpa/inet.h>",
          "#include <netinet/in.h>"
        ]
      },
      {
        "prototype": "uint16_t htons(uint16_t hostshort)",
        "name": "htons",
        "type": "uint16_t",
        "args": [
          {
            "name": "hostshort",
            "type": "uint16_t"
          }
        ],
        "includes": [
          "#include <arpa/inet.h>",
          "#include <netinet/in.h>"
        ]
      },
      {
        "prototype": "uint32_t ntohl(uint32_t netlong)",
        "name": "ntohl",
        "type": "uint32_t",
        "args": [
          {
            "name": "netlong",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <arpa/inet.h>",
          "#include <netinet/in.h>"
        ]
      },
      {
        "prototype": "uint16_t ntohs(uint16_t netshort)",
        "name": "ntohs",
        "type": "uint16_t",
        "args": [
          {
            "name": "netshort",
            "type": "uint16_t"
          }
        ],
        "includes": [
          "#include <arpa/inet.h>",
          "#include <netinet/in.h>"
        ]
      }
    ]
  },
  "BZERO(3)": {
    "functions": [
      {
        "prototype": "void bzero(void *b, size_t len)",
        "name": "bzero",
        "type": "void",
        "args": [
          {
            "name": "b",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "void explicit_bzero(void *b, size_t len)",
        "name": "explicit_bzero",
        "type": "void",
        "args": [
          {
            "name": "b",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      }
    ]
  },
  "WCRTOMB(3)": {
    "functions": [
      {
        "prototype": "size_t wcrtomb(char * restrict s, wchar_t c, mbstate_t * restrict ps)",
        "name": "wcrtomb",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "c",
            "type": "wchar_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t c16rtomb(char * restrict s, char16_t c, mbstate_t * restrict ps)",
        "name": "c16rtomb",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "c",
            "type": "char16_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <uchar.h>"
        ]
      },
      {
        "prototype": "size_t c32rtomb(char * restrict s, char32_t c, mbstate_t * restrict ps)",
        "name": "c32rtomb",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "c",
            "type": "char32_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <uchar.h>"
        ]
      }
    ]
  },
  "HYPOT(3)": {
    "functions": [
      {
        "prototype": "double hypot(double x, double y)",
        "name": "hypot",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float hypotf(float x, float y)",
        "name": "hypotf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double hypotl(long double x, long double y)",
        "name": "hypotl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double cabs(double complex z)",
        "name": "cabs",
        "type": "double",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <math.h>",
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float cabsf(float complex z)",
        "name": "cabsf",
        "type": "float",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <math.h>",
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double cabsl(long double complex z)",
        "name": "cabsl",
        "type": "long double",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <math.h>",
          "#include <complex.h>"
        ]
      }
    ]
  },
  "CACOS(3)": {
    "functions": [
      {
        "prototype": "double complex cacos(double complex z)",
        "name": "cacos",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex cacosf(float complex z)",
        "name": "cacosf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex cacosl(long double complex z)",
        "name": "cacosl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex cacosh(double complex z)",
        "name": "cacosh",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex cacoshf(float complex z)",
        "name": "cacoshf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex cacoshl(long double complex z)",
        "name": "cacoshl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex casin(double complex z)",
        "name": "casin",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex casinf(float complex z)",
        "name": "casinf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex casinl(long double complex z)",
        "name": "casinl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex casinh(double complex z)",
        "name": "casinh",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex casinhf(float complex z)",
        "name": "casinhf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex casinhl(long double complex z)",
        "name": "casinhl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex catan(double complex z)",
        "name": "catan",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex catanf(float complex z)",
        "name": "catanf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex catanl(long double complex z)",
        "name": "catanl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex catanh(double complex z)",
        "name": "catanh",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex catanhf(float complex z)",
        "name": "catanhf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex catanhl(long double complex z)",
        "name": "catanhl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      }
    ]
  },
  "CAP_RIGHTS_INIT(3)": {
    "functions": [
      {
        "prototype": "cap_rights_t * cap_rights_init(cap_rights_t *rights, ...)",
        "name": "cap_rights_init",
        "type": "cap_rights_t *",
        "args": [
          {
            "name": "rights",
            "type": "cap_rights_t *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "cap_rights_t * cap_rights_set(cap_rights_t *rights, ...)",
        "name": "cap_rights_set",
        "type": "cap_rights_t *",
        "args": [
          {
            "name": "rights",
            "type": "cap_rights_t *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "cap_rights_t * cap_rights_clear(cap_rights_t *rights, ...)",
        "name": "cap_rights_clear",
        "type": "cap_rights_t *",
        "args": [
          {
            "name": "rights",
            "type": "cap_rights_t *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "bool cap_rights_is_set(const cap_rights_t *rights, ...)",
        "name": "cap_rights_is_set",
        "type": "bool",
        "args": [
          {
            "name": "rights",
            "type": "const cap_rights_t *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "bool cap_rights_is_valid(const cap_rights_t *rights)",
        "name": "cap_rights_is_valid",
        "type": "bool",
        "args": [
          {
            "name": "rights",
            "type": "const cap_rights_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "cap_rights_t * cap_rights_merge(cap_rights_t *dst, const cap_rights_t *src)",
        "name": "cap_rights_merge",
        "type": "cap_rights_t *",
        "args": [
          {
            "name": "dst",
            "type": "cap_rights_t *"
          },
          {
            "name": "src",
            "type": "const cap_rights_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "cap_rights_t * cap_rights_remove(cap_rights_t *dst, const cap_rights_t *src)",
        "name": "cap_rights_remove",
        "type": "cap_rights_t *",
        "args": [
          {
            "name": "dst",
            "type": "cap_rights_t *"
          },
          {
            "name": "src",
            "type": "const cap_rights_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      },
      {
        "prototype": "bool cap_rights_contains(const cap_rights_t *big, const cap_rights_t *little)",
        "name": "cap_rights_contains",
        "type": "bool",
        "args": [
          {
            "name": "big",
            "type": "const cap_rights_t *"
          },
          {
            "name": "little",
            "type": "const cap_rights_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      }
    ]
  },
  "CAP_RIGHTS_GET(3)": {
    "functions": [
      {
        "prototype": "int cap_rights_get(int fd, cap_rights_t *rights)",
        "name": "cap_rights_get",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "rights",
            "type": "cap_rights_t *"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>"
        ]
      }
    ]
  },
  "CAP_SANDBOXED(3)": {
    "functions": [
      {
        "prototype": "bool cap_sandboxed(void)",
        "name": "cap_sandboxed",
        "type": "bool",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/capsicum.h>",
          "#include <stdbool.h>"
        ]
      }
    ]
  },
  "CATCLOSE(3)": {
    "functions": [
      {
        "prototype": "int catclose(nl_catd catd)",
        "name": "catclose",
        "type": "int",
        "args": [
          {
            "name": "catd",
            "type": "nl_catd"
          }
        ],
        "includes": [
          "#include <nl_types.h>"
        ]
      }
    ]
  },
  "CATGETS(3)": {
    "functions": [
      {
        "prototype": "char * catgets(nl_catd catd, int set_id, int msg_id, const char *s)",
        "name": "catgets",
        "type": "char *",
        "args": [
          {
            "name": "catd",
            "type": "nl_catd"
          },
          {
            "name": "set_id",
            "type": "int"
          },
          {
            "name": "msg_id",
            "type": "int"
          },
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <nl_types.h>"
        ]
      }
    ]
  },
  "CATOPEN(3)": {
    "functions": [
      {
        "prototype": "nl_catd catopen(const char *name, int oflag)",
        "name": "catopen",
        "type": "nl_catd",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "oflag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <nl_types.h>"
        ]
      }
    ]
  },
  "DES_CRYPT(3)": {
    "functions": [
      {
        "prototype": "int ecb_crypt(char *key, char *data, unsigned datalen, unsigned mode)",
        "name": "ecb_crypt",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "char *"
          },
          {
            "name": "data",
            "type": "char *"
          },
          {
            "name": "datalen",
            "type": "unsigned"
          },
          {
            "name": "mode",
            "type": "unsigned"
          }
        ],
        "includes": [
          "#include <rpc/des_crypt.h>"
        ]
      },
      {
        "prototype": "int cbc_crypt(char *key, char *data, unsigned datalen, unsigned mode, char *ivec)",
        "name": "cbc_crypt",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "char *"
          },
          {
            "name": "data",
            "type": "char *"
          },
          {
            "name": "datalen",
            "type": "unsigned"
          },
          {
            "name": "mode",
            "type": "unsigned"
          },
          {
            "name": "ivec",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <rpc/des_crypt.h>"
        ]
      },
      {
        "prototype": "void des_setparity(char *key)",
        "name": "des_setparity",
        "type": "void",
        "args": [
          {
            "name": "key",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <rpc/des_crypt.h>"
        ]
      }
    ]
  },
  "SQRT(3)": {
    "functions": [
      {
        "prototype": "double cbrt(double x)",
        "name": "cbrt",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float cbrtf(float x)",
        "name": "cbrtf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double cbrtl(long double x)",
        "name": "cbrtl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double sqrt(double x)",
        "name": "sqrt",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float sqrtf(float x)",
        "name": "sqrtf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double sqrtl(long double x)",
        "name": "sqrtl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "CCOS(3)": {
    "functions": [
      {
        "prototype": "double complex ccos(double complex z)",
        "name": "ccos",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex ccosf(float complex z)",
        "name": "ccosf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex csin(double complex z)",
        "name": "csin",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex csinf(float complex z)",
        "name": "csinf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex ctan(double complex z)",
        "name": "ctan",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex ctanf(float complex z)",
        "name": "ctanf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      }
    ]
  },
  "CCOSH(3)": {
    "functions": [
      {
        "prototype": "double complex ccosh(double complex z)",
        "name": "ccosh",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex ccoshf(float complex z)",
        "name": "ccoshf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex csinh(double complex z)",
        "name": "csinh",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex csinhf(float complex z)",
        "name": "csinhf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex ctanh(double complex z)",
        "name": "ctanh",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex ctanhf(float complex z)",
        "name": "ctanhf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      }
    ]
  },
  "CEIL(3)": {
    "functions": [
      {
        "prototype": "double ceil(double x)",
        "name": "ceil",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float ceilf(float x)",
        "name": "ceilf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double ceill(long double x)",
        "name": "ceill",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "CEXP(3)": {
    "functions": [
      {
        "prototype": "double complex cexp(double complex z)",
        "name": "cexp",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex cexpf(float complex z)",
        "name": "cexpf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      }
    ]
  },
  "TCSETATTR(3)": {
    "functions": [
      {
        "prototype": "speed_t cfgetispeed(const struct termios *t)",
        "name": "cfgetispeed",
        "type": "speed_t",
        "args": [
          {
            "name": "t",
            "type": "const struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int cfsetispeed(struct termios *t, speed_t speed)",
        "name": "cfsetispeed",
        "type": "int",
        "args": [
          {
            "name": "t",
            "type": "struct termios *"
          },
          {
            "name": "speed",
            "type": "speed_t"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "speed_t cfgetospeed(const struct termios *t)",
        "name": "cfgetospeed",
        "type": "speed_t",
        "args": [
          {
            "name": "t",
            "type": "const struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int cfsetospeed(struct termios *t, speed_t speed)",
        "name": "cfsetospeed",
        "type": "int",
        "args": [
          {
            "name": "t",
            "type": "struct termios *"
          },
          {
            "name": "speed",
            "type": "speed_t"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int cfsetspeed(struct termios *t, speed_t speed)",
        "name": "cfsetspeed",
        "type": "int",
        "args": [
          {
            "name": "t",
            "type": "struct termios *"
          },
          {
            "name": "speed",
            "type": "speed_t"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "void cfmakeraw(struct termios *t)",
        "name": "cfmakeraw",
        "type": "void",
        "args": [
          {
            "name": "t",
            "type": "struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "void cfmakesane(struct termios *t)",
        "name": "cfmakesane",
        "type": "void",
        "args": [
          {
            "name": "t",
            "type": "struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int tcgetattr(int fd, struct termios *t)",
        "name": "tcgetattr",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "t",
            "type": "struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int tcsetattr(int fd, int action, const struct termios *t)",
        "name": "tcsetattr",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "action",
            "type": "int"
          },
          {
            "name": "t",
            "type": "const struct termios *"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      }
    ]
  },
  "GETCAP(3)": {
    "functions": [
      {
        "prototype": "int cgetent(char **buf, char **db_array, const char *name)",
        "name": "cgetent",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char **"
          },
          {
            "name": "db_array",
            "type": "char **"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetset(const char *ent)",
        "name": "cgetset",
        "type": "int",
        "args": [
          {
            "name": "ent",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetmatch(const char *buf, const char *name)",
        "name": "cgetmatch",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "const char *"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * cgetcap(char *buf, const char *cap, int type)",
        "name": "cgetcap",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "cap",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetnum(char *buf, const char *cap, long *num)",
        "name": "cgetnum",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "cap",
            "type": "const char *"
          },
          {
            "name": "num",
            "type": "long *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetstr(char *buf, const char *cap, char **str)",
        "name": "cgetstr",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "cap",
            "type": "const char *"
          },
          {
            "name": "str",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetustr(char *buf, const char *cap, char **str)",
        "name": "cgetustr",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "cap",
            "type": "const char *"
          },
          {
            "name": "str",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetfirst(char **buf, char **db_array)",
        "name": "cgetfirst",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char **"
          },
          {
            "name": "db_array",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetnext(char **buf, char **db_array)",
        "name": "cgetnext",
        "type": "int",
        "args": [
          {
            "name": "buf",
            "type": "char **"
          },
          {
            "name": "db_array",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int cgetclose(void)",
        "name": "cgetclose",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "CHECK_UTILITY_COMPAT(3)": {
    "functions": [
      {
        "prototype": "int check_utility_compat(const char *utility)",
        "name": "check_utility_compat",
        "type": "int",
        "args": [
          {
            "name": "utility",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "CIMAG(3)": {
    "functions": [
      {
        "prototype": "double cimag(double complex z)",
        "name": "cimag",
        "type": "double",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float cimagf(float complex z)",
        "name": "cimagf",
        "type": "float",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double cimagl(long double complex z)",
        "name": "cimagl",
        "type": "long double",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex conj(double complex z)",
        "name": "conj",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex conjf(float complex z)",
        "name": "conjf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex conjl(long double complex z)",
        "name": "conjl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double complex cproj(double complex z)",
        "name": "cproj",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex cprojf(float complex z)",
        "name": "cprojf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex cprojl(long double complex z)",
        "name": "cprojl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "double creal(double complex z)",
        "name": "creal",
        "type": "double",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float crealf(float complex z)",
        "name": "crealf",
        "type": "float",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double creall(long double complex z)",
        "name": "creall",
        "type": "long double",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      }
    ]
  },
  "FERROR(3)": {
    "functions": [
      {
        "prototype": "void clearerr(FILE *stream)",
        "name": "clearerr",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void clearerr_unlocked(FILE *stream)",
        "name": "clearerr_unlocked",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int feof(FILE *stream)",
        "name": "feof",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int feof_unlocked(FILE *stream)",
        "name": "feof_unlocked",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int ferror(FILE *stream)",
        "name": "ferror",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int ferror_unlocked(FILE *stream)",
        "name": "ferror_unlocked",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fileno(FILE *stream)",
        "name": "fileno",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fileno_unlocked(FILE *stream)",
        "name": "fileno_unlocked",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "RPC_CLNT_CALLS(3)": {
    "functions": [
      {
        "prototype": "enum clnt_stat clnt_call(CLIENT *clnt, const rpcproc_t procnum, const xdrproc_t inproc, const caddr_t in, const xdrproc_t outproc, caddr_t out, const struct timeval tout)",
        "name": "clnt_call",
        "type": "enum clnt_stat",
        "args": [
          {
            "name": "clnt",
            "type": "CLIENT *"
          },
          {
            "name": "procnum",
            "type": "const rpcproc_t"
          },
          {
            "name": "inproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "in",
            "type": "const caddr_t"
          },
          {
            "name": "outproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "out",
            "type": "caddr_t"
          },
          {
            "name": "tout",
            "type": "const struct timeval"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t clnt_freeres(CLIENT *clnt, const xdrproc_t outproc, caddr_t out)",
        "name": "clnt_freeres",
        "type": "bool_t",
        "args": [
          {
            "name": "clnt",
            "type": "CLIENT *"
          },
          {
            "name": "outproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "out",
            "type": "caddr_t"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void clnt_geterr(const CLIENT * clnt, struct rpc_err * errp)",
        "name": "clnt_geterr",
        "type": "void",
        "args": [
          {
            "name": "clnt",
            "type": "const CLIENT *"
          },
          {
            "name": "errp",
            "type": "struct rpc_err *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void clnt_perrno(const enum clnt_stat stat)",
        "name": "clnt_perrno",
        "type": "void",
        "args": [
          {
            "name": "stat",
            "type": "const enum clnt_stat"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void clnt_perror(CLIENT *clnt, const char *s)",
        "name": "clnt_perror",
        "type": "void",
        "args": [
          {
            "name": "clnt",
            "type": "CLIENT *"
          },
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "char * clnt_sperrno(const enum clnt_stat stat)",
        "name": "clnt_sperrno",
        "type": "char *",
        "args": [
          {
            "name": "stat",
            "type": "const enum clnt_stat"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "char * clnt_sperror(CLIENT *clnt, const char * s)",
        "name": "clnt_sperror",
        "type": "char *",
        "args": [
          {
            "name": "clnt",
            "type": "CLIENT *"
          },
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "enum clnt_stat rpc_broadcast(const rpcprog_t prognum, const rpcvers_t versnum, const rpcproc_t procnum, const xdrproc_t inproc, const caddr_t in, const xdrproc_t outproc, caddr_t out, const resultproc_t eachresult, const char *nettype)",
        "name": "rpc_broadcast",
        "type": "enum clnt_stat",
        "args": [
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "procnum",
            "type": "const rpcproc_t"
          },
          {
            "name": "inproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "in",
            "type": "const caddr_t"
          },
          {
            "name": "outproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "out",
            "type": "caddr_t"
          },
          {
            "name": "eachresult",
            "type": "const resultproc_t"
          },
          {
            "name": "nettype",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "enum clnt_stat rpc_broadcast_exp(const rpcprog_t prognum, const rpcvers_t versnum, const rpcproc_t procnum, const xdrproc_t xargs, caddr_t argsp, const xdrproc_t xresults, caddr_t resultsp, const resultproc_t eachresult, const int inittime, const int waittime, const char * nettype)",
        "name": "rpc_broadcast_exp",
        "type": "enum clnt_stat",
        "args": [
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "procnum",
            "type": "const rpcproc_t"
          },
          {
            "name": "xargs",
            "type": "const xdrproc_t"
          },
          {
            "name": "argsp",
            "type": "caddr_t"
          },
          {
            "name": "xresults",
            "type": "const xdrproc_t"
          },
          {
            "name": "resultsp",
            "type": "caddr_t"
          },
          {
            "name": "eachresult",
            "type": "const resultproc_t"
          },
          {
            "name": "inittime",
            "type": "const int"
          },
          {
            "name": "waittime",
            "type": "const int"
          },
          {
            "name": "nettype",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "enum clnt_stat rpc_call(const char *host, const rpcprog_t prognum, const rpcvers_t versnum, const rpcproc_t procnum, const xdrproc_t inproc, const char *in, const xdrproc_t outproc, char *out, const char *nettype)",
        "name": "rpc_call",
        "type": "enum clnt_stat",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "procnum",
            "type": "const rpcproc_t"
          },
          {
            "name": "inproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "in",
            "type": "const char *"
          },
          {
            "name": "outproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "out",
            "type": "char *"
          },
          {
            "name": "nettype",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "RPC_CLNT_CREATE(3)": {
    "functions": [
      {
        "prototype": "bool_t clnt_control(CLIENT *clnt, const u_int req, char *info)",
        "name": "clnt_control",
        "type": "bool_t",
        "args": [
          {
            "name": "clnt",
            "type": "CLIENT *"
          },
          {
            "name": "req",
            "type": "const u_int"
          },
          {
            "name": "info",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_create(const char * host, const rpcprog_t prognum, const rpcvers_t versnum, const char *nettype)",
        "name": "clnt_create",
        "type": "CLIENT *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "nettype",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_create_timed(const char * host, const rpcprog_t prognum, const rpcvers_t versnum, const char *nettype, const struct timeval *timeout)",
        "name": "clnt_create_timed",
        "type": "CLIENT *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "nettype",
            "type": "const char *"
          },
          {
            "name": "timeout",
            "type": "const struct timeval *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_create_vers(const char * host, const rpcprog_t prognum, rpcvers_t *vers_outp, const rpcvers_t vers_low, const rpcvers_t vers_high, const char *nettype)",
        "name": "clnt_create_vers",
        "type": "CLIENT *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "vers_outp",
            "type": "rpcvers_t *"
          },
          {
            "name": "vers_low",
            "type": "const rpcvers_t"
          },
          {
            "name": "vers_high",
            "type": "const rpcvers_t"
          },
          {
            "name": "nettype",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_create_vers_timed(const char * host, const rpcprog_t prognum, rpcvers_t *vers_outp, const rpcvers_t vers_low, const rpcvers_t vers_high, const char *nettype, const struct timeval *timeout)",
        "name": "clnt_create_vers_timed",
        "type": "CLIENT *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "vers_outp",
            "type": "rpcvers_t *"
          },
          {
            "name": "vers_low",
            "type": "const rpcvers_t"
          },
          {
            "name": "vers_high",
            "type": "const rpcvers_t"
          },
          {
            "name": "nettype",
            "type": "const char *"
          },
          {
            "name": "timeout",
            "type": "const struct timeval *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void clnt_destroy(CLIENT *clnt)",
        "name": "clnt_destroy",
        "type": "void",
        "args": [
          {
            "name": "clnt",
            "type": "CLIENT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_dg_create(const int fildes, const struct netbuf *svcaddr, const rpcprog_t prognum, const rpcvers_t versnum, const u_int sendsz, const u_int recvsz)",
        "name": "clnt_dg_create",
        "type": "CLIENT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "svcaddr",
            "type": "const struct netbuf *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "sendsz",
            "type": "const u_int"
          },
          {
            "name": "recvsz",
            "type": "const u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void clnt_pcreateerror(const char *s)",
        "name": "clnt_pcreateerror",
        "type": "void",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "char * clnt_spcreateerror(const char *s)",
        "name": "clnt_spcreateerror",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_raw_create(const rpcprog_t prognum, const rpcvers_t versnum)",
        "name": "clnt_raw_create",
        "type": "CLIENT *",
        "args": [
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_tli_create(const int fildes, const struct netconfig *netconf, struct netbuf *svcaddr, const rpcprog_t prognum, const rpcvers_t versnum, const u_int sendsz, const u_int recvsz)",
        "name": "clnt_tli_create",
        "type": "CLIENT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "svcaddr",
            "type": "struct netbuf *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "sendsz",
            "type": "const u_int"
          },
          {
            "name": "recvsz",
            "type": "const u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_tp_create(const char * host, const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf)",
        "name": "clnt_tp_create",
        "type": "CLIENT *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_tp_create_timed(const char * host, const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf, const struct timeval *timeout)",
        "name": "clnt_tp_create_timed",
        "type": "CLIENT *",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "timeout",
            "type": "const struct timeval *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "CLIENT * clnt_vc_create(const int fildes, const struct netbuf *svcaddr, const rpcprog_t prognum, const rpcvers_t versnum, u_int sendsz, u_int recvsz)",
        "name": "clnt_vc_create",
        "type": "CLIENT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "svcaddr",
            "type": "const struct netbuf *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "sendsz",
            "type": "u_int"
          },
          {
            "name": "recvsz",
            "type": "u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "CLOCK(3)": {
    "functions": [
      {
        "prototype": "clock_t clock(void)",
        "name": "clock",
        "type": "clock_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "CLOCK_GETCPUCLOCKID(3)": {
    "functions": [
      {
        "prototype": "int clock_getcpuclockid(pid_t pid, clockid_t *clock_id)",
        "name": "clock_getcpuclockid",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "clock_id",
            "type": "clockid_t *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "DIRECTORY(3)": {
    "functions": [
      {
        "prototype": "DIR * opendir(const char *filename)",
        "name": "opendir",
        "type": "DIR *",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "DIR * fdopendir(int fd)",
        "name": "fdopendir",
        "type": "DIR *",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "struct dirent * readdir(DIR *dirp)",
        "name": "readdir",
        "type": "struct dirent *",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result)",
        "name": "readdir_r",
        "type": "int",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          },
          {
            "name": "entry",
            "type": "struct dirent *"
          },
          {
            "name": "result",
            "type": "struct dirent **"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "long telldir(DIR *dirp)",
        "name": "telldir",
        "type": "long",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "void seekdir(DIR *dirp, long loc)",
        "name": "seekdir",
        "type": "void",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          },
          {
            "name": "loc",
            "type": "long"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "void rewinddir(DIR *dirp)",
        "name": "rewinddir",
        "type": "void",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int closedir(DIR *dirp)",
        "name": "closedir",
        "type": "int",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int fdclosedir(DIR *dirp)",
        "name": "fdclosedir",
        "type": "int",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      },
      {
        "prototype": "int dirfd(DIR *dirp)",
        "name": "dirfd",
        "type": "int",
        "args": [
          {
            "name": "dirp",
            "type": "DIR *"
          }
        ],
        "includes": [
          "#include <dirent.h>"
        ]
      }
    ]
  },
  "SYSLOG(3)": {
    "functions": [
      {
        "prototype": "void syslog(int priority, const char *message, ...)",
        "name": "syslog",
        "type": "void",
        "args": [
          {
            "name": "priority",
            "type": "int"
          },
          {
            "name": "message",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <syslog.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void vsyslog(int priority, const char *message, va_list args)",
        "name": "vsyslog",
        "type": "void",
        "args": [
          {
            "name": "priority",
            "type": "int"
          },
          {
            "name": "message",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <syslog.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void openlog(const char *ident, int logopt, int facility)",
        "name": "openlog",
        "type": "void",
        "args": [
          {
            "name": "ident",
            "type": "const char *"
          },
          {
            "name": "logopt",
            "type": "int"
          },
          {
            "name": "facility",
            "type": "int"
          }
        ],
        "includes": [
          "#include <syslog.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void closelog(void)",
        "name": "closelog",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <syslog.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int setlogmask(int maskpri)",
        "name": "setlogmask",
        "type": "int",
        "args": [
          {
            "name": "maskpri",
            "type": "int"
          }
        ],
        "includes": [
          "#include <syslog.h>",
          "#include <stdarg.h>"
        ]
      }
    ]
  },
  "COMPLEX(3)": {
    "functions": [

    ]
  },
  "CONFSTR(3)": {
    "functions": [
      {
        "prototype": "size_t confstr(int name, char *buf, size_t len)",
        "name": "confstr",
        "type": "size_t",
        "args": [
          {
            "name": "name",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "COPYSIGN(3)": {
    "functions": [
      {
        "prototype": "double copysign(double x, double y)",
        "name": "copysign",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float copysignf(float x, float y)",
        "name": "copysignf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double copysignl(long double x, long double y)",
        "name": "copysignl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "COS(3)": {
    "functions": [
      {
        "prototype": "double cos(double x)",
        "name": "cos",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float cosf(float x)",
        "name": "cosf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double cosl(long double x)",
        "name": "cosl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "COSH(3)": {
    "functions": [
      {
        "prototype": "double cosh(double x)",
        "name": "cosh",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float coshf(float x)",
        "name": "coshf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double coshl(long double x)",
        "name": "coshl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "CSQRT(3)": {
    "functions": [
      {
        "prototype": "double complex csqrt(double complex z)",
        "name": "csqrt",
        "type": "double complex",
        "args": [
          {
            "name": "z",
            "type": "double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "float complex csqrtf(float complex z)",
        "name": "csqrtf",
        "type": "float complex",
        "args": [
          {
            "name": "z",
            "type": "float complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      },
      {
        "prototype": "long double complex csqrtl(long double complex z)",
        "name": "csqrtl",
        "type": "long double complex",
        "args": [
          {
            "name": "z",
            "type": "long double complex"
          }
        ],
        "includes": [
          "#include <complex.h>"
        ]
      }
    ]
  },
  "CTERMID(3)": {
    "functions": [
      {
        "prototype": "char * ctermid(char *buf)",
        "name": "ctermid",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * ctermid_r(char *buf)",
        "name": "ctermid_r",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "CTYPE(3)": {
    "functions": [
      {
        "prototype": "int digittoint(int c)",
        "name": "digittoint",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isalnum(int c)",
        "name": "isalnum",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isalpha(int c)",
        "name": "isalpha",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isascii(int c)",
        "name": "isascii",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int iscntrl(int c)",
        "name": "iscntrl",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isdigit(int c)",
        "name": "isdigit",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isgraph(int c)",
        "name": "isgraph",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int ishexnumber(int c)",
        "name": "ishexnumber",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isideogram(int c)",
        "name": "isideogram",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int islower(int c)",
        "name": "islower",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isnumber(int c)",
        "name": "isnumber",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isphonogram(int c)",
        "name": "isphonogram",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isspecial(int c)",
        "name": "isspecial",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isprint(int c)",
        "name": "isprint",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int ispunct(int c)",
        "name": "ispunct",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isrune(int c)",
        "name": "isrune",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isspace(int c)",
        "name": "isspace",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isupper(int c)",
        "name": "isupper",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isxdigit(int c)",
        "name": "isxdigit",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int toascii(int c)",
        "name": "toascii",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int tolower(int c)",
        "name": "tolower",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int toupper(int c)",
        "name": "toupper",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "CTYPE_L(3)": {
    "functions": [
      {
        "prototype": "int digittoint_l(int c, locale_t loc)",
        "name": "digittoint_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isalnum_l(int c, locale_t loc)",
        "name": "isalnum_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isalpha_l(int c, locale_t loc)",
        "name": "isalpha_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isascii_l(int c, locale_t loc)",
        "name": "isascii_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int iscntrl_l(int c, locale_t loc)",
        "name": "iscntrl_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isdigit_l(int c, locale_t loc)",
        "name": "isdigit_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isgraph_l(int c, locale_t loc)",
        "name": "isgraph_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int ishexnumber_l(int c, locale_t loc)",
        "name": "ishexnumber_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isideogram_l(int c, locale_t loc)",
        "name": "isideogram_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int islower_l(int c, locale_t loc)",
        "name": "islower_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isnumber_l(int c, locale_t loc)",
        "name": "isnumber_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isphonogram_l(int c, locale_t loc)",
        "name": "isphonogram_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isspecial_l(int c, locale_t loc)",
        "name": "isspecial_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isprint_l(int c, locale_t loc)",
        "name": "isprint_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int ispunct_l(int c, locale_t loc)",
        "name": "ispunct_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isrune_l(int c, locale_t loc)",
        "name": "isrune_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isspace_l(int c, locale_t loc)",
        "name": "isspace_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isupper_l(int c, locale_t loc)",
        "name": "isupper_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isxdigit_l(int c, locale_t loc)",
        "name": "isxdigit_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int tolower_l(int c, locale_t loc)",
        "name": "tolower_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int toupper_l(int c, locale_t loc)",
        "name": "toupper_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "DAEMON(3)": {
    "functions": [
      {
        "prototype": "int daemon(int nochdir, int noclose)",
        "name": "daemon",
        "type": "int",
        "args": [
          {
            "name": "nochdir",
            "type": "int"
          },
          {
            "name": "noclose",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "DEVNAME(3)": {
    "functions": [
      {
        "prototype": "char * devname(dev_t dev, mode_t type)",
        "name": "devname",
        "type": "char *",
        "args": [
          {
            "name": "dev",
            "type": "dev_t"
          },
          {
            "name": "type",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * devname_r(dev_t dev, mode_t type, char *buf, int len)",
        "name": "devname_r",
        "type": "char *",
        "args": [
          {
            "name": "dev",
            "type": "dev_t"
          },
          {
            "name": "type",
            "type": "mode_t"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * fdevname(int fd)",
        "name": "fdevname",
        "type": "char *",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * fdevname_r(int fd, char *buf, int len)",
        "name": "fdevname_r",
        "type": "char *",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/stat.h>",
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "DIGITTOINT(3)": {
    "functions": [
      {
        "prototype": "int digittoint(int c)",
        "name": "digittoint",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int digittoint_l(int c, locale_t loc)",
        "name": "digittoint_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "DIRNAME(3)": {
    "functions": [
      {
        "prototype": "char * dirname(const char *path)",
        "name": "dirname",
        "type": "char *",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <libgen.h>"
        ]
      }
    ]
  },
  "DIV(3)": {
    "functions": [
      {
        "prototype": "div_t div(int num, int denom)",
        "name": "div",
        "type": "div_t",
        "args": [
          {
            "name": "num",
            "type": "int"
          },
          {
            "name": "denom",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "DLADDR(3)": {
    "functions": [
      {
        "prototype": "int dladdr(const void *addr, Dl_info *info)",
        "name": "dladdr",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "info",
            "type": "Dl_info *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      }
    ]
  },
  "DLOPEN(3)": {
    "functions": [
      {
        "prototype": "void * dlopen(const char *path, int mode)",
        "name": "dlopen",
        "type": "void *",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * fdlopen(int fd, int mode)",
        "name": "fdlopen",
        "type": "void *",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "void * dlsym(void * restrict handle, const char * restrict symbol)",
        "name": "dlsym",
        "type": "void *",
        "args": [
          {
            "name": "handle",
            "type": "void * restrict"
          },
          {
            "name": "symbol",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "dlfunc_t dlfunc(void * restrict handle, const char * restrict symbol)",
        "name": "dlfunc",
        "type": "dlfunc_t",
        "args": [
          {
            "name": "handle",
            "type": "void * restrict"
          },
          {
            "name": "symbol",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "char * dlerror(void)",
        "name": "dlerror",
        "type": "char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      },
      {
        "prototype": "int dlclose(void *handle)",
        "name": "dlclose",
        "type": "int",
        "args": [
          {
            "name": "handle",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      }
    ]
  },
  "DLINFO(3)": {
    "functions": [
      {
        "prototype": "int dlinfo(void * restrict handle, int request, void * restrict p)",
        "name": "dlinfo",
        "type": "int",
        "args": [
          {
            "name": "handle",
            "type": "void * restrict"
          },
          {
            "name": "request",
            "type": "int"
          },
          {
            "name": "p",
            "type": "void * restrict"
          }
        ],
        "includes": [
          "#include <link.h>",
          "#include <dlfcn.h>"
        ]
      }
    ]
  },
  "DLLOCKINIT(3)": {
    "functions": [
      {
        "prototype": "void dllockinit(void *context, void *(*lock_create)(void *context), void (*rlock_acquire)(void *lock), void (*wlock_acquire)(void *lock), void (*lock_release)(void *lock), void (*lock_destroy)(void *lock), void (*context_destroy)(void *context))",
        "name": "dllockinit",
        "type": "void",
        "args": [
          {
            "name": "context",
            "type": "void *"
          },
          {
            "name": "lock_create",
            "type": "void *(*)(void *context)"
          },
          {
            "name": "rlock_acquire",
            "type": "void (*)(void *lock)"
          },
          {
            "name": "wlock_acquire",
            "type": "void (*)(void *lock)"
          },
          {
            "name": "lock_release",
            "type": "void (*)(void *lock)"
          },
          {
            "name": "lock_destroy",
            "type": "void (*)(void *lock)"
          },
          {
            "name": "context_destroy",
            "type": "void (*)(void *context)"
          }
        ],
        "includes": [
          "#include <dlfcn.h>"
        ]
      }
    ]
  },
  "RESOLVER(3)": {
    "functions": [
      {
        "prototype": "int res_query(const char *dname, int class, int type, u_char *answer, int anslen)",
        "name": "res_query",
        "type": "int",
        "args": [
          {
            "name": "dname",
            "type": "const char *"
          },
          {
            "name": "class",
            "type": "int"
          },
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "answer",
            "type": "u_char *"
          },
          {
            "name": "anslen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int res_search(const char *dname, int class, int type, u_char *answer, int anslen)",
        "name": "res_search",
        "type": "int",
        "args": [
          {
            "name": "dname",
            "type": "const char *"
          },
          {
            "name": "class",
            "type": "int"
          },
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "answer",
            "type": "u_char *"
          },
          {
            "name": "anslen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int res_mkquery(int op, const char *dname, int class, int type, const u_char *data, int datalen, const u_char *newrr_in, u_char *buf, int buflen)",
        "name": "res_mkquery",
        "type": "int",
        "args": [
          {
            "name": "op",
            "type": "int"
          },
          {
            "name": "dname",
            "type": "const char *"
          },
          {
            "name": "class",
            "type": "int"
          },
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "data",
            "type": "const u_char *"
          },
          {
            "name": "datalen",
            "type": "int"
          },
          {
            "name": "newrr_in",
            "type": "const u_char *"
          },
          {
            "name": "buf",
            "type": "u_char *"
          },
          {
            "name": "buflen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int res_send(const u_char *msg, int msglen, u_char *answer, int anslen)",
        "name": "res_send",
        "type": "int",
        "args": [
          {
            "name": "msg",
            "type": "const u_char *"
          },
          {
            "name": "msglen",
            "type": "int"
          },
          {
            "name": "answer",
            "type": "u_char *"
          },
          {
            "name": "anslen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int res_init(void)",
        "name": "res_init",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int dn_comp(const char *exp_dn, u_char *comp_dn, int length, u_char **dnptrs, u_char **lastdnptr)",
        "name": "dn_comp",
        "type": "int",
        "args": [
          {
            "name": "exp_dn",
            "type": "const char *"
          },
          {
            "name": "comp_dn",
            "type": "u_char *"
          },
          {
            "name": "length",
            "type": "int"
          },
          {
            "name": "dnptrs",
            "type": "u_char **"
          },
          {
            "name": "lastdnptr",
            "type": "u_char **"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int dn_expand(const u_char *msg, const u_char *eomorig, const u_char *comp_dn, char *exp_dn, int length)",
        "name": "dn_expand",
        "type": "int",
        "args": [
          {
            "name": "msg",
            "type": "const u_char *"
          },
          {
            "name": "eomorig",
            "type": "const u_char *"
          },
          {
            "name": "comp_dn",
            "type": "const u_char *"
          },
          {
            "name": "exp_dn",
            "type": "char *"
          },
          {
            "name": "length",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "int dn_skipname(const u_char *comp_dn, const u_char *eom)",
        "name": "dn_skipname",
        "type": "int",
        "args": [
          {
            "name": "comp_dn",
            "type": "const u_char *"
          },
          {
            "name": "eom",
            "type": "const u_char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "u_int ns_get16(const u_char *src)",
        "name": "ns_get16",
        "type": "u_int",
        "args": [
          {
            "name": "src",
            "type": "const u_char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "u_long ns_get32(const u_char *src)",
        "name": "ns_get32",
        "type": "u_long",
        "args": [
          {
            "name": "src",
            "type": "const u_char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "void ns_put16(u_int src, u_char *dst)",
        "name": "ns_put16",
        "type": "void",
        "args": [
          {
            "name": "src",
            "type": "u_int"
          },
          {
            "name": "dst",
            "type": "u_char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      },
      {
        "prototype": "void ns_put32(u_long src, u_char *dst)",
        "name": "ns_put32",
        "type": "void",
        "args": [
          {
            "name": "src",
            "type": "u_long"
          },
          {
            "name": "dst",
            "type": "u_char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <netinet/in.h>",
          "#include <arpa/nameser.h>",
          "#include <resolv.h>"
        ]
      }
    ]
  },
  "DUP3(3)": {
    "functions": [
      {
        "prototype": "int dup3(int oldd, int newd, int flags)",
        "name": "dup3",
        "type": "int",
        "args": [
          {
            "name": "oldd",
            "type": "int"
          },
          {
            "name": "newd",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fcntl.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "DUPLOCALE(3)": {
    "functions": [
      {
        "prototype": "locale_t duplocale(locale_t locale)",
        "name": "duplocale",
        "type": "locale_t",
        "args": [
          {
            "name": "locale",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      }
    ]
  },
  "GETFSENT(3)": {
    "functions": [
      {
        "prototype": "struct fstab * getfsent(void)",
        "name": "getfsent",
        "type": "struct fstab *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      },
      {
        "prototype": "struct fstab * getfsspec(const char *spec)",
        "name": "getfsspec",
        "type": "struct fstab *",
        "args": [
          {
            "name": "spec",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      },
      {
        "prototype": "struct fstab * getfsfile(const char *file)",
        "name": "getfsfile",
        "type": "struct fstab *",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      },
      {
        "prototype": "int setfsent(void)",
        "name": "setfsent",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      },
      {
        "prototype": "void endfsent(void)",
        "name": "endfsent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      },
      {
        "prototype": "void setfstab(const char *file)",
        "name": "setfstab",
        "type": "void",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      },
      {
        "prototype": "const char * getfstab(void)",
        "name": "getfstab",
        "type": "const char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fstab.h>"
        ]
      }
    ]
  },
  "GETGRENT(3)": {
    "functions": [
      {
        "prototype": "struct group * getgrent(void)",
        "name": "getgrent",
        "type": "struct group *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int getgrent_r(struct group *grp, char *buffer, size_t bufsize, struct group **result)",
        "name": "getgrent_r",
        "type": "int",
        "args": [
          {
            "name": "grp",
            "type": "struct group *"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct group **"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "struct group * getgrnam(const char *name)",
        "name": "getgrnam",
        "type": "struct group *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int getgrnam_r(const char *name, struct group *grp, char *buffer, size_t bufsize, struct group **result)",
        "name": "getgrnam_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "grp",
            "type": "struct group *"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct group **"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "struct group * getgrgid(gid_t gid)",
        "name": "getgrgid",
        "type": "struct group *",
        "args": [
          {
            "name": "gid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int getgrgid_r(gid_t gid, struct group *grp, char *buffer, size_t bufsize, struct group **result)",
        "name": "getgrgid_r",
        "type": "int",
        "args": [
          {
            "name": "gid",
            "type": "gid_t"
          },
          {
            "name": "grp",
            "type": "struct group *"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct group **"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int setgroupent(int stayopen)",
        "name": "setgroupent",
        "type": "int",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int setgrent(void)",
        "name": "setgrent",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "void endgrent(void)",
        "name": "endgrent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <grp.h>"
        ]
      }
    ]
  },
  "GETHOSTBYNAME(3)": {
    "functions": [
      {
        "prototype": "struct hostent * gethostbyname(const char *name)",
        "name": "gethostbyname",
        "type": "struct hostent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct hostent * gethostbyname2(const char *name, int af)",
        "name": "gethostbyname2",
        "type": "struct hostent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "af",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct hostent * gethostbyaddr(const void *addr, socklen_t len, int af)",
        "name": "gethostbyaddr",
        "type": "struct hostent *",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "socklen_t"
          },
          {
            "name": "af",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct hostent * gethostent(void)",
        "name": "gethostent",
        "type": "struct hostent *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void sethostent(int stayopen)",
        "name": "sethostent",
        "type": "void",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void endhostent(void)",
        "name": "endhostent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void herror(const char *string)",
        "name": "herror",
        "type": "void",
        "args": [
          {
            "name": "string",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "const char * hstrerror(int err)",
        "name": "hstrerror",
        "type": "const char *",
        "args": [
          {
            "name": "err",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      }
    ]
  },
  "GETNETCONFIG(3)": {
    "functions": [
      {
        "prototype": "struct netconfig * getnetconfig(void *handlep)",
        "name": "getnetconfig",
        "type": "struct netconfig *",
        "args": [
          {
            "name": "handlep",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "void * setnetconfig(void)",
        "name": "setnetconfig",
        "type": "void *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "int endnetconfig(void *handlep)",
        "name": "endnetconfig",
        "type": "int",
        "args": [
          {
            "name": "handlep",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "struct netconfig * getnetconfigent(const char *netid)",
        "name": "getnetconfigent",
        "type": "struct netconfig *",
        "args": [
          {
            "name": "netid",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "void freenetconfigent(struct netconfig *netconfigp)",
        "name": "freenetconfigent",
        "type": "void",
        "args": [
          {
            "name": "netconfigp",
            "type": "struct netconfig *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "void nc_perror(const char *msg)",
        "name": "nc_perror",
        "type": "void",
        "args": [
          {
            "name": "msg",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "char * nc_sperror(void)",
        "name": "nc_sperror",
        "type": "char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      }
    ]
  },
  "GETNETENT(3)": {
    "functions": [
      {
        "prototype": "struct netent * getnetent(void)",
        "name": "getnetent",
        "type": "struct netent *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct netent * getnetbyname(const char *name)",
        "name": "getnetbyname",
        "type": "struct netent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct netent * getnetbyaddr(uint32_t net, int type)",
        "name": "getnetbyaddr",
        "type": "struct netent *",
        "args": [
          {
            "name": "net",
            "type": "uint32_t"
          },
          {
            "name": "type",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void setnetent(int stayopen)",
        "name": "setnetent",
        "type": "void",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void endnetent(void)",
        "name": "endnetent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      }
    ]
  },
  "GETNETGRENT(3)": {
    "functions": [
      {
        "prototype": "int getnetgrent(char **host, char **user, char **domain)",
        "name": "getnetgrent",
        "type": "int",
        "args": [
          {
            "name": "host",
            "type": "char **"
          },
          {
            "name": "user",
            "type": "char **"
          },
          {
            "name": "domain",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int getnetgrent_r(char **host, char **user, char **domain, char *buf, size_t bufsize)",
        "name": "getnetgrent_r",
        "type": "int",
        "args": [
          {
            "name": "host",
            "type": "char **"
          },
          {
            "name": "user",
            "type": "char **"
          },
          {
            "name": "domain",
            "type": "char **"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "int innetgr(const char *netgroup, const char *host, const char *user, const char *domain)",
        "name": "innetgr",
        "type": "int",
        "args": [
          {
            "name": "netgroup",
            "type": "const char *"
          },
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "user",
            "type": "const char *"
          },
          {
            "name": "domain",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void setnetgrent(const char *netgroup)",
        "name": "setnetgrent",
        "type": "void",
        "args": [
          {
            "name": "netgroup",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void endnetgrent(void)",
        "name": "endnetgrent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      }
    ]
  },
  "GETNETPATH(3)": {
    "functions": [
      {
        "prototype": "struct netconfig * getnetpath(void *handlep)",
        "name": "getnetpath",
        "type": "struct netconfig *",
        "args": [
          {
            "name": "handlep",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "void * setnetpath(void)",
        "name": "setnetpath",
        "type": "void *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      },
      {
        "prototype": "int endnetpath(void *handlep)",
        "name": "endnetpath",
        "type": "int",
        "args": [
          {
            "name": "handlep",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <netconfig.h>"
        ]
      }
    ]
  },
  "GETPROTOENT(3)": {
    "functions": [
      {
        "prototype": "struct protoent * getprotoent(void)",
        "name": "getprotoent",
        "type": "struct protoent *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct protoent * getprotobyname(const char *name)",
        "name": "getprotobyname",
        "type": "struct protoent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct protoent * getprotobynumber(int proto)",
        "name": "getprotobynumber",
        "type": "struct protoent *",
        "args": [
          {
            "name": "proto",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void setprotoent(int stayopen)",
        "name": "setprotoent",
        "type": "void",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void endprotoent(void)",
        "name": "endprotoent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      }
    ]
  },
  "GETPWENT(3)": {
    "functions": [
      {
        "prototype": "struct passwd * getpwent(void)",
        "name": "getpwent",
        "type": "struct passwd *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int getpwent_r(struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result)",
        "name": "getpwent_r",
        "type": "int",
        "args": [
          {
            "name": "pwd",
            "type": "struct passwd *"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct passwd **"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "struct passwd * getpwnam(const char *login)",
        "name": "getpwnam",
        "type": "struct passwd *",
        "args": [
          {
            "name": "login",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int getpwnam_r(const char *name, struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result)",
        "name": "getpwnam_r",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "pwd",
            "type": "struct passwd *"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct passwd **"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "struct passwd * getpwuid(uid_t uid)",
        "name": "getpwuid",
        "type": "struct passwd *",
        "args": [
          {
            "name": "uid",
            "type": "uid_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int getpwuid_r(uid_t uid, struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result)",
        "name": "getpwuid_r",
        "type": "int",
        "args": [
          {
            "name": "uid",
            "type": "uid_t"
          },
          {
            "name": "pwd",
            "type": "struct passwd *"
          },
          {
            "name": "buffer",
            "type": "char *"
          },
          {
            "name": "bufsize",
            "type": "size_t"
          },
          {
            "name": "result",
            "type": "struct passwd **"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int setpassent(int stayopen)",
        "name": "setpassent",
        "type": "int",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "void setpwent(void)",
        "name": "setpwent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "void endpwent(void)",
        "name": "endpwent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <pwd.h>"
        ]
      }
    ]
  },
  "GETRPCENT(3)": {
    "functions": [
      {
        "prototype": "struct rpcent * getrpcent(void)",
        "name": "getrpcent",
        "type": "struct rpcent *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "struct rpcent * getrpcbyname(const char *name)",
        "name": "getrpcbyname",
        "type": "struct rpcent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "struct rpcent * getrpcbynumber(int number)",
        "name": "getrpcbynumber",
        "type": "struct rpcent *",
        "args": [
          {
            "name": "number",
            "type": "int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void setrpcent(int stayopen)",
        "name": "setrpcent",
        "type": "void",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void endrpcent(void)",
        "name": "endrpcent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "GETSERVENT(3)": {
    "functions": [
      {
        "prototype": "struct servent * getservent()",
        "name": "getservent",
        "type": "struct servent *",
        "args": [

        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct servent * getservbyname(const char *name, const char *proto)",
        "name": "getservbyname",
        "type": "struct servent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "proto",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct servent * getservbyport(int port, const char *proto)",
        "name": "getservbyport",
        "type": "struct servent *",
        "args": [
          {
            "name": "port",
            "type": "int"
          },
          {
            "name": "proto",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void setservent(int stayopen)",
        "name": "setservent",
        "type": "void",
        "args": [
          {
            "name": "stayopen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void endservent(void)",
        "name": "endservent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <netdb.h>"
        ]
      }
    ]
  },
  "GETTTYENT(3)": {
    "functions": [
      {
        "prototype": "struct ttyent * getttyent(void)",
        "name": "getttyent",
        "type": "struct ttyent *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ttyent.h>"
        ]
      },
      {
        "prototype": "struct ttyent * getttynam(const char *name)",
        "name": "getttynam",
        "type": "struct ttyent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <ttyent.h>"
        ]
      },
      {
        "prototype": "int setttyent(void)",
        "name": "setttyent",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ttyent.h>"
        ]
      },
      {
        "prototype": "int endttyent(void)",
        "name": "endttyent",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ttyent.h>"
        ]
      },
      {
        "prototype": "int isdialuptty(const char *name)",
        "name": "isdialuptty",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <ttyent.h>"
        ]
      },
      {
        "prototype": "int isnettty(const char *name)",
        "name": "isnettty",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <ttyent.h>"
        ]
      }
    ]
  },
  "GETUSERSHELL(3)": {
    "functions": [
      {
        "prototype": "char * getusershell(void)",
        "name": "getusershell",
        "type": "char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "void setusershell(void)",
        "name": "setusershell",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "void endusershell(void)",
        "name": "endusershell",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETUTXENT(3)": {
    "functions": [
      {
        "prototype": "void endutxent(void)",
        "name": "endutxent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "struct utmpx * getutxent(void)",
        "name": "getutxent",
        "type": "struct utmpx *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "struct utmpx * getutxid(const struct utmpx *id)",
        "name": "getutxid",
        "type": "struct utmpx *",
        "args": [
          {
            "name": "id",
            "type": "const struct utmpx *"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "struct utmpx * getutxline(const struct utmpx *line)",
        "name": "getutxline",
        "type": "struct utmpx *",
        "args": [
          {
            "name": "line",
            "type": "const struct utmpx *"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "struct utmpx * getutxuser(const char *user)",
        "name": "getutxuser",
        "type": "struct utmpx *",
        "args": [
          {
            "name": "user",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "struct utmpx * pututxline(const struct utmpx *utmpx)",
        "name": "pututxline",
        "type": "struct utmpx *",
        "args": [
          {
            "name": "utmpx",
            "type": "const struct utmpx *"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "int setutxdb(int type, const char *file)",
        "name": "setutxdb",
        "type": "int",
        "args": [
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "file",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      },
      {
        "prototype": "void setutxent(void)",
        "name": "setutxent",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <utmpx.h>"
        ]
      }
    ]
  },
  "ERF(3)": {
    "functions": [
      {
        "prototype": "double erf(double x)",
        "name": "erf",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float erff(float x)",
        "name": "erff",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double erfl(long double x)",
        "name": "erfl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double erfc(double x)",
        "name": "erfc",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float erfcf(float x)",
        "name": "erfcf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double erfcl(long double x)",
        "name": "erfcl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "ERR(3)": {
    "functions": [
      {
        "prototype": "void err(int eval, const char *fmt, ...)",
        "name": "err",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void err_set_exit(void (*exitf)(int))",
        "name": "err_set_exit",
        "type": "void",
        "args": [
          {
            "name": "exitf",
            "type": "void (*)(int)"
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void err_set_file(void *vfp)",
        "name": "err_set_file",
        "type": "void",
        "args": [
          {
            "name": "vfp",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void errc(int eval, int code, const char *fmt, ...)",
        "name": "errc",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "code",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void errx(int eval, const char *fmt, ...)",
        "name": "errx",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void warn(const char *fmt, ...)",
        "name": "warn",
        "type": "void",
        "args": [
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void warnc(int code, const char *fmt, ...)",
        "name": "warnc",
        "type": "void",
        "args": [
          {
            "name": "code",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void warnx(const char *fmt, ...)",
        "name": "warnx",
        "type": "void",
        "args": [
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <err.h>"
        ]
      },
      {
        "prototype": "void verr(int eval, const char *fmt, va_list args)",
        "name": "verr",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <err.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void verrc(int eval, int code, const char *fmt, va_list args)",
        "name": "verrc",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "code",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <err.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void verrx(int eval, const char *fmt, va_list args)",
        "name": "verrx",
        "type": "void",
        "args": [
          {
            "name": "eval",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <err.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void vwarn(const char *fmt, va_list args)",
        "name": "vwarn",
        "type": "void",
        "args": [
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <err.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void vwarnc(int code, const char *fmt, va_list args)",
        "name": "vwarnc",
        "type": "void",
        "args": [
          {
            "name": "code",
            "type": "int"
          },
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <err.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "void vwarnx(const char *fmt, va_list args)",
        "name": "vwarnx",
        "type": "void",
        "args": [
          {
            "name": "fmt",
            "type": "const char *"
          },
          {
            "name": "args",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <err.h>",
          "#include <stdarg.h>"
        ]
      }
    ]
  },
  "ETHERS(3)": {
    "functions": [
      {
        "prototype": "int ether_line(const char *l, struct ether_addr *e, char *hostname)",
        "name": "ether_line",
        "type": "int",
        "args": [
          {
            "name": "l",
            "type": "const char *"
          },
          {
            "name": "e",
            "type": "struct ether_addr *"
          },
          {
            "name": "hostname",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      },
      {
        "prototype": "struct ether_addr * ether_aton(const char *a)",
        "name": "ether_aton",
        "type": "struct ether_addr *",
        "args": [
          {
            "name": "a",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      },
      {
        "prototype": "struct ether_addr * ether_aton_r(const char *a, struct ether_addr *e)",
        "name": "ether_aton_r",
        "type": "struct ether_addr *",
        "args": [
          {
            "name": "a",
            "type": "const char *"
          },
          {
            "name": "e",
            "type": "struct ether_addr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      },
      {
        "prototype": "char * ether_ntoa(const struct ether_addr *n)",
        "name": "ether_ntoa",
        "type": "char *",
        "args": [
          {
            "name": "n",
            "type": "const struct ether_addr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      },
      {
        "prototype": "char * ether_ntoa_r(const struct ether_addr *n, char *buf)",
        "name": "ether_ntoa_r",
        "type": "char *",
        "args": [
          {
            "name": "n",
            "type": "const struct ether_addr *"
          },
          {
            "name": "buf",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      },
      {
        "prototype": "int ether_ntohost(char *hostname, const struct ether_addr *e)",
        "name": "ether_ntohost",
        "type": "int",
        "args": [
          {
            "name": "hostname",
            "type": "char *"
          },
          {
            "name": "e",
            "type": "const struct ether_addr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      },
      {
        "prototype": "int ether_hostton(const char *hostname, struct ether_addr *e)",
        "name": "ether_hostton",
        "type": "int",
        "args": [
          {
            "name": "hostname",
            "type": "const char *"
          },
          {
            "name": "e",
            "type": "struct ether_addr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/ethernet.h>"
        ]
      }
    ]
  },
  "EUI64(3)": {
    "functions": [
      {
        "prototype": "int eui64_aton(const char *a, struct eui64 *e)",
        "name": "eui64_aton",
        "type": "int",
        "args": [
          {
            "name": "a",
            "type": "const char *"
          },
          {
            "name": "e",
            "type": "struct eui64 *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/eui64.h>"
        ]
      },
      {
        "prototype": "int eui64_ntoa(const struct eui64 *id, char *a, size_t len)",
        "name": "eui64_ntoa",
        "type": "int",
        "args": [
          {
            "name": "id",
            "type": "const struct eui64 *"
          },
          {
            "name": "a",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/eui64.h>"
        ]
      },
      {
        "prototype": "int eui64_ntohost(char *hostname, size_t len, const struct eui64 *id)",
        "name": "eui64_ntohost",
        "type": "int",
        "args": [
          {
            "name": "hostname",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "id",
            "type": "const struct eui64 *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/eui64.h>"
        ]
      },
      {
        "prototype": "int eui64_hostton(const char *hostname, struct eui64 *id)",
        "name": "eui64_hostton",
        "type": "int",
        "args": [
          {
            "name": "hostname",
            "type": "const char *"
          },
          {
            "name": "id",
            "type": "struct eui64 *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/eui64.h>"
        ]
      }
    ]
  },
  "EXEC(3)": {
    "functions": [
      {
        "prototype": "int execl(const char *path, const char *arg, ..., /*, (char *)0, */)",
        "name": "execl",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "arg",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int execlp(const char *file, const char *arg, ..., /*, (char *)0, */)",
        "name": "execlp",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          },
          {
            "name": "arg",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int execle(const char *path, const char *arg, ..., /* (char *)0 char *const envp[] */)",
        "name": "execle",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "arg",
            "type": "const char *"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int exect(const char *path, char *const argv[], char *const envp[])",
        "name": "exect",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "argv",
            "type": "char *const []"
          },
          {
            "name": "envp",
            "type": "char *const []"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int execv(const char *path, char *const argv[])",
        "name": "execv",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "argv",
            "type": "char *const []"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int execvp(const char *file, char *const argv[])",
        "name": "execvp",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          },
          {
            "name": "argv",
            "type": "char *const []"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int execvP(const char *file, const char *search_path, char *const argv[])",
        "name": "execvP",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          },
          {
            "name": "search_path",
            "type": "const char *"
          },
          {
            "name": "argv",
            "type": "char *const []"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "EXP(3)": {
    "functions": [
      {
        "prototype": "double exp(double x)",
        "name": "exp",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float expf(float x)",
        "name": "expf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double expl(long double x)",
        "name": "expl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double exp2(double x)",
        "name": "exp2",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float exp2f(float x)",
        "name": "exp2f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double exp2l(long double x)",
        "name": "exp2l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double expm1(double x)",
        "name": "expm1",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float expm1f(float x)",
        "name": "expm1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double expm1l(long double x)",
        "name": "expm1l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double pow(double x, double y)",
        "name": "pow",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float powf(float x, float y)",
        "name": "powf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double powl(long double x, long double y)",
        "name": "powl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FABS(3)": {
    "functions": [
      {
        "prototype": "double fabs(double x)",
        "name": "fabs",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float fabsf(float x)",
        "name": "fabsf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double fabsl(long double x)",
        "name": "fabsl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FCLOSE(3)": {
    "functions": [
      {
        "prototype": "int fclose(FILE *stream)",
        "name": "fclose",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fdclose(FILE *stream, int *fdp)",
        "name": "fdclose",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "fdp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void fcloseall(void)",
        "name": "fcloseall",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FDIM(3)": {
    "functions": [
      {
        "prototype": "double fdim(double x, double y)",
        "name": "fdim",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float fdimf(float x, float y)",
        "name": "fdimf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double fdiml(long double x, long double y)",
        "name": "fdiml",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FOPEN(3)": {
    "functions": [
      {
        "prototype": "FILE * fopen(const char * restrict path, const char * restrict mode)",
        "name": "fopen",
        "type": "FILE *",
        "args": [
          {
            "name": "path",
            "type": "const char * restrict"
          },
          {
            "name": "mode",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "FILE * fdopen(int fildes, const char *mode)",
        "name": "fdopen",
        "type": "FILE *",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "mode",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "FILE * freopen(const char *path, const char *mode, FILE *stream)",
        "name": "freopen",
        "type": "FILE *",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "mode",
            "type": "const char *"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "FILE * fmemopen(void *restrict *buf, size_t size, const char * restrict mode)",
        "name": "fmemopen",
        "type": "FILE *",
        "args": [
          {
            "name": "buf",
            "type": "void *restrict *"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "mode",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FEATURE_PRESENT(3)": {
    "functions": [
      {
        "prototype": "int feature_present(const char *feature)",
        "name": "feature_present",
        "type": "int",
        "args": [
          {
            "name": "feature",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "FECLEAREXCEPT(3)": {
    "functions": [
      {
        "prototype": "int feclearexcept(int excepts)",
        "name": "feclearexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetexceptflag(fexcept_t *flagp, int excepts)",
        "name": "fegetexceptflag",
        "type": "int",
        "args": [
          {
            "name": "flagp",
            "type": "fexcept_t *"
          },
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feraiseexcept(int excepts)",
        "name": "feraiseexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fesetexceptflag(const fexcept_t *flagp, int excepts)",
        "name": "fesetexceptflag",
        "type": "int",
        "args": [
          {
            "name": "flagp",
            "type": "const fexcept_t *"
          },
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fetestexcept(int excepts)",
        "name": "fetestexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      }
    ]
  },
  "FEENABLEEXCEPT(3)": {
    "functions": [
      {
        "prototype": "int feenableexcept(int excepts)",
        "name": "feenableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fedisableexcept(int excepts)",
        "name": "fedisableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetexcept(void)",
        "name": "fegetexcept",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      }
    ]
  },
  "FEGETENV(3)": {
    "functions": [
      {
        "prototype": "int fegetenv(fenv_t *envp)",
        "name": "fegetenv",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feholdexcept(fenv_t *envp)",
        "name": "feholdexcept",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fesetenv(const fenv_t *envp)",
        "name": "fesetenv",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "const fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feupdateenv(const fenv_t *envp)",
        "name": "feupdateenv",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "const fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      }
    ]
  },
  "FEGETROUND(3)": {
    "functions": [
      {
        "prototype": "int fegetround(void)",
        "name": "fegetround",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fesetround(int round)",
        "name": "fesetround",
        "type": "int",
        "args": [
          {
            "name": "round",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      }
    ]
  },
  "FENV(3)": {
    "functions": [
      {
        "prototype": "int feclearexcept(int excepts)",
        "name": "feclearexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetexceptflag(fexcept_t *flagp, int excepts)",
        "name": "fegetexceptflag",
        "type": "int",
        "args": [
          {
            "name": "flagp",
            "type": "fexcept_t *"
          },
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feraiseexcept(int excepts)",
        "name": "feraiseexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fesetexceptflag(const fexcept_t *flagp, int excepts)",
        "name": "fesetexceptflag",
        "type": "int",
        "args": [
          {
            "name": "flagp",
            "type": "const fexcept_t *"
          },
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fetestexcept(int excepts)",
        "name": "fetestexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetround(void)",
        "name": "fegetround",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fesetround(int round)",
        "name": "fesetround",
        "type": "int",
        "args": [
          {
            "name": "round",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetenv(fenv_t *envp)",
        "name": "fegetenv",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feholdexcept(fenv_t *envp)",
        "name": "feholdexcept",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fesetenv(const fenv_t *envp)",
        "name": "fesetenv",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "const fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feupdateenv(const fenv_t *envp)",
        "name": "feupdateenv",
        "type": "int",
        "args": [
          {
            "name": "envp",
            "type": "const fenv_t *"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int feenableexcept(int excepts)",
        "name": "feenableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fedisableexcept(int excepts)",
        "name": "fedisableexcept",
        "type": "int",
        "args": [
          {
            "name": "excepts",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      },
      {
        "prototype": "int fegetexcept(void)",
        "name": "fegetexcept",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <fenv.h>"
        ]
      }
    ]
  },
  "STRTOFFLAGS(3)": {
    "functions": [
      {
        "prototype": "char * fflagstostr(u_long flags)",
        "name": "fflagstostr",
        "type": "char *",
        "args": [
          {
            "name": "flags",
            "type": "u_long"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int strtofflags(char **stringp, u_long *setp, u_long *clrp)",
        "name": "strtofflags",
        "type": "int",
        "args": [
          {
            "name": "stringp",
            "type": "char **"
          },
          {
            "name": "setp",
            "type": "u_long *"
          },
          {
            "name": "clrp",
            "type": "u_long *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "FFLUSH(3)": {
    "functions": [
      {
        "prototype": "int fflush(FILE *stream)",
        "name": "fflush",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fpurge(FILE *stream)",
        "name": "fpurge",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FFS(3)": {
    "functions": [
      {
        "prototype": "int ffs(int value)",
        "name": "ffs",
        "type": "int",
        "args": [
          {
            "name": "value",
            "type": "int"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int ffsl(long value)",
        "name": "ffsl",
        "type": "int",
        "args": [
          {
            "name": "value",
            "type": "long"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int ffsll(long long value)",
        "name": "ffsll",
        "type": "int",
        "args": [
          {
            "name": "value",
            "type": "long long"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int fls(int value)",
        "name": "fls",
        "type": "int",
        "args": [
          {
            "name": "value",
            "type": "int"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int flsl(long value)",
        "name": "flsl",
        "type": "int",
        "args": [
          {
            "name": "value",
            "type": "long"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int flsll(long long value)",
        "name": "flsll",
        "type": "int",
        "args": [
          {
            "name": "value",
            "type": "long long"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      }
    ]
  },
  "GETC(3)": {
    "functions": [
      {
        "prototype": "int fgetc(FILE *stream)",
        "name": "fgetc",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int getc(FILE *stream)",
        "name": "getc",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int getc_unlocked(FILE *stream)",
        "name": "getc_unlocked",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int getchar(void)",
        "name": "getchar",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int getchar_unlocked(void)",
        "name": "getchar_unlocked",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int getw(FILE *stream)",
        "name": "getw",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FGETLN(3)": {
    "functions": [
      {
        "prototype": "char * fgetln(FILE *stream, size_t *len)",
        "name": "fgetln",
        "type": "char *",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "len",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FSEEK(3)": {
    "functions": [
      {
        "prototype": "int fseek(FILE *stream, long offset, int whence)",
        "name": "fseek",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "offset",
            "type": "long"
          },
          {
            "name": "whence",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "long ftell(FILE *stream)",
        "name": "ftell",
        "type": "long",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void rewind(FILE *stream)",
        "name": "rewind",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fgetpos(FILE * restrict stream, fpos_t * restrict pos)",
        "name": "fgetpos",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "pos",
            "type": "fpos_t * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fsetpos(FILE *stream, const fpos_t *pos)",
        "name": "fsetpos",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "pos",
            "type": "const fpos_t *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fseeko(FILE *stream, off_t offset, int whence)",
        "name": "fseeko",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "offset",
            "type": "off_t"
          },
          {
            "name": "whence",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <sys/types.h>"
        ]
      },
      {
        "prototype": "off_t ftello(FILE *stream)",
        "name": "ftello",
        "type": "off_t",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <sys/types.h>"
        ]
      }
    ]
  },
  "FGETS(3)": {
    "functions": [
      {
        "prototype": "char * fgets(char * restrict str, int size, FILE * restrict stream)",
        "name": "fgets",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "char * restrict"
          },
          {
            "name": "size",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * gets_s(char *str, rsize_t size)",
        "name": "gets_s",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "rsize_t"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * gets(char *str)",
        "name": "gets",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "GETWC(3)": {
    "functions": [
      {
        "prototype": "wint_t fgetwc(FILE *stream)",
        "name": "fgetwc",
        "type": "wint_t",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wint_t getwc(FILE *stream)",
        "name": "getwc",
        "type": "wint_t",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wint_t getwchar(void)",
        "name": "getwchar",
        "type": "wint_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "FGETWLN(3)": {
    "functions": [
      {
        "prototype": "wchar_t * fgetwln(FILE * restrict stream, size_t * restrict len)",
        "name": "fgetwln",
        "type": "wchar_t *",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "len",
            "type": "size_t * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "FGETWS(3)": {
    "functions": [
      {
        "prototype": "wchar_t * fgetws(wchar_t * restrict ws, int n, FILE * restrict fp)",
        "name": "fgetws",
        "type": "wchar_t *",
        "args": [
          {
            "name": "ws",
            "type": "wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "int"
          },
          {
            "name": "fp",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "FPCLASSIFY(3)": {
    "functions": [

    ]
  },
  "FLOCKFILE(3)": {
    "functions": [
      {
        "prototype": "void flockfile(FILE *stream)",
        "name": "flockfile",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int ftrylockfile(FILE *stream)",
        "name": "ftrylockfile",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void funlockfile(FILE *stream)",
        "name": "funlockfile",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FLOOR(3)": {
    "functions": [
      {
        "prototype": "double floor(double x)",
        "name": "floor",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float floorf(float x)",
        "name": "floorf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double floorl(long double x)",
        "name": "floorl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FMA(3)": {
    "functions": [
      {
        "prototype": "double fma(double x, double y, double z)",
        "name": "fma",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          },
          {
            "name": "z",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float fmaf(float x, float y, float z)",
        "name": "fmaf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          },
          {
            "name": "z",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double fmal(long double x, long double y, long double z)",
        "name": "fmal",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          },
          {
            "name": "z",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FMAX(3)": {
    "functions": [
      {
        "prototype": "double fmax(double x, double y)",
        "name": "fmax",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float fmaxf(float x, float y)",
        "name": "fmaxf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double fmaxl(long double x, long double y)",
        "name": "fmaxl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double fmin(double x, double y)",
        "name": "fmin",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float fminf(float x, float y)",
        "name": "fminf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double fminl(long double x, long double y)",
        "name": "fminl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FMOD(3)": {
    "functions": [
      {
        "prototype": "double fmod(double x, double y)",
        "name": "fmod",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float fmodf(float x, float y)",
        "name": "fmodf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double fmodl(long double x, long double y)",
        "name": "fmodl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FMTCHECK(3)": {
    "functions": [
      {
        "prototype": "const char * fmtcheck(const char *fmt_suspect, const char *fmt_default)",
        "name": "fmtcheck",
        "type": "const char *",
        "args": [
          {
            "name": "fmt_suspect",
            "type": "const char *"
          },
          {
            "name": "fmt_default",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FMTMSG(3)": {
    "functions": [
      {
        "prototype": "int fmtmsg(long classification, const char *label, int severity, const char *text, const char *action, const char *tag)",
        "name": "fmtmsg",
        "type": "int",
        "args": [
          {
            "name": "classification",
            "type": "long"
          },
          {
            "name": "label",
            "type": "const char *"
          },
          {
            "name": "severity",
            "type": "int"
          },
          {
            "name": "text",
            "type": "const char *"
          },
          {
            "name": "action",
            "type": "const char *"
          },
          {
            "name": "tag",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <fmtmsg.h>"
        ]
      }
    ]
  },
  "FNMATCH(3)": {
    "functions": [
      {
        "prototype": "int fnmatch(const char *pattern, const char *string, int flags)",
        "name": "fnmatch",
        "type": "int",
        "args": [
          {
            "name": "pattern",
            "type": "const char *"
          },
          {
            "name": "string",
            "type": "const char *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fnmatch.h>"
        ]
      }
    ]
  },
  "FOPENCOOKIE(3)": {
    "functions": [
      {
        "prototype": "FILE * fopencookie(void *cookie, const char *mode, cookie_io_functions_t io_funcs)",
        "name": "fopencookie",
        "type": "FILE *",
        "args": [
          {
            "name": "cookie",
            "type": "void *"
          },
          {
            "name": "mode",
            "type": "const char *"
          },
          {
            "name": "io_funcs",
            "type": "cookie_io_functions_t"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "PUTC(3)": {
    "functions": [
      {
        "prototype": "int fputc(int c, FILE *stream)",
        "name": "fputc",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int putc(int c, FILE *stream)",
        "name": "putc",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int putc_unlocked(int c, FILE *stream)",
        "name": "putc_unlocked",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int putchar(int c)",
        "name": "putchar",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int putchar_unlocked(int c)",
        "name": "putchar_unlocked",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int putw(int w, FILE *stream)",
        "name": "putw",
        "type": "int",
        "args": [
          {
            "name": "w",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "FPUTS(3)": {
    "functions": [
      {
        "prototype": "int fputs(const char *str, FILE *stream)",
        "name": "fputs",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const char *"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int puts(const char *str)",
        "name": "puts",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "PUTWC(3)": {
    "functions": [
      {
        "prototype": "wint_t fputwc(wchar_t wc, FILE *stream)",
        "name": "fputwc",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wchar_t"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wint_t putwc(wchar_t wc, FILE *stream)",
        "name": "putwc",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wchar_t"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wint_t putwchar(wchar_t wc)",
        "name": "putwchar",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wchar_t"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "FPUTWS(3)": {
    "functions": [
      {
        "prototype": "int fputws(const wchar_t * restrict ws, FILE * restrict fp)",
        "name": "fputws",
        "type": "int",
        "args": [
          {
            "name": "ws",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "fp",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "FREAD(3)": {
    "functions": [
      {
        "prototype": "size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream)",
        "name": "fread",
        "type": "size_t",
        "args": [
          {
            "name": "ptr",
            "type": "void * restrict"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "stream",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream)",
        "name": "fwrite",
        "type": "size_t",
        "args": [
          {
            "name": "ptr",
            "type": "const void * restrict"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "stream",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "GETIPNODEBYNAME(3)": {
    "functions": [
      {
        "prototype": "struct hostent * getipnodebyname(const char *name, int af, int flags, int *error_num)",
        "name": "getipnodebyname",
        "type": "struct hostent *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "error_num",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "struct hostent * getipnodebyaddr(const void *src, size_t len, int af, int *error_num)",
        "name": "getipnodebyaddr",
        "type": "struct hostent *",
        "args": [
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "error_num",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netdb.h>"
        ]
      },
      {
        "prototype": "void freehostent(struct hostent *ptr)",
        "name": "freehostent",
        "type": "void",
        "args": [
          {
            "name": "ptr",
            "type": "struct hostent *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netdb.h>"
        ]
      }
    ]
  },
  "FREELOCALE(3)": {
    "functions": [
      {
        "prototype": "int freelocale(locale_t locale)",
        "name": "freelocale",
        "type": "int",
        "args": [
          {
            "name": "locale",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      }
    ]
  },
  "FREXP(3)": {
    "functions": [
      {
        "prototype": "double frexp(double value, int *exp)",
        "name": "frexp",
        "type": "double",
        "args": [
          {
            "name": "value",
            "type": "double"
          },
          {
            "name": "exp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float frexpf(float value, int *exp)",
        "name": "frexpf",
        "type": "float",
        "args": [
          {
            "name": "value",
            "type": "float"
          },
          {
            "name": "exp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double frexpl(long double value, int *exp)",
        "name": "frexpl",
        "type": "long double",
        "args": [
          {
            "name": "value",
            "type": "long double"
          },
          {
            "name": "exp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "FUNOPEN(3)": {
    "functions": [
      {
        "prototype": "FILE * funopen(const void *cookie, int (*readfn)(void *, char *, int), int (*writefn)(void *, const char *, int), fpos_t (*seekfn)(void *, fpos_t, int), int (*closefn)(void *))",
        "name": "funopen",
        "type": "FILE *",
        "args": [
          {
            "name": "cookie",
            "type": "const void *"
          },
          {
            "name": "readfn",
            "type": "int (*)(void *, char *, int)"
          },
          {
            "name": "writefn",
            "type": "int (*)(void *, const char *, int)"
          },
          {
            "name": "seekfn",
            "type": "fpos_t (*)(void *, fpos_t, int)"
          },
          {
            "name": "closefn",
            "type": "int (*)(void *)"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "FILE * fropen(void *cookie, int (*readfn)(void *, char *, int))",
        "name": "fropen",
        "type": "FILE *",
        "args": [
          {
            "name": "cookie",
            "type": "void *"
          },
          {
            "name": "readfn",
            "type": "int (*)(void *, char *, int)"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "FILE * fwopen(void *cookie, int (*writefn)(void *, const char *, int))",
        "name": "fwopen",
        "type": "FILE *",
        "args": [
          {
            "name": "cookie",
            "type": "void *"
          },
          {
            "name": "writefn",
            "type": "int (*)(void *, const char *, int)"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "SCANF(3)": {
    "functions": [
      {
        "prototype": "int scanf(const char * restrict format, ...)",
        "name": "scanf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int fscanf(FILE * restrict stream, const char * restrict format, ...)",
        "name": "fscanf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int sscanf(const char * restrict str, const char * restrict format, ...)",
        "name": "sscanf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const char * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int vscanf(const char * restrict format, va_list ap)",
        "name": "vscanf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vsscanf(const char * restrict str, const char * restrict format, va_list ap)",
        "name": "vsscanf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const char * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vfscanf(FILE * restrict stream, const char * restrict format, va_list ap)",
        "name": "vfscanf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <stdarg.h>"
        ]
      }
    ]
  },
  "SCANF_L(3)": {
    "functions": [
      {
        "prototype": "int scanf_l(locale_t loc, const char * restrict format, ...)",
        "name": "scanf_l",
        "type": "int",
        "args": [
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int fscanf_l(FILE * restrict stream, locale_t loc, const char * restrict format, ...)",
        "name": "fscanf_l",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int sscanf_l(const char * restrict str, locale_t loc, const char * restrict format, ...)",
        "name": "sscanf_l",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const char * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vfscanf_l(FILE * restrict stream, locale_t loc, const char * restrict format, va_list ap)",
        "name": "vfscanf_l",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vscanf_l(locale_t loc, const char * restrict format, va_list ap)",
        "name": "vscanf_l",
        "type": "int",
        "args": [
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int vsscanf_l(const char * restrict str, locale_t loc, const char * restrict format, va_list ap)",
        "name": "vsscanf_l",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const char * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "STATVFS(3)": {
    "functions": [
      {
        "prototype": "int statvfs(const char * restrict path, struct statvfs * restrict buf)",
        "name": "statvfs",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char * restrict"
          },
          {
            "name": "buf",
            "type": "struct statvfs * restrict"
          }
        ],
        "includes": [
          "#include <sys/statvfs.h>"
        ]
      },
      {
        "prototype": "int fstatvfs(int fd, struct statvfs *buf)",
        "name": "fstatvfs",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "struct statvfs *"
          }
        ],
        "includes": [
          "#include <sys/statvfs.h>"
        ]
      }
    ]
  },
  "FTOK(3)": {
    "functions": [
      {
        "prototype": "key_t ftok(const char *path, int id)",
        "name": "ftok",
        "type": "key_t",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "id",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/ipc.h>"
        ]
      }
    ]
  },
  "FTS(3)": {
    "functions": [
      {
        "prototype": "FTS * fts_open(char * const *path_argv, int options, int (*compar)(const FTSENT * const *, const FTSENT * const *))",
        "name": "fts_open",
        "type": "FTS *",
        "args": [
          {
            "name": "path_argv",
            "type": "char * const *"
          },
          {
            "name": "options",
            "type": "int"
          },
          {
            "name": "compar",
            "type": "int (*)(const FTSENT * const *, const FTSENT * const *)"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "FTSENT * fts_read(FTS *ftsp)",
        "name": "fts_read",
        "type": "FTSENT *",
        "args": [
          {
            "name": "ftsp",
            "type": "FTS *"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "FTSENT * fts_children(FTS *ftsp, int options)",
        "name": "fts_children",
        "type": "FTSENT *",
        "args": [
          {
            "name": "ftsp",
            "type": "FTS *"
          },
          {
            "name": "options",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "int fts_set(FTS *ftsp, FTSENT *f, int options)",
        "name": "fts_set",
        "type": "int",
        "args": [
          {
            "name": "ftsp",
            "type": "FTS *"
          },
          {
            "name": "f",
            "type": "FTSENT *"
          },
          {
            "name": "options",
            "type": "int"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "void fts_set_clientptr(FTS *ftsp, void *clientdata)",
        "name": "fts_set_clientptr",
        "type": "void",
        "args": [
          {
            "name": "ftsp",
            "type": "FTS *"
          },
          {
            "name": "clientdata",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "void * fts_get_clientptr(FTS *ftsp)",
        "name": "fts_get_clientptr",
        "type": "void *",
        "args": [
          {
            "name": "ftsp",
            "type": "FTS *"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "FTS * fts_get_stream(FTSENT *f)",
        "name": "fts_get_stream",
        "type": "FTS *",
        "args": [
          {
            "name": "f",
            "type": "FTSENT *"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      },
      {
        "prototype": "int fts_close(FTS *ftsp)",
        "name": "fts_close",
        "type": "int",
        "args": [
          {
            "name": "ftsp",
            "type": "FTS *"
          }
        ],
        "includes": [
          "#include <fts.h>"
        ]
      }
    ]
  },
  "FWIDE(3)": {
    "functions": [
      {
        "prototype": "int fwide(FILE *stream, int mode)",
        "name": "fwide",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WPRINTF(3)": {
    "functions": [
      {
        "prototype": "int fwprintf(FILE * restrict stream, const wchar_t * restrict format, ...)",
        "name": "fwprintf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int swprintf(wchar_t * restrict ws, size_t n, const wchar_t * restrict format, ...)",
        "name": "swprintf",
        "type": "int",
        "args": [
          {
            "name": "ws",
            "type": "wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wprintf(const wchar_t * restrict format, ...)",
        "name": "wprintf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int vfwprintf(FILE * restrict stream, const wchar_t * restrict, va_list ap)",
        "name": "vfwprintf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "_arg_2",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vswprintf(wchar_t * restrict ws, size_t n, const wchar_t *restrict format, va_list ap)",
        "name": "vswprintf",
        "type": "int",
        "args": [
          {
            "name": "ws",
            "type": "wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const wchar_t *restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vwprintf(const wchar_t * restrict format, va_list ap)",
        "name": "vwprintf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>",
          "#include <stdarg.h>"
        ]
      }
    ]
  },
  "WSCANF(3)": {
    "functions": [
      {
        "prototype": "int wscanf(const wchar_t * restrict format, ...)",
        "name": "wscanf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int fwscanf(FILE * restrict stream, const wchar_t * restrict format, ...)",
        "name": "fwscanf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int swscanf(const wchar_t * restrict str, const wchar_t * restrict format, ...)",
        "name": "swscanf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int vwscanf(const wchar_t * restrict format, va_list ap)",
        "name": "vwscanf",
        "type": "int",
        "args": [
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vswscanf(const wchar_t * restrict str, const wchar_t * restrict format, va_list ap)",
        "name": "vswscanf",
        "type": "int",
        "args": [
          {
            "name": "str",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>",
          "#include <stdarg.h>"
        ]
      },
      {
        "prototype": "int vfwscanf(FILE * restrict stream, const wchar_t * restrict format, va_list ap)",
        "name": "vfwscanf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "ap",
            "type": "va_list"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>",
          "#include <stdarg.h>"
        ]
      }
    ]
  },
  "LGAMMA(3)": {
    "functions": [
      {
        "prototype": "double lgamma(double x)",
        "name": "lgamma",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double lgamma_r(double x, int *signgamp)",
        "name": "lgamma_r",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "signgamp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float lgammaf(float x)",
        "name": "lgammaf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float lgammaf_r(float x, int *signgamp)",
        "name": "lgammaf_r",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "signgamp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double lgammal(long double x)",
        "name": "lgammal",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double lgammal_r(long double x, int *signgamp)",
        "name": "lgammal_r",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "signgamp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double gamma(double x)",
        "name": "gamma",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double gamma_r(double x, int *signgamp)",
        "name": "gamma_r",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "signgamp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float gammaf(float x)",
        "name": "gammaf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float gammaf_r(float x, int *signgamp)",
        "name": "gammaf_r",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "signgamp",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double tgamma(double x)",
        "name": "tgamma",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float tgammaf(float x)",
        "name": "tgammaf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double tgammal(long double x)",
        "name": "tgammal",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "GETBOOTFILE(3)": {
    "functions": [
      {
        "prototype": "const char * getbootfile(void)",
        "name": "getbootfile",
        "type": "const char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <paths.h>"
        ]
      }
    ]
  },
  "GETBSIZE(3)": {
    "functions": [
      {
        "prototype": "char * getbsize(int *headerlenp, long *blocksizep)",
        "name": "getbsize",
        "type": "char *",
        "args": [
          {
            "name": "headerlenp",
            "type": "int *"
          },
          {
            "name": "blocksizep",
            "type": "long *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "GETCONTEXT(3)": {
    "functions": [
      {
        "prototype": "int getcontext(ucontext_t *ucp)",
        "name": "getcontext",
        "type": "int",
        "args": [
          {
            "name": "ucp",
            "type": "ucontext_t *"
          }
        ],
        "includes": [
          "#include <ucontext.h>"
        ]
      },
      {
        "prototype": "ucontext_t * getcontextx(void)",
        "name": "getcontextx",
        "type": "ucontext_t *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <ucontext.h>"
        ]
      },
      {
        "prototype": "int setcontext(const ucontext_t *ucp)",
        "name": "setcontext",
        "type": "int",
        "args": [
          {
            "name": "ucp",
            "type": "const ucontext_t *"
          }
        ],
        "includes": [
          "#include <ucontext.h>"
        ]
      }
    ]
  },
  "GETCWD(3)": {
    "functions": [
      {
        "prototype": "char * getcwd(char *buf, size_t size)",
        "name": "getcwd",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "char * getwd(char *buf)",
        "name": "getwd",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETLINE(3)": {
    "functions": [
      {
        "prototype": "ssize_t getdelim(char ** restrict linep, size_t * restrict linecapp, int delimiter, FILE * restrict stream)",
        "name": "getdelim",
        "type": "ssize_t",
        "args": [
          {
            "name": "linep",
            "type": "char ** restrict"
          },
          {
            "name": "linecapp",
            "type": "size_t * restrict"
          },
          {
            "name": "delimiter",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "ssize_t getline(char ** restrict linep, size_t * restrict linecapp, FILE * restrict stream)",
        "name": "getline",
        "type": "ssize_t",
        "args": [
          {
            "name": "linep",
            "type": "char ** restrict"
          },
          {
            "name": "linecapp",
            "type": "size_t * restrict"
          },
          {
            "name": "stream",
            "type": "FILE * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "GETDISKBYNAME(3)": {
    "functions": [
      {
        "prototype": "struct disklabel * getdiskbyname(const char *name)",
        "name": "getdiskbyname",
        "type": "struct disklabel *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/disklabel.h>"
        ]
      }
    ]
  },
  "GETDOMAINNAME(3)": {
    "functions": [
      {
        "prototype": "int getdomainname(char *name, int namelen)",
        "name": "getdomainname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "namelen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setdomainname(const char *name, int namelen)",
        "name": "setdomainname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "namelen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETENV(3)": {
    "functions": [
      {
        "prototype": "char * getenv(const char *name)",
        "name": "getenv",
        "type": "char *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int setenv(const char *name, const char *value, int overwrite)",
        "name": "setenv",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "value",
            "type": "const char *"
          },
          {
            "name": "overwrite",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int putenv(char *string)",
        "name": "putenv",
        "type": "int",
        "args": [
          {
            "name": "string",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int unsetenv(const char *name)",
        "name": "unsetenv",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "GETGROUPLIST(3)": {
    "functions": [
      {
        "prototype": "int getgrouplist(const char *name, gid_t basegid, gid_t *groups, int *ngroups)",
        "name": "getgrouplist",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "basegid",
            "type": "gid_t"
          },
          {
            "name": "groups",
            "type": "gid_t *"
          },
          {
            "name": "ngroups",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETHOSTID(3)": {
    "functions": [
      {
        "prototype": "long gethostid(void)",
        "name": "gethostid",
        "type": "long",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "void sethostid(long hostid)",
        "name": "sethostid",
        "type": "void",
        "args": [
          {
            "name": "hostid",
            "type": "long"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETHOSTNAME(3)": {
    "functions": [
      {
        "prototype": "int gethostname(char *name, size_t namelen)",
        "name": "gethostname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "char *"
          },
          {
            "name": "namelen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int sethostname(const char *name, int namelen)",
        "name": "sethostname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "namelen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETLOADAVG(3)": {
    "functions": [
      {
        "prototype": "int getloadavg(double loadavg[], int nelem)",
        "name": "getloadavg",
        "type": "int",
        "args": [
          {
            "name": "loadavg",
            "type": "double []"
          },
          {
            "name": "nelem",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "GETMNTINFO(3)": {
    "functions": [
      {
        "prototype": "int getmntinfo(struct statfs **mntbufp, int mode)",
        "name": "getmntinfo",
        "type": "int",
        "args": [
          {
            "name": "mntbufp",
            "type": "struct statfs **"
          },
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/ucred.h>",
          "#include <sys/mount.h>"
        ]
      }
    ]
  },
  "SETMODE(3)": {
    "functions": [
      {
        "prototype": "mode_t getmode(const void *set, mode_t mode)",
        "name": "getmode",
        "type": "mode_t",
        "args": [
          {
            "name": "set",
            "type": "const void *"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "void * setmode(const char *mode_str)",
        "name": "setmode",
        "type": "void *",
        "args": [
          {
            "name": "mode_str",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETOPT(3)": {
    "functions": [
      {
        "prototype": "int getopt(int argc, char * const argv[], const char *optstring)",
        "name": "getopt",
        "type": "int",
        "args": [
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char * const []"
          },
          {
            "name": "optstring",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETOPT_LONG(3)": {
    "functions": [
      {
        "prototype": "int getopt_long(int argc, char * const *argv, const char *optstring, const struct option *longopts, int *longindex)",
        "name": "getopt_long",
        "type": "int",
        "args": [
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char * const *"
          },
          {
            "name": "optstring",
            "type": "const char *"
          },
          {
            "name": "longopts",
            "type": "const struct option *"
          },
          {
            "name": "longindex",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <getopt.h>"
        ]
      },
      {
        "prototype": "int getopt_long_only(int argc, char * const *argv, const char *optstring, const struct option *longopts, int *longindex)",
        "name": "getopt_long_only",
        "type": "int",
        "args": [
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "argv",
            "type": "char * const *"
          },
          {
            "name": "optstring",
            "type": "const char *"
          },
          {
            "name": "longopts",
            "type": "const struct option *"
          },
          {
            "name": "longindex",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <getopt.h>"
        ]
      }
    ]
  },
  "GETOSRELDATE(3)": {
    "functions": [
      {
        "prototype": "int getosreldate(void)",
        "name": "getosreldate",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPAGESIZE(3)": {
    "functions": [
      {
        "prototype": "int getpagesize(void)",
        "name": "getpagesize",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPAGESIZES(3)": {
    "functions": [
      {
        "prototype": "int getpagesizes(size_t pagesize[], int nelem)",
        "name": "getpagesizes",
        "type": "int",
        "args": [
          {
            "name": "pagesize",
            "type": "size_t []"
          },
          {
            "name": "nelem",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "GETPASS(3)": {
    "functions": [
      {
        "prototype": "char * getpass(const char *prompt)",
        "name": "getpass",
        "type": "char *",
        "args": [
          {
            "name": "prompt",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <pwd.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPEEREID(3)": {
    "functions": [
      {
        "prototype": "int getpeereid(int s, uid_t *euid, gid_t *egid)",
        "name": "getpeereid",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "euid",
            "type": "uid_t *"
          },
          {
            "name": "egid",
            "type": "gid_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "GETPROGNAME(3)": {
    "functions": [
      {
        "prototype": "const char * getprogname(void)",
        "name": "getprogname",
        "type": "const char *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void setprogname(const char *progname)",
        "name": "setprogname",
        "type": "void",
        "args": [
          {
            "name": "progname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "GETRPCPORT(3)": {
    "functions": [
      {
        "prototype": "int getrpcport(char *host, int prognum, int versnum, int proto)",
        "name": "getrpcport",
        "type": "int",
        "args": [
          {
            "name": "host",
            "type": "char *"
          },
          {
            "name": "prognum",
            "type": "int"
          },
          {
            "name": "versnum",
            "type": "int"
          },
          {
            "name": "proto",
            "type": "int"
          }
        ],
        "includes": [

        ]
      }
    ]
  },
  "GETSUBOPT(3)": {
    "functions": [
      {
        "prototype": "int getsubopt(char **optionp, char * const *tokens, char **valuep)",
        "name": "getsubopt",
        "type": "int",
        "args": [
          {
            "name": "optionp",
            "type": "char **"
          },
          {
            "name": "tokens",
            "type": "char * const *"
          },
          {
            "name": "valuep",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "GETVFSBYNAME(3)": {
    "functions": [
      {
        "prototype": "int getvfsbyname(const char *name, struct xvfsconf *vfc)",
        "name": "getvfsbyname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "vfc",
            "type": "struct xvfsconf *"
          }
        ],
        "includes": [
          "#include <sys/param.h>",
          "#include <sys/mount.h>"
        ]
      }
    ]
  },
  "GLOB(3)": {
    "functions": [
      {
        "prototype": "int glob(const char * restrict pattern, int flags, int (*errfunc)(const char *, int), glob_t * restrict pglob)",
        "name": "glob",
        "type": "int",
        "args": [
          {
            "name": "pattern",
            "type": "const char * restrict"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "errfunc",
            "type": "int (*)(const char *, int)"
          },
          {
            "name": "pglob",
            "type": "glob_t * restrict"
          }
        ],
        "includes": [
          "#include <glob.h>"
        ]
      },
      {
        "prototype": "void globfree(glob_t *pglob)",
        "name": "globfree",
        "type": "void",
        "args": [
          {
            "name": "pglob",
            "type": "glob_t *"
          }
        ],
        "includes": [
          "#include <glob.h>"
        ]
      }
    ]
  },
  "PTSNAME(3)": {
    "functions": [
      {
        "prototype": "int grantpt(int fildes)",
        "name": "grantpt",
        "type": "int",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * ptsname(int fildes)",
        "name": "ptsname",
        "type": "char *",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int unlockpt(int fildes)",
        "name": "unlockpt",
        "type": "int",
        "args": [
          {
            "name": "fildes",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "PWCACHE(3)": {
    "functions": [
      {
        "prototype": "const char * user_from_uid(uid_t uid, int nouser)",
        "name": "user_from_uid",
        "type": "const char *",
        "args": [
          {
            "name": "uid",
            "type": "uid_t"
          },
          {
            "name": "nouser",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int uid_from_user(const char *name, uid_t *uid)",
        "name": "uid_from_user",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "uid",
            "type": "uid_t *"
          }
        ],
        "includes": [
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "int pwcache_userdb(int (*setpassent)(int), void (*endpwent)(void), struct passwd * (*getpwnam)(const char *), struct passwd * (*getpwuid)(uid_t))",
        "name": "pwcache_userdb",
        "type": "int",
        "args": [
          {
            "name": "setpassent",
            "type": "int (*)(int)"
          },
          {
            "name": "endpwent",
            "type": "void (*)(void)"
          },
          {
            "name": "getpwnam",
            "type": "struct passwd * (*)(const char *)"
          },
          {
            "name": "getpwuid",
            "type": "struct passwd * (*)(uid_t)"
          }
        ],
        "includes": [
          "#include <pwd.h>"
        ]
      },
      {
        "prototype": "const char * group_from_gid(gid_t gid, int nogroup)",
        "name": "group_from_gid",
        "type": "const char *",
        "args": [
          {
            "name": "gid",
            "type": "gid_t"
          },
          {
            "name": "nogroup",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pwd.h>",
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int gid_from_group(const char *name, gid_t *gid)",
        "name": "gid_from_group",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "gid",
            "type": "gid_t *"
          }
        ],
        "includes": [
          "#include <pwd.h>",
          "#include <grp.h>"
        ]
      },
      {
        "prototype": "int pwcache_groupdb(int (*setgroupent)(int), void (*endgrent)(void), struct group * (*getgrnam)(const char *), struct group * (*getgrgid)(gid_t))",
        "name": "pwcache_groupdb",
        "type": "int",
        "args": [
          {
            "name": "setgroupent",
            "type": "int (*)(int)"
          },
          {
            "name": "endgrent",
            "type": "void (*)(void)"
          },
          {
            "name": "getgrnam",
            "type": "struct group * (*)(const char *)"
          },
          {
            "name": "getgrgid",
            "type": "struct group * (*)(gid_t)"
          }
        ],
        "includes": [
          "#include <pwd.h>",
          "#include <grp.h>"
        ]
      }
    ]
  },
  "HCREATE(3)": {
    "functions": [
      {
        "prototype": "int hcreate(size_t nel)",
        "name": "hcreate",
        "type": "int",
        "args": [
          {
            "name": "nel",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "int hcreate_r(size_t nel, struct hsearch_data *table)",
        "name": "hcreate_r",
        "type": "int",
        "args": [
          {
            "name": "nel",
            "type": "size_t"
          },
          {
            "name": "table",
            "type": "struct hsearch_data *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "void hdestroy(void)",
        "name": "hdestroy",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "void hdestroy_r(struct hsearch_data *table)",
        "name": "hdestroy_r",
        "type": "void",
        "args": [
          {
            "name": "table",
            "type": "struct hsearch_data *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "ENTRY * hsearch(ENTRY item, ACTION action)",
        "name": "hsearch",
        "type": "ENTRY *",
        "args": [
          {
            "name": "item",
            "type": "ENTRY"
          },
          {
            "name": "action",
            "type": "ACTION"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "int hsearch_r(ENTRY item, ACTION action, ENTRY ** itemp, struct hsearch_data *table)",
        "name": "hsearch_r",
        "type": "int",
        "args": [
          {
            "name": "item",
            "type": "ENTRY"
          },
          {
            "name": "action",
            "type": "ACTION"
          },
          {
            "name": "itemp",
            "type": "ENTRY **"
          },
          {
            "name": "table",
            "type": "struct hsearch_data *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      }
    ]
  },
  "QSORT(3)": {
    "functions": [
      {
        "prototype": "void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))",
        "name": "qsort",
        "type": "void",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void qsort_b(void *base, size_t nmemb, size_t size, int (^compar)(const void *, const void *))",
        "name": "qsort_b",
        "type": "void",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void qsort_r(void *base, size_t nmemb, size_t size, void *thunk, int (*compar)(void *, const void *, const void *))",
        "name": "qsort_r",
        "type": "void",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "thunk",
            "type": "void *"
          },
          {
            "name": "compar",
            "type": "int (*)(void *, const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int heapsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))",
        "name": "heapsort",
        "type": "int",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int heapsort_b(void *base, size_t nmemb, size_t size, int (^compar)(const void *, const void *))",
        "name": "heapsort_b",
        "type": "int",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mergesort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))",
        "name": "mergesort",
        "type": "int",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mergesort_b(void *base, size_t nmemb, size_t size, int (^compar)(const void *, const void *))",
        "name": "mergesort_b",
        "type": "int",
        "args": [
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "ICONV_CANONICALIZE(3)": {
    "functions": [
      {
        "prototype": "const char * iconv_canonicalize(const char *name)",
        "name": "iconv_canonicalize",
        "type": "const char *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      }
    ]
  },
  "ICONVCTL(3)": {
    "functions": [
      {
        "prototype": "int iconvctl(iconv_t cd, int request, void *argument)",
        "name": "iconvctl",
        "type": "int",
        "args": [
          {
            "name": "cd",
            "type": "iconv_t"
          },
          {
            "name": "request",
            "type": "int"
          },
          {
            "name": "argument",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      }
    ]
  },
  "ICONVLIST(3)": {
    "functions": [
      {
        "prototype": "void iconvlist(int (*do_one)(unsigned int *count, const char * const *names, void *arg), void *arg)",
        "name": "iconvlist",
        "type": "void",
        "args": [
          {
            "name": "do_one",
            "type": "int (*)(unsigned int *count, const char * const *names, void *arg)"
          },
          {
            "name": "arg",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <iconv.h>"
        ]
      }
    ]
  },
  "IEEE_TEST(3)": {
    "functions": [
      {
        "prototype": "double scalb(double x, double n)",
        "name": "scalb",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "n",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float scalbf(float x, float n)",
        "name": "scalbf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "n",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double significand(double x)",
        "name": "significand",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float significandf(float x)",
        "name": "significandf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "ILOGB(3)": {
    "functions": [
      {
        "prototype": "int ilogb(double x)",
        "name": "ilogb",
        "type": "int",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int ilogbf(float x)",
        "name": "ilogbf",
        "type": "int",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "int ilogbl(long double x)",
        "name": "ilogbl",
        "type": "int",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double logb(double x)",
        "name": "logb",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float logbf(float x)",
        "name": "logbf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double logbl(long double x)",
        "name": "logbl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "IMAXABS(3)": {
    "functions": [
      {
        "prototype": "intmax_t imaxabs(intmax_t j)",
        "name": "imaxabs",
        "type": "intmax_t",
        "args": [
          {
            "name": "j",
            "type": "intmax_t"
          }
        ],
        "includes": [
          "#include <inttypes.h>"
        ]
      }
    ]
  },
  "IMAXDIV(3)": {
    "functions": [
      {
        "prototype": "imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom)",
        "name": "imaxdiv",
        "type": "imaxdiv_t",
        "args": [
          {
            "name": "numer",
            "type": "intmax_t"
          },
          {
            "name": "denom",
            "type": "intmax_t"
          }
        ],
        "includes": [
          "#include <inttypes.h>"
        ]
      }
    ]
  },
  "INDEX(3)": {
    "functions": [
      {
        "prototype": "char * index(const char *s, int c)",
        "name": "index",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "char * rindex(const char *s, int c)",
        "name": "rindex",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      }
    ]
  },
  "INET_NET(3)": {
    "functions": [
      {
        "prototype": "char * inet_net_ntop(int af, const void *src, int bits, char *dst, size_t size)",
        "name": "inet_net_ntop",
        "type": "char *",
        "args": [
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "bits",
            "type": "int"
          },
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      },
      {
        "prototype": "int inet_net_pton(int af, const char *src, void *dst, size_t size)",
        "name": "inet_net_pton",
        "type": "int",
        "args": [
          {
            "name": "af",
            "type": "int"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/in.h>",
          "#include <arpa/inet.h>"
        ]
      }
    ]
  },
  "INITGROUPS(3)": {
    "functions": [
      {
        "prototype": "int initgroups(const char *name, gid_t basegid)",
        "name": "initgroups",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "basegid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "RANDOM(3)": {
    "functions": [
      {
        "prototype": "long random(void)",
        "name": "random",
        "type": "long",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void srandom(unsigned long seed)",
        "name": "srandom",
        "type": "void",
        "args": [
          {
            "name": "seed",
            "type": "unsigned long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void srandomdev(void)",
        "name": "srandomdev",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * initstate(unsigned long seed, char *state, long n)",
        "name": "initstate",
        "type": "char *",
        "args": [
          {
            "name": "seed",
            "type": "unsigned long"
          },
          {
            "name": "state",
            "type": "char *"
          },
          {
            "name": "n",
            "type": "long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * setstate(char *state)",
        "name": "setstate",
        "type": "char *",
        "args": [
          {
            "name": "state",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "INSQUE(3)": {
    "functions": [
      {
        "prototype": "void insque(void *element1, void *pred)",
        "name": "insque",
        "type": "void",
        "args": [
          {
            "name": "element1",
            "type": "void *"
          },
          {
            "name": "pred",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "void remque(void *element)",
        "name": "remque",
        "type": "void",
        "args": [
          {
            "name": "element",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      }
    ]
  },
  "RCMD(3)": {
    "functions": [
      {
        "prototype": "int rcmd(char **ahost, int inport, const char *locuser, const char *remuser, const char *cmd, int *fd2p)",
        "name": "rcmd",
        "type": "int",
        "args": [
          {
            "name": "ahost",
            "type": "char **"
          },
          {
            "name": "inport",
            "type": "int"
          },
          {
            "name": "locuser",
            "type": "const char *"
          },
          {
            "name": "remuser",
            "type": "const char *"
          },
          {
            "name": "cmd",
            "type": "const char *"
          },
          {
            "name": "fd2p",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int rresvport(int *port)",
        "name": "rresvport",
        "type": "int",
        "args": [
          {
            "name": "port",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int iruserok(u_long raddr, int superuser, const char *ruser, const char *luser)",
        "name": "iruserok",
        "type": "int",
        "args": [
          {
            "name": "raddr",
            "type": "u_long"
          },
          {
            "name": "superuser",
            "type": "int"
          },
          {
            "name": "ruser",
            "type": "const char *"
          },
          {
            "name": "luser",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int ruserok(const char *rhost, int superuser, const char *ruser, const char *luser)",
        "name": "ruserok",
        "type": "int",
        "args": [
          {
            "name": "rhost",
            "type": "const char *"
          },
          {
            "name": "superuser",
            "type": "int"
          },
          {
            "name": "ruser",
            "type": "const char *"
          },
          {
            "name": "luser",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int rcmd_af(char **ahost, int inport, const char *locuser, const char *remuser, const char *cmd, int *fd2p, int af)",
        "name": "rcmd_af",
        "type": "int",
        "args": [
          {
            "name": "ahost",
            "type": "char **"
          },
          {
            "name": "inport",
            "type": "int"
          },
          {
            "name": "locuser",
            "type": "const char *"
          },
          {
            "name": "remuser",
            "type": "const char *"
          },
          {
            "name": "cmd",
            "type": "const char *"
          },
          {
            "name": "fd2p",
            "type": "int *"
          },
          {
            "name": "af",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int rresvport_af(int *port, int af)",
        "name": "rresvport_af",
        "type": "int",
        "args": [
          {
            "name": "port",
            "type": "int *"
          },
          {
            "name": "af",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int iruserok_sa(const void *addr, int addrlen, int superuser, const char *ruser, const char *luser)",
        "name": "iruserok_sa",
        "type": "int",
        "args": [
          {
            "name": "addr",
            "type": "const void *"
          },
          {
            "name": "addrlen",
            "type": "int"
          },
          {
            "name": "superuser",
            "type": "int"
          },
          {
            "name": "ruser",
            "type": "const char *"
          },
          {
            "name": "luser",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "ISALNUM(3)": {
    "functions": [
      {
        "prototype": "int isalnum(int c)",
        "name": "isalnum",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isalnum_l(int c, locale_t loc)",
        "name": "isalnum_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISALPHA(3)": {
    "functions": [
      {
        "prototype": "int isalpha(int c)",
        "name": "isalpha",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isalpha_l(int c, locale_t loc)",
        "name": "isalpha_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISASCII(3)": {
    "functions": [
      {
        "prototype": "int isascii(int c)",
        "name": "isascii",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "TTYNAME(3)": {
    "functions": [
      {
        "prototype": "char * ttyname(int fd)",
        "name": "ttyname",
        "type": "char *",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int ttyname_r(int fd, char *buf, size_t len)",
        "name": "ttyname_r",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int isatty(int fd)",
        "name": "isatty",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "ISBLANK(3)": {
    "functions": [
      {
        "prototype": "int isblank(int c)",
        "name": "isblank",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isblank_l(int c, locale_t loc)",
        "name": "isblank_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISCNTRL(3)": {
    "functions": [
      {
        "prototype": "int iscntrl(int c)",
        "name": "iscntrl",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int iscntrl_l(int c, locale_t loc)",
        "name": "iscntrl_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISDIGIT(3)": {
    "functions": [
      {
        "prototype": "int isdigit(int c)",
        "name": "isdigit",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isnumber(int c)",
        "name": "isnumber",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isdigit_l(int c, locale_t loc)",
        "name": "isdigit_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isnumber_l(int c, locale_t loc)",
        "name": "isnumber_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISGRAPH(3)": {
    "functions": [
      {
        "prototype": "int isgraph(int c)",
        "name": "isgraph",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isgraph_l(int c, locale_t loc)",
        "name": "isgraph_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISGREATER(3)": {
    "functions": [

    ]
  },
  "ISXDIGIT(3)": {
    "functions": [
      {
        "prototype": "int isxdigit(int c)",
        "name": "isxdigit",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int ishexnumber(int c)",
        "name": "ishexnumber",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISIDEOGRAM(3)": {
    "functions": [
      {
        "prototype": "int isideogram(int c)",
        "name": "isideogram",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISLOWER(3)": {
    "functions": [
      {
        "prototype": "int islower(int c)",
        "name": "islower",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int islower_l(int c, locale_t loc)",
        "name": "islower_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISPHONOGRAM(3)": {
    "functions": [
      {
        "prototype": "int isphonogram(int c)",
        "name": "isphonogram",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISPRINT(3)": {
    "functions": [
      {
        "prototype": "int isprint(int c)",
        "name": "isprint",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISPUNCT(3)": {
    "functions": [
      {
        "prototype": "int ispunct(int c)",
        "name": "ispunct",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int ispunct_l(int c, locale_t loc)",
        "name": "ispunct_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISRUNE(3)": {
    "functions": [
      {
        "prototype": "int isrune(int c)",
        "name": "isrune",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISSPACE(3)": {
    "functions": [
      {
        "prototype": "int isspace(int c)",
        "name": "isspace",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      },
      {
        "prototype": "int isspace_l(int c, locale_t loc)",
        "name": "isspace_l",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISSPECIAL(3)": {
    "functions": [
      {
        "prototype": "int isspecial(int c)",
        "name": "isspecial",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISUPPER(3)": {
    "functions": [
      {
        "prototype": "int isupper(int c)",
        "name": "isupper",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "ISWALNUM(3)": {
    "functions": [
      {
        "prototype": "int iswalnum(wint_t wc)",
        "name": "iswalnum",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswalpha(wint_t wc)",
        "name": "iswalpha",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswascii(wint_t wc)",
        "name": "iswascii",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswblank(wint_t wc)",
        "name": "iswblank",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswcntrl(wint_t wc)",
        "name": "iswcntrl",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswdigit(wint_t wc)",
        "name": "iswdigit",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswgraph(wint_t wc)",
        "name": "iswgraph",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswhexnumber(wint_t wc)",
        "name": "iswhexnumber",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswideogram(wint_t wc)",
        "name": "iswideogram",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswlower(wint_t wc)",
        "name": "iswlower",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswnumber(wint_t wc)",
        "name": "iswnumber",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswphonogram(wint_t wc)",
        "name": "iswphonogram",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswprint(wint_t wc)",
        "name": "iswprint",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswpunct(wint_t wc)",
        "name": "iswpunct",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswrune(wint_t wc)",
        "name": "iswrune",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswspace(wint_t wc)",
        "name": "iswspace",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswspecial(wint_t wc)",
        "name": "iswspecial",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswupper(wint_t wc)",
        "name": "iswupper",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswxdigit(wint_t wc)",
        "name": "iswxdigit",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "ISWALNUM_L(3)": {
    "functions": [
      {
        "prototype": "int iswalnum_l(wint_t wc, locale_t loc)",
        "name": "iswalnum_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswalpha_l(wint_t wc, locale_t loc)",
        "name": "iswalpha_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswcntrl_l(wint_t wc, locale_t loc)",
        "name": "iswcntrl_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswctype_l(wint_t wc, locale_t loc)",
        "name": "iswctype_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswdigit_l(wint_t wc, locale_t loc)",
        "name": "iswdigit_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswgraph_l(wint_t wc, locale_t loc)",
        "name": "iswgraph_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswlower_l(wint_t wc, locale_t loc)",
        "name": "iswlower_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswprint_l(wint_t wc, locale_t loc)",
        "name": "iswprint_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswpunct_l(wint_t wc, locale_t loc)",
        "name": "iswpunct_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswspace_l(wint_t wc, locale_t loc)",
        "name": "iswspace_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswupper_l(wint_t wc, locale_t loc)",
        "name": "iswupper_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswxdigit_l(wint_t wc, locale_t loc)",
        "name": "iswxdigit_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wint_t towlower_l(wint_t wc, locale_t loc)",
        "name": "towlower_l",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wint_t towupper_l(wint_t wc, locale_t loc)",
        "name": "towupper_l",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wctype_t wctype_l(wint_t wc, locale_t loc)",
        "name": "wctype_l",
        "type": "wctype_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswblank_l(wint_t wc, locale_t loc)",
        "name": "iswblank_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswhexnumber_l(wint_t wc, locale_t loc)",
        "name": "iswhexnumber_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswideogram_l(wint_t wc, locale_t loc)",
        "name": "iswideogram_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswnumber_l(wint_t wc, locale_t loc)",
        "name": "iswnumber_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswphonogram_l(wint_t wc, locale_t loc)",
        "name": "iswphonogram_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswrune_l(wint_t wc, locale_t loc)",
        "name": "iswrune_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "int iswspecial_l(wint_t wc, locale_t loc)",
        "name": "iswspecial_l",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wint_t nextwctype_l(wint_t wc, locale_t loc)",
        "name": "nextwctype_l",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wint_t towctrans_l(wint_t wc, wctrans_t, locale_t loc)",
        "name": "towctrans_l",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "_arg_2",
            "type": "wctrans_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wctrans_t wctrans_l(const char *, locale_t loc)",
        "name": "wctrans_l",
        "type": "wctrans_t",
        "args": [
          {
            "name": "_arg_1",
            "type": "const char *"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "WCTYPE(3)": {
    "functions": [
      {
        "prototype": "int iswctype(wint_t wc, wctype_t charclass)",
        "name": "iswctype",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "charclass",
            "type": "wctype_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wctype_t wctype(const char *property)",
        "name": "wctype",
        "type": "wctype_t",
        "args": [
          {
            "name": "property",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "J0(3)": {
    "functions": [
      {
        "prototype": "double j0(double x)",
        "name": "j0",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float j0f(float x)",
        "name": "j0f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double j1(double x)",
        "name": "j1",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float j1f(float x)",
        "name": "j1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double jn(int n, double x)",
        "name": "jn",
        "type": "double",
        "args": [
          {
            "name": "n",
            "type": "int"
          },
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float jnf(int n, float x)",
        "name": "jnf",
        "type": "float",
        "args": [
          {
            "name": "n",
            "type": "int"
          },
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double y0(double x)",
        "name": "y0",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float y0f(float x)",
        "name": "y0f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double y1(double x)",
        "name": "y1",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float y1f(float x)",
        "name": "y1f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double yn(int n, double x)",
        "name": "yn",
        "type": "double",
        "args": [
          {
            "name": "n",
            "type": "int"
          },
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float ynf(int n, float x)",
        "name": "ynf",
        "type": "float",
        "args": [
          {
            "name": "n",
            "type": "int"
          },
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "LABS(3)": {
    "functions": [
      {
        "prototype": "long labs(long j)",
        "name": "labs",
        "type": "long",
        "args": [
          {
            "name": "j",
            "type": "long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "LDEXP(3)": {
    "functions": [
      {
        "prototype": "double ldexp(double x, int exp)",
        "name": "ldexp",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "exp",
            "type": "int"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float ldexpf(float x, int exp)",
        "name": "ldexpf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "exp",
            "type": "int"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double ldexpl(long double x, int exp)",
        "name": "ldexpl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "exp",
            "type": "int"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "LDIV(3)": {
    "functions": [
      {
        "prototype": "ldiv_t ldiv(long num, long denom)",
        "name": "ldiv",
        "type": "ldiv_t",
        "args": [
          {
            "name": "num",
            "type": "long"
          },
          {
            "name": "denom",
            "type": "long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "LSEARCH(3)": {
    "functions": [
      {
        "prototype": "void * lsearch(const void *key, void *base, size_t *nelp, size_t width, int (*compar)(const void *, const void *))",
        "name": "lsearch",
        "type": "void *",
        "args": [
          {
            "name": "key",
            "type": "const void *"
          },
          {
            "name": "base",
            "type": "void *"
          },
          {
            "name": "nelp",
            "type": "size_t *"
          },
          {
            "name": "width",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      },
      {
        "prototype": "void * lfind(const void *key, const void *base, size_t *nelp, size_t width, int (*compar)(const void *, const void *))",
        "name": "lfind",
        "type": "void *",
        "args": [
          {
            "name": "key",
            "type": "const void *"
          },
          {
            "name": "base",
            "type": "const void *"
          },
          {
            "name": "nelp",
            "type": "size_t *"
          },
          {
            "name": "width",
            "type": "size_t"
          },
          {
            "name": "compar",
            "type": "int (*)(const void *, const void *)"
          }
        ],
        "includes": [
          "#include <search.h>"
        ]
      }
    ]
  },
  "LINK_ADDR(3)": {
    "functions": [
      {
        "prototype": "void link_addr(const char *addr, struct sockaddr_dl *sdl)",
        "name": "link_addr",
        "type": "void",
        "args": [
          {
            "name": "addr",
            "type": "const char *"
          },
          {
            "name": "sdl",
            "type": "struct sockaddr_dl *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/if_dl.h>"
        ]
      },
      {
        "prototype": "char * link_ntoa(const struct sockaddr_dl *sdl)",
        "name": "link_ntoa",
        "type": "char *",
        "args": [
          {
            "name": "sdl",
            "type": "const struct sockaddr_dl *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <net/if_dl.h>"
        ]
      }
    ]
  },
  "LLABS(3)": {
    "functions": [
      {
        "prototype": "long long llabs(long long j)",
        "name": "llabs",
        "type": "long long",
        "args": [
          {
            "name": "j",
            "type": "long long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "LLDIV(3)": {
    "functions": [
      {
        "prototype": "lldiv_t lldiv(long long numer, long long denom)",
        "name": "lldiv",
        "type": "lldiv_t",
        "args": [
          {
            "name": "numer",
            "type": "long long"
          },
          {
            "name": "denom",
            "type": "long long"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "LRINT(3)": {
    "functions": [
      {
        "prototype": "long long llrint(double x)",
        "name": "llrint",
        "type": "long long",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long long llrintf(float x)",
        "name": "llrintf",
        "type": "long long",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long long llrintl(long double x)",
        "name": "llrintl",
        "type": "long long",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long lrint(double x)",
        "name": "lrint",
        "type": "long",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long lrintf(float x)",
        "name": "lrintf",
        "type": "long",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long lrintl(long double x)",
        "name": "lrintl",
        "type": "long",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "LROUND(3)": {
    "functions": [
      {
        "prototype": "long long llround(double x)",
        "name": "llround",
        "type": "long long",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long long llroundf(float x)",
        "name": "llroundf",
        "type": "long long",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long long llroundl(long double x)",
        "name": "llroundl",
        "type": "long long",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long lround(double x)",
        "name": "lround",
        "type": "long",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long lroundf(float x)",
        "name": "lroundf",
        "type": "long",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long lroundl(long double x)",
        "name": "lroundl",
        "type": "long",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "LOCALECONV(3)": {
    "functions": [
      {
        "prototype": "struct lconv * localeconv(void)",
        "name": "localeconv",
        "type": "struct lconv *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      },
      {
        "prototype": "struct lconv * localeconv_l(locale_t locale)",
        "name": "localeconv_l",
        "type": "struct lconv *",
        "args": [
          {
            "name": "locale",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <locale.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "LOCKF(3)": {
    "functions": [
      {
        "prototype": "int lockf(int fd, int function, off_t size)",
        "name": "lockf",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "function",
            "type": "int"
          },
          {
            "name": "size",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "LOG(3)": {
    "functions": [
      {
        "prototype": "double log(double x)",
        "name": "log",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float logf(float x)",
        "name": "logf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double logl(long double x)",
        "name": "logl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double log10(double x)",
        "name": "log10",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float log10f(float x)",
        "name": "log10f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double log10l(long double x)",
        "name": "log10l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double log2(double x)",
        "name": "log2",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float log2f(float x)",
        "name": "log2f",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double log2l(long double x)",
        "name": "log2l",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double log1p(double x)",
        "name": "log1p",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float log1pf(float x)",
        "name": "log1pf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double log1pl(long double x)",
        "name": "log1pl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "MAC(3)": {
    "functions": [

    ]
  },
  "MAC_FREE(3)": {
    "functions": [
      {
        "prototype": "int mac_free(mac_t label)",
        "name": "mac_free",
        "type": "int",
        "args": [
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      }
    ]
  },
  "MAC_TEXT(3)": {
    "functions": [
      {
        "prototype": "int mac_from_text(mac_t *mac, const char *text)",
        "name": "mac_from_text",
        "type": "int",
        "args": [
          {
            "name": "mac",
            "type": "mac_t *"
          },
          {
            "name": "text",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_to_text(mac_t label, char **text)",
        "name": "mac_to_text",
        "type": "int",
        "args": [
          {
            "name": "label",
            "type": "mac_t"
          },
          {
            "name": "text",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      }
    ]
  },
  "MAC_GET(3)": {
    "functions": [
      {
        "prototype": "int mac_get_file(const char *path, mac_t label)",
        "name": "mac_get_file",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_get_link(const char *path, mac_t label)",
        "name": "mac_get_link",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_get_fd(int fd, mac_t label)",
        "name": "mac_get_fd",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_get_peer(int fd, mac_t label)",
        "name": "mac_get_peer",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_get_pid(pid_t pid, mac_t label)",
        "name": "mac_get_pid",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_get_proc(mac_t label)",
        "name": "mac_get_proc",
        "type": "int",
        "args": [
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      }
    ]
  },
  "MAC_IS_PRESENT(3)": {
    "functions": [
      {
        "prototype": "int mac_is_present(const char *policyname)",
        "name": "mac_is_present",
        "type": "int",
        "args": [
          {
            "name": "policyname",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      }
    ]
  },
  "MAC_SET(3)": {
    "functions": [
      {
        "prototype": "int mac_set_file(const char *path, mac_t label)",
        "name": "mac_set_file",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_set_link(const char *path, mac_t label)",
        "name": "mac_set_link",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_set_fd(int fd, mac_t label)",
        "name": "mac_set_fd",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      },
      {
        "prototype": "int mac_set_proc(mac_t label)",
        "name": "mac_set_proc",
        "type": "int",
        "args": [
          {
            "name": "label",
            "type": "mac_t"
          }
        ],
        "includes": [
          "#include <sys/mac.h>"
        ]
      }
    ]
  },
  "MAKECONTEXT(3)": {
    "functions": [
      {
        "prototype": "void makecontext(ucontext_t *ucp, void (*func)(void), int argc, ...)",
        "name": "makecontext",
        "type": "void",
        "args": [
          {
            "name": "ucp",
            "type": "ucontext_t *"
          },
          {
            "name": "func",
            "type": "void (*)(void)"
          },
          {
            "name": "argc",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <ucontext.h>"
        ]
      },
      {
        "prototype": "int swapcontext(ucontext_t *oucp, const ucontext_t *ucp)",
        "name": "swapcontext",
        "type": "int",
        "args": [
          {
            "name": "oucp",
            "type": "ucontext_t *"
          },
          {
            "name": "ucp",
            "type": "const ucontext_t *"
          }
        ],
        "includes": [
          "#include <ucontext.h>"
        ]
      }
    ]
  },
  "MATH(3)": {
    "functions": [

    ]
  },
  "MBLEN(3)": {
    "functions": [
      {
        "prototype": "int mblen(const char *mbchar, size_t nbytes)",
        "name": "mblen",
        "type": "int",
        "args": [
          {
            "name": "mbchar",
            "type": "const char *"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "MBRLEN(3)": {
    "functions": [
      {
        "prototype": "size_t mbrlen(const char * restrict s, size_t n, mbstate_t * restrict ps)",
        "name": "mbrlen",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "MBRTOWC(3)": {
    "functions": [
      {
        "prototype": "size_t mbrtowc(wchar_t * restrict pc, const char * restrict s, size_t n, mbstate_t * restrict ps)",
        "name": "mbrtowc",
        "type": "size_t",
        "args": [
          {
            "name": "pc",
            "type": "wchar_t * restrict"
          },
          {
            "name": "s",
            "type": "const char * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t mbrtoc16(char16_t * restrict pc, const char * restrict s, size_t n, mbstate_t * restrict ps)",
        "name": "mbrtoc16",
        "type": "size_t",
        "args": [
          {
            "name": "pc",
            "type": "char16_t * restrict"
          },
          {
            "name": "s",
            "type": "const char * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <uchar.h>"
        ]
      },
      {
        "prototype": "size_t mbrtoc32(char32_t * restrict pc, const char * restrict s, size_t n, mbstate_t * restrict ps)",
        "name": "mbrtoc32",
        "type": "size_t",
        "args": [
          {
            "name": "pc",
            "type": "char32_t * restrict"
          },
          {
            "name": "s",
            "type": "const char * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <uchar.h>"
        ]
      }
    ]
  },
  "MBSINIT(3)": {
    "functions": [
      {
        "prototype": "int mbsinit(const mbstate_t *ps)",
        "name": "mbsinit",
        "type": "int",
        "args": [
          {
            "name": "ps",
            "type": "const mbstate_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "MBSRTOWCS(3)": {
    "functions": [
      {
        "prototype": "size_t mbsrtowcs(wchar_t * restrict dst, const char ** restrict src, size_t len, mbstate_t * restrict ps)",
        "name": "mbsrtowcs",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "wchar_t * restrict"
          },
          {
            "name": "src",
            "type": "const char ** restrict"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t mbsnrtowcs(wchar_t * restrict dst, const char ** restrict src, size_t nms, size_t len, mbstate_t * restrict ps)",
        "name": "mbsnrtowcs",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "wchar_t * restrict"
          },
          {
            "name": "src",
            "type": "const char ** restrict"
          },
          {
            "name": "nms",
            "type": "size_t"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "MBSTOWCS(3)": {
    "functions": [
      {
        "prototype": "size_t mbstowcs(wchar_t * restrict wcstring, const char * restrict mbstring, size_t nwchars)",
        "name": "mbstowcs",
        "type": "size_t",
        "args": [
          {
            "name": "wcstring",
            "type": "wchar_t * restrict"
          },
          {
            "name": "mbstring",
            "type": "const char * restrict"
          },
          {
            "name": "nwchars",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "MBTOWC(3)": {
    "functions": [
      {
        "prototype": "int mbtowc(wchar_t * restrict wcharp, const char * restrict mbchar, size_t nbytes)",
        "name": "mbtowc",
        "type": "int",
        "args": [
          {
            "name": "wcharp",
            "type": "wchar_t * restrict"
          },
          {
            "name": "mbchar",
            "type": "const char * restrict"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "MEMCCPY(3)": {
    "functions": [
      {
        "prototype": "void * memccpy(void *dst, const void *src, int c, size_t len)",
        "name": "memccpy",
        "type": "void *",
        "args": [
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MEMCHR(3)": {
    "functions": [
      {
        "prototype": "void * memchr(const void *b, int c, size_t len)",
        "name": "memchr",
        "type": "void *",
        "args": [
          {
            "name": "b",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "void * memrchr(const void *b, int c, size_t len)",
        "name": "memrchr",
        "type": "void *",
        "args": [
          {
            "name": "b",
            "type": "const void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MEMCMP(3)": {
    "functions": [
      {
        "prototype": "int memcmp(const void *b1, const void *b2, size_t len)",
        "name": "memcmp",
        "type": "int",
        "args": [
          {
            "name": "b1",
            "type": "const void *"
          },
          {
            "name": "b2",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MEMCPY(3)": {
    "functions": [
      {
        "prototype": "void * memcpy(void *dst, const void *src, size_t len)",
        "name": "memcpy",
        "type": "void *",
        "args": [
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MEMMEM(3)": {
    "functions": [
      {
        "prototype": "void * memmem(const void *big, size_t big_len, const void *little, size_t little_len)",
        "name": "memmem",
        "type": "void *",
        "args": [
          {
            "name": "big",
            "type": "const void *"
          },
          {
            "name": "big_len",
            "type": "size_t"
          },
          {
            "name": "little",
            "type": "const void *"
          },
          {
            "name": "little_len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MEMMOVE(3)": {
    "functions": [
      {
        "prototype": "void * memmove(void *dst, const void *src, size_t len)",
        "name": "memmove",
        "type": "void *",
        "args": [
          {
            "name": "dst",
            "type": "void *"
          },
          {
            "name": "src",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MEMORY(3)": {
    "functions": [
      {
        "prototype": "void * malloc(size_t size)",
        "name": "malloc",
        "type": "void *",
        "args": [
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void free(void *ptr)",
        "name": "free",
        "type": "void",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * realloc(void *ptr, size_t size)",
        "name": "realloc",
        "type": "void *",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * calloc(size_t nelem, size_t elsize)",
        "name": "calloc",
        "type": "void *",
        "args": [
          {
            "name": "nelem",
            "type": "size_t"
          },
          {
            "name": "elsize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * alloca(size_t size)",
        "name": "alloca",
        "type": "void *",
        "args": [
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void * mmap(void * addr, size_t len, int prot, int flags, int fd, off_t offset)",
        "name": "mmap",
        "type": "void *",
        "args": [
          {
            "name": "addr",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "prot",
            "type": "int"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "offset",
            "type": "off_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <sys/types.h>",
          "#include <sys/mman.h>"
        ]
      }
    ]
  },
  "MEMSET(3)": {
    "functions": [
      {
        "prototype": "void * memset(void *dest, int c, size_t len)",
        "name": "memset",
        "type": "void *",
        "args": [
          {
            "name": "dest",
            "type": "void *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "errno_t memset_s(void *dest, rsize_t destsz, int c, rsize_t len)",
        "name": "memset_s",
        "type": "errno_t",
        "args": [
          {
            "name": "dest",
            "type": "void *"
          },
          {
            "name": "destsz",
            "type": "rsize_t"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "len",
            "type": "rsize_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "MKTEMP(3)": {
    "functions": [
      {
        "prototype": "char * mktemp(char *template)",
        "name": "mktemp",
        "type": "char *",
        "args": [
          {
            "name": "template",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mkstemp(char *template)",
        "name": "mkstemp",
        "type": "int",
        "args": [
          {
            "name": "template",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mkostemp(char *template, int oflags)",
        "name": "mkostemp",
        "type": "int",
        "args": [
          {
            "name": "template",
            "type": "char *"
          },
          {
            "name": "oflags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mkostemps(char *template, int suffixlen, int oflags)",
        "name": "mkostemps",
        "type": "int",
        "args": [
          {
            "name": "template",
            "type": "char *"
          },
          {
            "name": "suffixlen",
            "type": "int"
          },
          {
            "name": "oflags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "char * mkdtemp(char *template)",
        "name": "mkdtemp",
        "type": "char *",
        "args": [
          {
            "name": "template",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int mkstemps(char *template, int suffixlen)",
        "name": "mkstemps",
        "type": "int",
        "args": [
          {
            "name": "template",
            "type": "char *"
          },
          {
            "name": "suffixlen",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "MODF(3)": {
    "functions": [
      {
        "prototype": "double modf(double value, double *iptr)",
        "name": "modf",
        "type": "double",
        "args": [
          {
            "name": "value",
            "type": "double"
          },
          {
            "name": "iptr",
            "type": "double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float modff(float value, float *iptr)",
        "name": "modff",
        "type": "float",
        "args": [
          {
            "name": "value",
            "type": "float"
          },
          {
            "name": "iptr",
            "type": "float *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double modfl(long double value, long double *iptr)",
        "name": "modfl",
        "type": "long double",
        "args": [
          {
            "name": "value",
            "type": "long double"
          },
          {
            "name": "iptr",
            "type": "long double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "MONCONTROL(3)": {
    "functions": [
      {
        "prototype": "void moncontrol(int mode)",
        "name": "moncontrol",
        "type": "void",
        "args": [
          {
            "name": "mode",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/gmon.h>"
        ]
      },
      {
        "prototype": "void monstartup(u_long lowpc, u_long highpc)",
        "name": "monstartup",
        "type": "void",
        "args": [
          {
            "name": "lowpc",
            "type": "u_long"
          },
          {
            "name": "highpc",
            "type": "u_long"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/gmon.h>"
        ]
      }
    ]
  },
  "MULTIBYTE(3)": {
    "functions": [

    ]
  },
  "NAN(3)": {
    "functions": [
      {
        "prototype": "double nan(const char *s)",
        "name": "nan",
        "type": "double",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float nanf(const char *s)",
        "name": "nanf",
        "type": "float",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double nanl(const char *s)",
        "name": "nanl",
        "type": "long double",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "RINT(3)": {
    "functions": [
      {
        "prototype": "double nearbyint(double x)",
        "name": "nearbyint",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float nearbyintf(float x)",
        "name": "nearbyintf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double nearbyintl(long double x)",
        "name": "nearbyintl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double rint(double x)",
        "name": "rint",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float rintf(float x)",
        "name": "rintf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double rintl(long double x)",
        "name": "rintl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "NEWLOCALE(3)": {
    "functions": [
      {
        "prototype": "locale_t newlocale(int mask, const char * locale, locale_t base)",
        "name": "newlocale",
        "type": "locale_t",
        "args": [
          {
            "name": "mask",
            "type": "int"
          },
          {
            "name": "locale",
            "type": "const char *"
          },
          {
            "name": "base",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      }
    ]
  },
  "NEXTAFTER(3)": {
    "functions": [
      {
        "prototype": "double nextafter(double x, double y)",
        "name": "nextafter",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float nextafterf(float x, float y)",
        "name": "nextafterf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double nextafterl(long double x, long double y)",
        "name": "nextafterl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double nexttoward(double x, long double y)",
        "name": "nexttoward",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float nexttowardf(float x, long double y)",
        "name": "nexttowardf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double nexttowardl(long double x, long double y)",
        "name": "nexttowardl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "NEXTWCTYPE(3)": {
    "functions": [
      {
        "prototype": "wint_t nextwctype(wint_t ch, wctype_t wct)",
        "name": "nextwctype",
        "type": "wint_t",
        "args": [
          {
            "name": "ch",
            "type": "wint_t"
          },
          {
            "name": "wct",
            "type": "wctype_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "NICE(3)": {
    "functions": [
      {
        "prototype": "int nice(int incr)",
        "name": "nice",
        "type": "int",
        "args": [
          {
            "name": "incr",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "NL_LANGINFO(3)": {
    "functions": [
      {
        "prototype": "char * nl_langinfo(nl_item item)",
        "name": "nl_langinfo",
        "type": "char *",
        "args": [
          {
            "name": "item",
            "type": "nl_item"
          }
        ],
        "includes": [
          "#include <langinfo.h>"
        ]
      },
      {
        "prototype": "char * nl_langinfo_l(nl_item item, locale_t loc)",
        "name": "nl_langinfo_l",
        "type": "char *",
        "args": [
          {
            "name": "item",
            "type": "nl_item"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <langinfo.h>"
        ]
      }
    ]
  },
  "NLIST(3)": {
    "functions": [
      {
        "prototype": "int nlist(const char *filename, struct nlist *nl)",
        "name": "nlist",
        "type": "int",
        "args": [
          {
            "name": "filename",
            "type": "const char *"
          },
          {
            "name": "nl",
            "type": "struct nlist *"
          }
        ],
        "includes": [
          "#include <nlist.h>"
        ]
      }
    ]
  },
  "NSDISPATCH(3)": {
    "functions": [
      {
        "prototype": "int nsdispatch(void *retval, const ns_dtab dtab[], const char *database, const char *method_name, const ns_src defaults[], ...)",
        "name": "nsdispatch",
        "type": "int",
        "args": [
          {
            "name": "retval",
            "type": "void *"
          },
          {
            "name": "dtab",
            "type": "const ns_dtab []"
          },
          {
            "name": "database",
            "type": "const char *"
          },
          {
            "name": "method_name",
            "type": "const char *"
          },
          {
            "name": "defaults",
            "type": "const ns_src []"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <stdarg.h>",
          "#include <nsswitch.h>"
        ]
      }
    ]
  },
  "VIS(3)": {
    "functions": [
      {
        "prototype": "char * vis(char *dst, int c, int flag, int nextc)",
        "name": "vis",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "nextc",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "char * nvis(char *dst, size_t dlen, int c, int flag, int nextc)",
        "name": "nvis",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "nextc",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strvis(char *dst, const char *src, int flag)",
        "name": "strvis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int stravis(char **dst, const char *src, int flag)",
        "name": "stravis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char **"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strnvis(char *dst, size_t dlen, const char *src, int flag)",
        "name": "strnvis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strvisx(char *dst, const char *src, size_t len, int flag)",
        "name": "strvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strnvisx(char *dst, size_t dlen, const char *src, size_t len, int flag)",
        "name": "strnvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strenvisx(char *dst, size_t dlen, const char *src, size_t len, int flag, int *cerr_ptr)",
        "name": "strenvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "cerr_ptr",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "char * svis(char *dst, int c, int flag, int nextc, const char *extra)",
        "name": "svis",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "nextc",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "char * snvis(char *dst, size_t dlen, int c, int flag, int nextc, const char *extra)",
        "name": "snvis",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "nextc",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strsvis(char *dst, const char *src, int flag, const char *extra)",
        "name": "strsvis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strsnvis(char *dst, size_t dlen, const char *src, int flag, const char *extra)",
        "name": "strsnvis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strsvisx(char *dst, const char *src, size_t len, int flag, const char *extra)",
        "name": "strsvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strsnvisx(char *dst, size_t dlen, const char *src, size_t len, int flag, const char *extra)",
        "name": "strsnvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strsenvisx(char *dst, size_t dlen, const char *src, size_t len, int flag, const char *extra, int *cerr_ptr)",
        "name": "strsenvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "flag",
            "type": "int"
          },
          {
            "name": "extra",
            "type": "const char *"
          },
          {
            "name": "cerr_ptr",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      }
    ]
  },
  "OPEN_MEMSTREAM(3)": {
    "functions": [
      {
        "prototype": "FILE * open_memstream(char **bufp, size_t *sizep)",
        "name": "open_memstream",
        "type": "FILE *",
        "args": [
          {
            "name": "bufp",
            "type": "char **"
          },
          {
            "name": "sizep",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "FILE * open_wmemstream(wchar_t **bufp, size_t *sizep)",
        "name": "open_wmemstream",
        "type": "FILE *",
        "args": [
          {
            "name": "bufp",
            "type": "wchar_t **"
          },
          {
            "name": "sizep",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "PAUSE(3)": {
    "functions": [
      {
        "prototype": "int pause(void)",
        "name": "pause",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "POPEN(3)": {
    "functions": [
      {
        "prototype": "FILE * popen(const char *command, const char *type)",
        "name": "popen",
        "type": "FILE *",
        "args": [
          {
            "name": "command",
            "type": "const char *"
          },
          {
            "name": "type",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int pclose(FILE *stream)",
        "name": "pclose",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "STRERROR(3)": {
    "functions": [
      {
        "prototype": "void perror(const char *string)",
        "name": "perror",
        "type": "void",
        "args": [
          {
            "name": "string",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * strerror(int errnum)",
        "name": "strerror",
        "type": "char *",
        "args": [
          {
            "name": "errnum",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strerror_r(int errnum, char *strerrbuf, size_t buflen)",
        "name": "strerror_r",
        "type": "int",
        "args": [
          {
            "name": "errnum",
            "type": "int"
          },
          {
            "name": "strerrbuf",
            "type": "char *"
          },
          {
            "name": "buflen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <string.h>"
        ]
      }
    ]
  },
  "POSIX1E(3)": {
    "functions": [

    ]
  },
  "TIME2POSIX(3)": {
    "functions": [
      {
        "prototype": "time_t time2posix(time_t t)",
        "name": "time2posix",
        "type": "time_t",
        "args": [
          {
            "name": "t",
            "type": "time_t"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "time_t posix2time(time_t t)",
        "name": "posix2time",
        "type": "time_t",
        "args": [
          {
            "name": "t",
            "type": "time_t"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWN(3)": {
    "functions": [
      {
        "prototype": "int posix_spawn(pid_t *restrict pid, const char *restrict path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *restrict attrp, char *const argv[restrict], char *const envp[restrict])",
        "name": "posix_spawn",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t *restrict"
          },
          {
            "name": "path",
            "type": "const char *restrict"
          },
          {
            "name": "file_actions",
            "type": "const posix_spawn_file_actions_t *"
          },
          {
            "name": "attrp",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "argv",
            "type": "char *const [restrict]"
          },
          {
            "name": "envp",
            "type": "char *const [restrict]"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnp(pid_t *restrict pid, const char *restrict file, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *restrict attrp, char *const argv[restrict], char *const envp[restrict])",
        "name": "posix_spawnp",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pid_t *restrict"
          },
          {
            "name": "file",
            "type": "const char *restrict"
          },
          {
            "name": "file_actions",
            "type": "const posix_spawn_file_actions_t *"
          },
          {
            "name": "attrp",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "argv",
            "type": "char *const [restrict]"
          },
          {
            "name": "envp",
            "type": "char *const [restrict]"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWN_FILE_ACTIONS_ADDOPEN(3)": {
    "functions": [
      {
        "prototype": "int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t * file_actions, int fildes, const char *restrict path, int oflag, mode_t mode)",
        "name": "posix_spawn_file_actions_addopen",
        "type": "int",
        "args": [
          {
            "name": "file_actions",
            "type": "posix_spawn_file_actions_t *"
          },
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "path",
            "type": "const char *restrict"
          },
          {
            "name": "oflag",
            "type": "int"
          },
          {
            "name": "mode",
            "type": "mode_t"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t * file_actions, int fildes, int newfildes)",
        "name": "posix_spawn_file_actions_adddup2",
        "type": "int",
        "args": [
          {
            "name": "file_actions",
            "type": "posix_spawn_file_actions_t *"
          },
          {
            "name": "fildes",
            "type": "int"
          },
          {
            "name": "newfildes",
            "type": "int"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t * file_actions, int fildes)",
        "name": "posix_spawn_file_actions_addclose",
        "type": "int",
        "args": [
          {
            "name": "file_actions",
            "type": "posix_spawn_file_actions_t *"
          },
          {
            "name": "fildes",
            "type": "int"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWN_FILE_ACTIONS_INIT(3)": {
    "functions": [
      {
        "prototype": "int posix_spawn_file_actions_init(posix_spawn_file_actions_t * file_actions)",
        "name": "posix_spawn_file_actions_init",
        "type": "int",
        "args": [
          {
            "name": "file_actions",
            "type": "posix_spawn_file_actions_t *"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t * file_actions)",
        "name": "posix_spawn_file_actions_destroy",
        "type": "int",
        "args": [
          {
            "name": "file_actions",
            "type": "posix_spawn_file_actions_t *"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_INIT(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_init(posix_spawnattr_t * attr)",
        "name": "posix_spawnattr_init",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_destroy(posix_spawnattr_t * attr)",
        "name": "posix_spawnattr_destroy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_GETFLAGS(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_getflags(const posix_spawnattr_t *restrict attr, short *restrict flags)",
        "name": "posix_spawnattr_getflags",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "flags",
            "type": "short *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_setflags(posix_spawnattr_t *attr, short flags)",
        "name": "posix_spawnattr_setflags",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          },
          {
            "name": "flags",
            "type": "short"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_GETPGROUP(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_getpgroup(const posix_spawnattr_t *restrict attr, pid_t *restrict pgroup)",
        "name": "posix_spawnattr_getpgroup",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "pgroup",
            "type": "pid_t *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_setpgroup(posix_spawnattr_t *attr, pid_t pgroup)",
        "name": "posix_spawnattr_setpgroup",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          },
          {
            "name": "pgroup",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_GETSCHEDPARAM(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_getschedparam(const posix_spawnattr_t *restrict attr, struct sched_param *restrict schedparam)",
        "name": "posix_spawnattr_getschedparam",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "schedparam",
            "type": "struct sched_param *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_setschedparam(posix_spawnattr_t *attr, const struct sched_param *restrict schedparam)",
        "name": "posix_spawnattr_setschedparam",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          },
          {
            "name": "schedparam",
            "type": "const struct sched_param *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_GETSCHEDPOLICY(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_getschedpolicy(const posix_spawnattr_t *restrict attr, int *restrict schedpolicy)",
        "name": "posix_spawnattr_getschedpolicy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "schedpolicy",
            "type": "int *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_setschedpolicy(posix_spawnattr_t *attr, int schedpolicy)",
        "name": "posix_spawnattr_setschedpolicy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          },
          {
            "name": "schedpolicy",
            "type": "int"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_GETSIGDEFAULT(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_getsigdefault(const posix_spawnattr_t *restrict attr, sigset_t *restrict sigdefault)",
        "name": "posix_spawnattr_getsigdefault",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "sigdefault",
            "type": "sigset_t *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_setsigdefault(posix_spawnattr_t *attr, const sigset_t *restrict sigdefault)",
        "name": "posix_spawnattr_setsigdefault",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          },
          {
            "name": "sigdefault",
            "type": "const sigset_t *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "POSIX_SPAWNATTR_GETSIGMASK(3)": {
    "functions": [
      {
        "prototype": "int posix_spawnattr_getsigmask(const posix_spawnattr_t *restrict attr, sigset_t *restrict sigmask)",
        "name": "posix_spawnattr_getsigmask",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const posix_spawnattr_t *restrict"
          },
          {
            "name": "sigmask",
            "type": "sigset_t *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      },
      {
        "prototype": "int posix_spawnattr_setsigmask(posix_spawnattr_t *attr, const sigset_t *restrict sigmask)",
        "name": "posix_spawnattr_setsigmask",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "posix_spawnattr_t *"
          },
          {
            "name": "sigmask",
            "type": "const sigset_t *restrict"
          }
        ],
        "includes": [
          "#include <spawn.h>"
        ]
      }
    ]
  },
  "PSIGNAL(3)": {
    "functions": [
      {
        "prototype": "void psignal(int sig, const char *s)",
        "name": "psignal",
        "type": "void",
        "args": [
          {
            "name": "sig",
            "type": "int"
          },
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "char * strsignal(int sig)",
        "name": "strsignal",
        "type": "char *",
        "args": [
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>",
          "#include <string.h>"
        ]
      }
    ]
  },
  "PTHREAD(3)": {
    "functions": [

    ]
  },
  "PTHREAD_AFFINITY_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_getaffinity_np(pthread_t td, size_t cpusetsize, cpuset_t *cpusetp)",
        "name": "pthread_getaffinity_np",
        "type": "int",
        "args": [
          {
            "name": "td",
            "type": "pthread_t"
          },
          {
            "name": "cpusetsize",
            "type": "size_t"
          },
          {
            "name": "cpusetp",
            "type": "cpuset_t *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      },
      {
        "prototype": "int pthread_setaffinity_np(pthread_t td, size_t cpusetsize, const cpuset_t *cpusetp)",
        "name": "pthread_setaffinity_np",
        "type": "int",
        "args": [
          {
            "name": "td",
            "type": "pthread_t"
          },
          {
            "name": "cpusetsize",
            "type": "size_t"
          },
          {
            "name": "cpusetp",
            "type": "const cpuset_t *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_ATFORK(3)": {
    "functions": [
      {
        "prototype": "int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void))",
        "name": "pthread_atfork",
        "type": "int",
        "args": [
          {
            "name": "prepare",
            "type": "void (*)(void)"
          },
          {
            "name": "parent",
            "type": "void (*)(void)"
          },
          {
            "name": "child",
            "type": "void (*)(void)"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_ATTR(3)": {
    "functions": [
      {
        "prototype": "int pthread_attr_init(pthread_attr_t *attr)",
        "name": "pthread_attr_init",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_destroy(pthread_attr_t *attr)",
        "name": "pthread_attr_destroy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize)",
        "name": "pthread_attr_setstack",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "stackaddr",
            "type": "void *"
          },
          {
            "name": "stacksize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getstack(const pthread_attr_t * restrict attr, void ** restrict stackaddr, size_t * restrict stacksize)",
        "name": "pthread_attr_getstack",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t * restrict"
          },
          {
            "name": "stackaddr",
            "type": "void ** restrict"
          },
          {
            "name": "stacksize",
            "type": "size_t * restrict"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize)",
        "name": "pthread_attr_setstacksize",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "stacksize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize)",
        "name": "pthread_attr_getstacksize",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "stacksize",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize)",
        "name": "pthread_attr_setguardsize",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "guardsize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize)",
        "name": "pthread_attr_getguardsize",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "guardsize",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr)",
        "name": "pthread_attr_setstackaddr",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "stackaddr",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getstackaddr(const pthread_attr_t *attr, void **stackaddr)",
        "name": "pthread_attr_getstackaddr",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "stackaddr",
            "type": "void **"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate)",
        "name": "pthread_attr_setdetachstate",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "detachstate",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate)",
        "name": "pthread_attr_getdetachstate",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "detachstate",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched)",
        "name": "pthread_attr_setinheritsched",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "inheritsched",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getinheritsched(const pthread_attr_t *attr, int *inheritsched)",
        "name": "pthread_attr_getinheritsched",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "inheritsched",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param)",
        "name": "pthread_attr_setschedparam",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "param",
            "type": "const struct sched_param *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param)",
        "name": "pthread_attr_getschedparam",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "param",
            "type": "struct sched_param *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy)",
        "name": "pthread_attr_setschedpolicy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "policy",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy)",
        "name": "pthread_attr_getschedpolicy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "policy",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setscope(pthread_attr_t *attr, int contentionscope)",
        "name": "pthread_attr_setscope",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "contentionscope",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_getscope(const pthread_attr_t *attr, int *contentionscope)",
        "name": "pthread_attr_getscope",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "contentionscope",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_ATTR_AFFINITY_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_attr_getaffinity_np(const pthread_attr_t *pattr, size_t cpusetsize, cpuset_t *cpusetp)",
        "name": "pthread_attr_getaffinity_np",
        "type": "int",
        "args": [
          {
            "name": "pattr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "cpusetsize",
            "type": "size_t"
          },
          {
            "name": "cpusetp",
            "type": "cpuset_t *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      },
      {
        "prototype": "int pthread_attr_setaffinity_np(pthread_attr_t *pattr, size_t cpusetsize, const cpuset_t *cpusetp)",
        "name": "pthread_attr_setaffinity_np",
        "type": "int",
        "args": [
          {
            "name": "pattr",
            "type": "pthread_attr_t *"
          },
          {
            "name": "cpusetsize",
            "type": "size_t"
          },
          {
            "name": "cpusetp",
            "type": "const cpuset_t *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_ATTR_GET_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_attr_get_np(pthread_t pid, pthread_attr_t *dst)",
        "name": "pthread_attr_get_np",
        "type": "int",
        "args": [
          {
            "name": "pid",
            "type": "pthread_t"
          },
          {
            "name": "dst",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_ATTR_SETCREATESUSPEND_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_attr_setcreatesuspend_np(pthread_attr_t *attr)",
        "name": "pthread_attr_setcreatesuspend_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_attr_t *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_BARRIER(3)": {
    "functions": [
      {
        "prototype": "int pthread_barrier_destroy(pthread_barrier_t *barrier)",
        "name": "pthread_barrier_destroy",
        "type": "int",
        "args": [
          {
            "name": "barrier",
            "type": "pthread_barrier_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_barrier_init(pthread_barrier_t *barrier, const pthread_barrierattr_t *attr, unsigned count)",
        "name": "pthread_barrier_init",
        "type": "int",
        "args": [
          {
            "name": "barrier",
            "type": "pthread_barrier_t *"
          },
          {
            "name": "attr",
            "type": "const pthread_barrierattr_t *"
          },
          {
            "name": "count",
            "type": "unsigned"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_barrier_wait(pthread_barrier_t *barrier)",
        "name": "pthread_barrier_wait",
        "type": "int",
        "args": [
          {
            "name": "barrier",
            "type": "pthread_barrier_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_BARRIERATTR(3)": {
    "functions": [
      {
        "prototype": "int pthread_barrierattr_destroy(pthread_barrierattr_t *attr)",
        "name": "pthread_barrierattr_destroy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_barrierattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_barrierattr_getpshared(const pthread_barrierattr_t *attr, int *pshared)",
        "name": "pthread_barrierattr_getpshared",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_barrierattr_t *"
          },
          {
            "name": "pshared",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_barrierattr_init(pthread_barrierattr_t *attr)",
        "name": "pthread_barrierattr_init",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_barrierattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_barrierattr_setpshared(pthread_barrierattr_t *attr, int pshared)",
        "name": "pthread_barrierattr_setpshared",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_barrierattr_t *"
          },
          {
            "name": "pshared",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_CANCEL(3)": {
    "functions": [
      {
        "prototype": "int pthread_cancel(pthread_t thread)",
        "name": "pthread_cancel",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_CLEANUP_POP(3)": {
    "functions": [
      {
        "prototype": "void pthread_cleanup_pop(int execute)",
        "name": "pthread_cleanup_pop",
        "type": "void",
        "args": [
          {
            "name": "execute",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_CLEANUP_PUSH(3)": {
    "functions": [
      {
        "prototype": "void pthread_cleanup_push(void (*cleanup_routine)(void *), void *arg)",
        "name": "pthread_cleanup_push",
        "type": "void",
        "args": [
          {
            "name": "cleanup_routine",
            "type": "void (*)(void *)"
          },
          {
            "name": "arg",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_COND_BROADCAST(3)": {
    "functions": [
      {
        "prototype": "int pthread_cond_broadcast(pthread_cond_t *cond)",
        "name": "pthread_cond_broadcast",
        "type": "int",
        "args": [
          {
            "name": "cond",
            "type": "pthread_cond_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_COND_DESTROY(3)": {
    "functions": [
      {
        "prototype": "int pthread_cond_destroy(pthread_cond_t *cond)",
        "name": "pthread_cond_destroy",
        "type": "int",
        "args": [
          {
            "name": "cond",
            "type": "pthread_cond_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_COND_INIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr)",
        "name": "pthread_cond_init",
        "type": "int",
        "args": [
          {
            "name": "cond",
            "type": "pthread_cond_t *"
          },
          {
            "name": "attr",
            "type": "const pthread_condattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_COND_SIGNAL(3)": {
    "functions": [
      {
        "prototype": "int pthread_cond_signal(pthread_cond_t *cond)",
        "name": "pthread_cond_signal",
        "type": "int",
        "args": [
          {
            "name": "cond",
            "type": "pthread_cond_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_COND_TIMEDWAIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime)",
        "name": "pthread_cond_timedwait",
        "type": "int",
        "args": [
          {
            "name": "cond",
            "type": "pthread_cond_t *"
          },
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          },
          {
            "name": "abstime",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_COND_WAIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)",
        "name": "pthread_cond_wait",
        "type": "int",
        "args": [
          {
            "name": "cond",
            "type": "pthread_cond_t *"
          },
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_CONDATTR(3)": {
    "functions": [
      {
        "prototype": "int pthread_condattr_init(pthread_condattr_t *attr)",
        "name": "pthread_condattr_init",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_condattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_condattr_destroy(pthread_condattr_t *attr)",
        "name": "pthread_condattr_destroy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_condattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_condattr_getclock(pthread_condattr_t * restrict attr, clockid_t * restrict clock_id)",
        "name": "pthread_condattr_getclock",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_condattr_t * restrict"
          },
          {
            "name": "clock_id",
            "type": "clockid_t * restrict"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_condattr_setclock(pthread_condattr_t *attr, clockid_t clock_id)",
        "name": "pthread_condattr_setclock",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_condattr_t *"
          },
          {
            "name": "clock_id",
            "type": "clockid_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_condattr_getpshared(pthread_condattr_t * restrict attr, int * restrict pshared)",
        "name": "pthread_condattr_getpshared",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_condattr_t * restrict"
          },
          {
            "name": "pshared",
            "type": "int * restrict"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared)",
        "name": "pthread_condattr_setpshared",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_condattr_t *"
          },
          {
            "name": "pshared",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_CREATE(3)": {
    "functions": [
      {
        "prototype": "int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)",
        "name": "pthread_create",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t *"
          },
          {
            "name": "attr",
            "type": "const pthread_attr_t *"
          },
          {
            "name": "start_routine",
            "type": "void *(*)(void *)"
          },
          {
            "name": "arg",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_DETACH(3)": {
    "functions": [
      {
        "prototype": "int pthread_detach(pthread_t thread)",
        "name": "pthread_detach",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_EQUAL(3)": {
    "functions": [
      {
        "prototype": "int pthread_equal(pthread_t t1, pthread_t t2)",
        "name": "pthread_equal",
        "type": "int",
        "args": [
          {
            "name": "t1",
            "type": "pthread_t"
          },
          {
            "name": "t2",
            "type": "pthread_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_EXIT(3)": {
    "functions": [
      {
        "prototype": "void pthread_exit(void *value_ptr)",
        "name": "pthread_exit",
        "type": "void",
        "args": [
          {
            "name": "value_ptr",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_GETCONCURRENCY(3)": {
    "functions": [
      {
        "prototype": "int pthread_getconcurrency(void)",
        "name": "pthread_getconcurrency",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_setconcurrency(int new_level)",
        "name": "pthread_setconcurrency",
        "type": "int",
        "args": [
          {
            "name": "new_level",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_GETCPUCLOCKID(3)": {
    "functions": [
      {
        "prototype": "int pthread_getcpuclockid(pthread_t thread_id, clockid_t *clock_id)",
        "name": "pthread_getcpuclockid",
        "type": "int",
        "args": [
          {
            "name": "thread_id",
            "type": "pthread_t"
          },
          {
            "name": "clock_id",
            "type": "clockid_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>",
          "#include <time.h>"
        ]
      }
    ]
  },
  "PTHREAD_SCHEDPARAM(3)": {
    "functions": [
      {
        "prototype": "int pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param)",
        "name": "pthread_setschedparam",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "policy",
            "type": "int"
          },
          {
            "name": "param",
            "type": "const struct sched_param *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_getschedparam(pthread_t thread, int *policy, struct sched_param *param)",
        "name": "pthread_getschedparam",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "policy",
            "type": "int *"
          },
          {
            "name": "param",
            "type": "struct sched_param *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_GETSPECIFIC(3)": {
    "functions": [
      {
        "prototype": "void * pthread_getspecific(pthread_key_t key)",
        "name": "pthread_getspecific",
        "type": "void *",
        "args": [
          {
            "name": "key",
            "type": "pthread_key_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_GETTHREADID_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_getthreadid_np(void)",
        "name": "pthread_getthreadid_np",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_JOIN(3)": {
    "functions": [
      {
        "prototype": "int pthread_join(pthread_t thread, void **value_ptr)",
        "name": "pthread_join",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "value_ptr",
            "type": "void **"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_timedjoin_np(pthread_t thread, void **value_ptr, const struct timespec *abstime)",
        "name": "pthread_timedjoin_np",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "value_ptr",
            "type": "void **"
          },
          {
            "name": "abstime",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <pthread.h>",
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_KEY_CREATE(3)": {
    "functions": [
      {
        "prototype": "int pthread_key_create(pthread_key_t *key, void (*destructor)(void *))",
        "name": "pthread_key_create",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "pthread_key_t *"
          },
          {
            "name": "destructor",
            "type": "void (*)(void *)"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_KEY_DELETE(3)": {
    "functions": [
      {
        "prototype": "int pthread_key_delete(pthread_key_t key)",
        "name": "pthread_key_delete",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "pthread_key_t"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_KILL(3)": {
    "functions": [
      {
        "prototype": "int pthread_kill(pthread_t thread, int sig)",
        "name": "pthread_kill",
        "type": "int",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>",
          "#include <signal.h>"
        ]
      }
    ]
  },
  "PTHREAD_MAIN_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_main_np(void)",
        "name": "pthread_main_np",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_MULTI_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_multi_np(void)",
        "name": "pthread_multi_np",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      },
      {
        "prototype": "int pthread_single_np(void)",
        "name": "pthread_single_np",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_CONSISTENT(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_consistent(pthread_mutex_t *mutex)",
        "name": "pthread_mutex_consistent",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_DESTROY(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_destroy(pthread_mutex_t *mutex)",
        "name": "pthread_mutex_destroy",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_INIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr)",
        "name": "pthread_mutex_init",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          },
          {
            "name": "attr",
            "type": "const pthread_mutexattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_LOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_lock(pthread_mutex_t *mutex)",
        "name": "pthread_mutex_lock",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_TIMEDLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_timedlock(pthread_mutex_t *mutex, const struct timespec *abs_timeout)",
        "name": "pthread_mutex_timedlock",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          },
          {
            "name": "abs_timeout",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <pthread.h>",
          "#include <time.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_TRYLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_trylock(pthread_mutex_t *mutex)",
        "name": "pthread_mutex_trylock",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEX_UNLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutex_unlock(pthread_mutex_t *mutex)",
        "name": "pthread_mutex_unlock",
        "type": "int",
        "args": [
          {
            "name": "mutex",
            "type": "pthread_mutex_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEXATTR(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutexattr_init(pthread_mutexattr_t *attr)",
        "name": "pthread_mutexattr_init",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_destroy(pthread_mutexattr_t *attr)",
        "name": "pthread_mutexattr_destroy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int prioceiling)",
        "name": "pthread_mutexattr_setprioceiling",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "prioceiling",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_getprioceiling(pthread_mutexattr_t *attr, int *prioceiling)",
        "name": "pthread_mutexattr_getprioceiling",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "prioceiling",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int protocol)",
        "name": "pthread_mutexattr_setprotocol",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "protocol",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_getprotocol(pthread_mutexattr_t *attr, int *protocol)",
        "name": "pthread_mutexattr_getprotocol",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "protocol",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setrobust(pthread_mutexattr_t *attr, int robust)",
        "name": "pthread_mutexattr_setrobust",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "robust",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_getrobust(pthread_mutexattr_t *attr, int *robust)",
        "name": "pthread_mutexattr_getrobust",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "robust",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type)",
        "name": "pthread_mutexattr_settype",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "type",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_gettype(pthread_mutexattr_t *attr, int *type)",
        "name": "pthread_mutexattr_gettype",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "type",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_MUTEXATTR_GETKIND_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_mutexattr_getkind_np(pthread_mutexattr_t attr)",
        "name": "pthread_mutexattr_getkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      },
      {
        "prototype": "int pthread_mutexattr_setkind_np(pthread_mutexattr_t *attr, int kind)",
        "name": "pthread_mutexattr_setkind_np",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_mutexattr_t *"
          },
          {
            "name": "kind",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_ONCE(3)": {
    "functions": [
      {
        "prototype": "int pthread_once(pthread_once_t *once_control, void (*init_routine)(void))",
        "name": "pthread_once",
        "type": "int",
        "args": [
          {
            "name": "once_control",
            "type": "pthread_once_t *"
          },
          {
            "name": "init_routine",
            "type": "void (*)(void)"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RESUME_ALL_NP(3)": {
    "functions": [
      {
        "prototype": "void pthread_resume_all_np(void)",
        "name": "pthread_resume_all_np",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_RESUME_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_resume_np(pthread_t tid)",
        "name": "pthread_resume_np",
        "type": "int",
        "args": [
          {
            "name": "tid",
            "type": "pthread_t"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_DESTROY(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_destroy(pthread_rwlock_t *lock)",
        "name": "pthread_rwlock_destroy",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_INIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_init(pthread_rwlock_t *lock, const pthread_rwlockattr_t *attr)",
        "name": "pthread_rwlock_init",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          },
          {
            "name": "attr",
            "type": "const pthread_rwlockattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_RDLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_rdlock(pthread_rwlock_t *lock)",
        "name": "pthread_rwlock_rdlock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlock_tryrdlock(pthread_rwlock_t *lock)",
        "name": "pthread_rwlock_tryrdlock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_TIMEDRDLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_timedrdlock(pthread_rwlock_t *rwlock, const struct timespec *abs_timeout)",
        "name": "pthread_rwlock_timedrdlock",
        "type": "int",
        "args": [
          {
            "name": "rwlock",
            "type": "pthread_rwlock_t *"
          },
          {
            "name": "abs_timeout",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_TIMEDWRLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_timedwrlock(pthread_rwlock_t *rwlock, const struct timespec *abs_timeout)",
        "name": "pthread_rwlock_timedwrlock",
        "type": "int",
        "args": [
          {
            "name": "rwlock",
            "type": "pthread_rwlock_t *"
          },
          {
            "name": "abs_timeout",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_WRLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_wrlock(pthread_rwlock_t *lock)",
        "name": "pthread_rwlock_wrlock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_rwlock_trywrlock(pthread_rwlock_t *lock)",
        "name": "pthread_rwlock_trywrlock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCK_UNLOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlock_unlock(pthread_rwlock_t *lock)",
        "name": "pthread_rwlock_unlock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_rwlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCKATTR_DESTROY(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr)",
        "name": "pthread_rwlockattr_destroy",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_rwlockattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCKATTR_GETPSHARED(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared)",
        "name": "pthread_rwlockattr_getpshared",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "const pthread_rwlockattr_t *"
          },
          {
            "name": "pshared",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCKATTR_INIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlockattr_init(pthread_rwlockattr_t *attr)",
        "name": "pthread_rwlockattr_init",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_rwlockattr_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_RWLOCKATTR_SETPSHARED(3)": {
    "functions": [
      {
        "prototype": "int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared)",
        "name": "pthread_rwlockattr_setpshared",
        "type": "int",
        "args": [
          {
            "name": "attr",
            "type": "pthread_rwlockattr_t *"
          },
          {
            "name": "pshared",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_SELF(3)": {
    "functions": [
      {
        "prototype": "pthread_t pthread_self(void)",
        "name": "pthread_self",
        "type": "pthread_t",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_SET_NAME_NP(3)": {
    "functions": [
      {
        "prototype": "void pthread_set_name_np(pthread_t thread, const char *name)",
        "name": "pthread_set_name_np",
        "type": "void",
        "args": [
          {
            "name": "thread",
            "type": "pthread_t"
          },
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_TESTCANCEL(3)": {
    "functions": [
      {
        "prototype": "int pthread_setcancelstate(int state, int *oldstate)",
        "name": "pthread_setcancelstate",
        "type": "int",
        "args": [
          {
            "name": "state",
            "type": "int"
          },
          {
            "name": "oldstate",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_setcanceltype(int type, int *oldtype)",
        "name": "pthread_setcanceltype",
        "type": "int",
        "args": [
          {
            "name": "type",
            "type": "int"
          },
          {
            "name": "oldtype",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "void pthread_testcancel(void)",
        "name": "pthread_testcancel",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_SETSPECIFIC(3)": {
    "functions": [
      {
        "prototype": "int pthread_setspecific(pthread_key_t key, const void *value)",
        "name": "pthread_setspecific",
        "type": "int",
        "args": [
          {
            "name": "key",
            "type": "pthread_key_t"
          },
          {
            "name": "value",
            "type": "const void *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_SIGMASK(3)": {
    "functions": [
      {
        "prototype": "int pthread_sigmask(int how, const sigset_t * restrict set, sigset_t * restrict oset)",
        "name": "pthread_sigmask",
        "type": "int",
        "args": [
          {
            "name": "how",
            "type": "int"
          },
          {
            "name": "set",
            "type": "const sigset_t * restrict"
          },
          {
            "name": "oset",
            "type": "sigset_t * restrict"
          }
        ],
        "includes": [
          "#include <pthread.h>",
          "#include <signal.h>"
        ]
      }
    ]
  },
  "PTHREAD_SPIN_INIT(3)": {
    "functions": [
      {
        "prototype": "int pthread_spin_init(pthread_spinlock_t *lock, int pshared)",
        "name": "pthread_spin_init",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_spinlock_t *"
          },
          {
            "name": "pshared",
            "type": "int"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_spin_destroy(pthread_spinlock_t *lock)",
        "name": "pthread_spin_destroy",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_spinlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_SPIN_LOCK(3)": {
    "functions": [
      {
        "prototype": "int pthread_spin_lock(pthread_spinlock_t *lock)",
        "name": "pthread_spin_lock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_spinlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_spin_trylock(pthread_spinlock_t *lock)",
        "name": "pthread_spin_trylock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_spinlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      },
      {
        "prototype": "int pthread_spin_unlock(pthread_spinlock_t *lock)",
        "name": "pthread_spin_unlock",
        "type": "int",
        "args": [
          {
            "name": "lock",
            "type": "pthread_spinlock_t *"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "PTHREAD_SUSPEND_ALL_NP(3)": {
    "functions": [
      {
        "prototype": "void pthread_suspend_all_np(void)",
        "name": "pthread_suspend_all_np",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_SUSPEND_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_suspend_np(pthread_t tid)",
        "name": "pthread_suspend_np",
        "type": "int",
        "args": [
          {
            "name": "tid",
            "type": "pthread_t"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_SWITCH_ADD_NP(3)": {
    "functions": [
      {
        "prototype": "int pthread_switch_add_np(pthread_switch_routine_t routine)",
        "name": "pthread_switch_add_np",
        "type": "int",
        "args": [
          {
            "name": "routine",
            "type": "pthread_switch_routine_t"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      },
      {
        "prototype": "int pthread_switch_delete_np(pthread_switch_routine_t routine)",
        "name": "pthread_switch_delete_np",
        "type": "int",
        "args": [
          {
            "name": "routine",
            "type": "pthread_switch_routine_t"
          }
        ],
        "includes": [
          "#include <pthread_np.h>"
        ]
      }
    ]
  },
  "PTHREAD_YIELD(3)": {
    "functions": [
      {
        "prototype": "void pthread_yield(void)",
        "name": "pthread_yield",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <pthread.h>"
        ]
      }
    ]
  },
  "QUERYLOCALE(3)": {
    "functions": [
      {
        "prototype": "const char * querylocale(int mask, locale_t locale)",
        "name": "querylocale",
        "type": "const char *",
        "args": [
          {
            "name": "mask",
            "type": "int"
          },
          {
            "name": "locale",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      }
    ]
  },
  "QUICK_EXIT(3)": {
    "functions": [
      {
        "prototype": "_Noreturn void quick_exit(int status)",
        "name": "quick_exit",
        "type": "_Noreturn void",
        "args": [
          {
            "name": "status",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "RADIXSORT(3)": {
    "functions": [
      {
        "prototype": "int radixsort(const unsigned char **base, int nmemb, const unsigned char *table, unsigned endbyte)",
        "name": "radixsort",
        "type": "int",
        "args": [
          {
            "name": "base",
            "type": "const unsigned char **"
          },
          {
            "name": "nmemb",
            "type": "int"
          },
          {
            "name": "table",
            "type": "const unsigned char *"
          },
          {
            "name": "endbyte",
            "type": "unsigned"
          }
        ],
        "includes": [
          "#include <limits.h>",
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int sradixsort(const unsigned char **base, int nmemb, const unsigned char *table, unsigned endbyte)",
        "name": "sradixsort",
        "type": "int",
        "args": [
          {
            "name": "base",
            "type": "const unsigned char **"
          },
          {
            "name": "nmemb",
            "type": "int"
          },
          {
            "name": "table",
            "type": "const unsigned char *"
          },
          {
            "name": "endbyte",
            "type": "unsigned"
          }
        ],
        "includes": [
          "#include <limits.h>",
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "RAISE(3)": {
    "functions": [
      {
        "prototype": "int raise(int sig)",
        "name": "raise",
        "type": "int",
        "args": [
          {
            "name": "sig",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "RAND(3)": {
    "functions": [
      {
        "prototype": "void srand(unsigned seed)",
        "name": "srand",
        "type": "void",
        "args": [
          {
            "name": "seed",
            "type": "unsigned"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "void sranddev(void)",
        "name": "sranddev",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int rand(void)",
        "name": "rand",
        "type": "int",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "int rand_r(unsigned *ctx)",
        "name": "rand_r",
        "type": "int",
        "args": [
          {
            "name": "ctx",
            "type": "unsigned *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "REALLOCARRAY(3)": {
    "functions": [
      {
        "prototype": "void * reallocarray(void *ptr, size_t nmemb, size_t size)",
        "name": "reallocarray",
        "type": "void *",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "nmemb",
            "type": "size_t"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "MALLOC(3)": {
    "functions": [
      {
        "prototype": "void * reallocf(void *ptr, size_t size)",
        "name": "reallocf",
        "type": "void *",
        "args": [
          {
            "name": "ptr",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "REALPATH(3)": {
    "functions": [
      {
        "prototype": "char * realpath(const char * restrict pathname, char * restrict resolved_path)",
        "name": "realpath",
        "type": "char *",
        "args": [
          {
            "name": "pathname",
            "type": "const char * restrict"
          },
          {
            "name": "resolved_path",
            "type": "char * restrict"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "REGEX(3)": {
    "functions": [
      {
        "prototype": "int regcomp(regex_t * restrict preg, const char * restrict pattern, int cflags)",
        "name": "regcomp",
        "type": "int",
        "args": [
          {
            "name": "preg",
            "type": "regex_t * restrict"
          },
          {
            "name": "pattern",
            "type": "const char * restrict"
          },
          {
            "name": "cflags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <regex.h>"
        ]
      },
      {
        "prototype": "int regexec(const regex_t * restrict preg, const char * restrict string, size_t nmatch, regmatch_t pmatch[restrict], int eflags)",
        "name": "regexec",
        "type": "int",
        "args": [
          {
            "name": "preg",
            "type": "const regex_t * restrict"
          },
          {
            "name": "string",
            "type": "const char * restrict"
          },
          {
            "name": "nmatch",
            "type": "size_t"
          },
          {
            "name": "pmatch",
            "type": "regmatch_t [restrict]"
          },
          {
            "name": "eflags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <regex.h>"
        ]
      },
      {
        "prototype": "size_t regerror(int errcode, const regex_t * restrict preg, char * restrict errbuf, size_t errbuf_size)",
        "name": "regerror",
        "type": "size_t",
        "args": [
          {
            "name": "errcode",
            "type": "int"
          },
          {
            "name": "preg",
            "type": "const regex_t * restrict"
          },
          {
            "name": "errbuf",
            "type": "char * restrict"
          },
          {
            "name": "errbuf_size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <regex.h>"
        ]
      },
      {
        "prototype": "void regfree(regex_t *preg)",
        "name": "regfree",
        "type": "void",
        "args": [
          {
            "name": "preg",
            "type": "regex_t *"
          }
        ],
        "includes": [
          "#include <regex.h>"
        ]
      }
    ]
  },
  "REMAINDER(3)": {
    "functions": [
      {
        "prototype": "double remainder(double x, double y)",
        "name": "remainder",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float remainderf(float x, float y)",
        "name": "remainderf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double remainderl(long double x, long double y)",
        "name": "remainderl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double remquo(double x, double y, int *quo)",
        "name": "remquo",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "y",
            "type": "double"
          },
          {
            "name": "quo",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float remquof(float x, float y, int *quo)",
        "name": "remquof",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "y",
            "type": "float"
          },
          {
            "name": "quo",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double remquol(long double x, long double y, int *quo)",
        "name": "remquol",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "y",
            "type": "long double"
          },
          {
            "name": "quo",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "REMOVE(3)": {
    "functions": [
      {
        "prototype": "int remove(const char *path)",
        "name": "remove",
        "type": "int",
        "args": [
          {
            "name": "path",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "RFORK_THREAD(3)": {
    "functions": [
      {
        "prototype": "pid_t rfork_thread(int flags, void *stack, int (*func)(void *arg), void *arg)",
        "name": "rfork_thread",
        "type": "pid_t",
        "args": [
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "stack",
            "type": "void *"
          },
          {
            "name": "func",
            "type": "int (*)(void *arg)"
          },
          {
            "name": "arg",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "ROUND(3)": {
    "functions": [
      {
        "prototype": "double round(double x)",
        "name": "round",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float roundf(float x)",
        "name": "roundf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double roundl(long double x)",
        "name": "roundl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "RPC(3)": {
    "functions": [

    ]
  },
  "RPC_SVC_CREATE(3)": {
    "functions": [
      {
        "prototype": "bool_t svc_control(SVCXPRT *svc, const u_int req, void *info)",
        "name": "svc_control",
        "type": "bool_t",
        "args": [
          {
            "name": "svc",
            "type": "SVCXPRT *"
          },
          {
            "name": "req",
            "type": "const u_int"
          },
          {
            "name": "info",
            "type": "void *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "int svc_create(void (*dispatch)(struct svc_req *, SVCXPRT *), const rpcprog_t prognum, const rpcvers_t versnum, const char *nettype)",
        "name": "svc_create",
        "type": "int",
        "args": [
          {
            "name": "dispatch",
            "type": "void (*)(struct svc_req *, SVCXPRT *)"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "nettype",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "SVCXPRT * svc_dg_create(const int fildes, const u_int sendsz, const u_int recvsz)",
        "name": "svc_dg_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "sendsz",
            "type": "const u_int"
          },
          {
            "name": "recvsz",
            "type": "const u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svc_destroy(SVCXPRT *xprt)",
        "name": "svc_destroy",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "SVCXPRT * svc_fd_create(const int fildes, const u_int sendsz, const u_int recvsz)",
        "name": "svc_fd_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "sendsz",
            "type": "const u_int"
          },
          {
            "name": "recvsz",
            "type": "const u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "SVCXPRT * svc_raw_create(void)",
        "name": "svc_raw_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "SVCXPRT * svc_tli_create(const int fildes, const struct netconfig *netconf, const struct t_bind *bindaddr, const u_int sendsz, const u_int recvsz)",
        "name": "svc_tli_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "bindaddr",
            "type": "const struct t_bind *"
          },
          {
            "name": "sendsz",
            "type": "const u_int"
          },
          {
            "name": "recvsz",
            "type": "const u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "SVCXPRT * svc_tp_create(void (*dispatch)(struct svc_req *, SVCXPRT *), const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf)",
        "name": "svc_tp_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": "dispatch",
            "type": "void (*)(struct svc_req *, SVCXPRT *)"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "SVCXPRT * svc_vc_create(const int fildes, const u_int sendsz, const u_int recvsz)",
        "name": "svc_vc_create",
        "type": "SVCXPRT *",
        "args": [
          {
            "name": "fildes",
            "type": "const int"
          },
          {
            "name": "sendsz",
            "type": "const u_int"
          },
          {
            "name": "recvsz",
            "type": "const u_int"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "RPC_SVC_ERR(3)": {
    "functions": [
      {
        "prototype": "void svcerr_auth(SVCXPRT *xprt, enum auth_stat why)",
        "name": "svcerr_auth",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          },
          {
            "name": "why",
            "type": "enum auth_stat"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svcerr_decode(SVCXPRT *xprt)",
        "name": "svcerr_decode",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svcerr_noproc(SVCXPRT *xprt)",
        "name": "svcerr_noproc",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svcerr_noprog(SVCXPRT *xprt)",
        "name": "svcerr_noprog",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svcerr_progvers(SVCXPRT *xprt, rpcvers_t low_vers, rpcvers_t high_vers)",
        "name": "svcerr_progvers",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          },
          {
            "name": "low_vers",
            "type": "rpcvers_t"
          },
          {
            "name": "high_vers",
            "type": "rpcvers_t"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svcerr_systemerr(SVCXPRT *xprt)",
        "name": "svcerr_systemerr",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "void svcerr_weakauth(SVCXPRT *xprt)",
        "name": "svcerr_weakauth",
        "type": "void",
        "args": [
          {
            "name": "xprt",
            "type": "SVCXPRT *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "RPC_XDR(3)": {
    "functions": [
      {
        "prototype": "bool_t xdr_accepted_reply(XDR *xdrs, struct accepted_reply *ar)",
        "name": "xdr_accepted_reply",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "ar",
            "type": "struct accepted_reply *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t xdr_authsys_parms(XDR *xdrs, struct authsys_parms *aupp)",
        "name": "xdr_authsys_parms",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "aupp",
            "type": "struct authsys_parms *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t xdr_callhdr(XDR *xdrs, struct rpc_msg *chdr)",
        "name": "xdr_callhdr",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "chdr",
            "type": "struct rpc_msg *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t xdr_callmsg(XDR *xdrs, struct rpc_msg *cmsg)",
        "name": "xdr_callmsg",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "cmsg",
            "type": "struct rpc_msg *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t xdr_opaque_auth(XDR *xdrs, struct opaque_auth *ap)",
        "name": "xdr_opaque_auth",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "ap",
            "type": "struct opaque_auth *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t xdr_rejected_reply(XDR *xdrs, struct rejected_reply *rr)",
        "name": "xdr_rejected_reply",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "rr",
            "type": "struct rejected_reply *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t xdr_replymsg(XDR *xdrs, struct rpc_msg *rmsg)",
        "name": "xdr_replymsg",
        "type": "bool_t",
        "args": [
          {
            "name": "xdrs",
            "type": "XDR *"
          },
          {
            "name": "rmsg",
            "type": "struct rpc_msg *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "RPCBIND(3)": {
    "functions": [
      {
        "prototype": "rpcblist * rpcb_getmaps(const struct netconfig *netconf, const char *host)",
        "name": "rpcb_getmaps",
        "type": "rpcblist *",
        "args": [
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "host",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t rpcb_getaddr(const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf, struct netbuf *svcaddr, const char *host)",
        "name": "rpcb_getaddr",
        "type": "bool_t",
        "args": [
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "svcaddr",
            "type": "struct netbuf *"
          },
          {
            "name": "host",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t rpcb_gettime(const char *host, time_t * timep)",
        "name": "rpcb_gettime",
        "type": "bool_t",
        "args": [
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "timep",
            "type": "time_t *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "enum clnt_stat rpcb_rmtcall(const struct netconfig *netconf, const char *host, const rpcprog_t prognum, const rpcvers_t versnum, const rpcproc_t procnum, const xdrproc_t inproc, const caddr_t in, const xdrproc_t outproc, const caddr_t out, const struct timeval tout, const struct netbuf *svcaddr)",
        "name": "rpcb_rmtcall",
        "type": "enum clnt_stat",
        "args": [
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "host",
            "type": "const char *"
          },
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "procnum",
            "type": "const rpcproc_t"
          },
          {
            "name": "inproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "in",
            "type": "const caddr_t"
          },
          {
            "name": "outproc",
            "type": "const xdrproc_t"
          },
          {
            "name": "out",
            "type": "const caddr_t"
          },
          {
            "name": "tout",
            "type": "const struct timeval"
          },
          {
            "name": "svcaddr",
            "type": "const struct netbuf *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t rpcb_set(const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf, const struct netbuf *svcaddr)",
        "name": "rpcb_set",
        "type": "bool_t",
        "args": [
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          },
          {
            "name": "svcaddr",
            "type": "const struct netbuf *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      },
      {
        "prototype": "bool_t rpcb_unset(const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf)",
        "name": "rpcb_unset",
        "type": "bool_t",
        "args": [
          {
            "name": "prognum",
            "type": "const rpcprog_t"
          },
          {
            "name": "versnum",
            "type": "const rpcvers_t"
          },
          {
            "name": "netconf",
            "type": "const struct netconfig *"
          }
        ],
        "includes": [
          "#include <rpc/rpc.h>"
        ]
      }
    ]
  },
  "RPMATCH(3)": {
    "functions": [
      {
        "prototype": "int rpmatch(const char *response)",
        "name": "rpmatch",
        "type": "int",
        "args": [
          {
            "name": "response",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "RTIME(3)": {
    "functions": [
      {
        "prototype": "int rtime(struct sockaddr_in *addrp, struct timeval *timep, struct timeval *timeout)",
        "name": "rtime",
        "type": "int",
        "args": [
          {
            "name": "addrp",
            "type": "struct sockaddr_in *"
          },
          {
            "name": "timep",
            "type": "struct timeval *"
          },
          {
            "name": "timeout",
            "type": "struct timeval *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/time.h>",
          "#include <netinet/in.h>"
        ]
      }
    ]
  },
  "SCALBN(3)": {
    "functions": [
      {
        "prototype": "double scalbln(double x, long n)",
        "name": "scalbln",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "n",
            "type": "long"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float scalblnf(float x, long n)",
        "name": "scalblnf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "n",
            "type": "long"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double scalblnl(long double x, long n)",
        "name": "scalblnl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "n",
            "type": "long"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "double scalbn(double x, int n)",
        "name": "scalbn",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "n",
            "type": "int"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float scalbnf(float x, int n)",
        "name": "scalbnf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "n",
            "type": "int"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double scalbnl(long double x, int n)",
        "name": "scalbnl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "n",
            "type": "int"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "SCTP_BINDX(3)": {
    "functions": [
      {
        "prototype": "int sctp_bindx(int s, struct sockaddr *addrs, int num, int type)",
        "name": "sctp_bindx",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "addrs",
            "type": "struct sockaddr *"
          },
          {
            "name": "num",
            "type": "int"
          },
          {
            "name": "type",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_CONNECTX(3)": {
    "functions": [
      {
        "prototype": "int sctp_connectx(int sd, struct sockaddr *addrs, int addrcnt, sctp_assoc_t *id)",
        "name": "sctp_connectx",
        "type": "int",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "addrs",
            "type": "struct sockaddr *"
          },
          {
            "name": "addrcnt",
            "type": "int"
          },
          {
            "name": "id",
            "type": "sctp_assoc_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_FREEPADDRS(3)": {
    "functions": [
      {
        "prototype": "void sctp_freepaddrs(struct sockaddr *)",
        "name": "sctp_freepaddrs",
        "type": "void",
        "args": [
          {
            "name": "_arg_1",
            "type": "struct sockaddr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      },
      {
        "prototype": "void sctp_freeladdrs(struct sockaddr *)",
        "name": "sctp_freeladdrs",
        "type": "void",
        "args": [
          {
            "name": "_arg_1",
            "type": "struct sockaddr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_GETADDRLEN(3)": {
    "functions": [
      {
        "prototype": "int sctp_getaddrlen(sa_family_t family)",
        "name": "sctp_getaddrlen",
        "type": "int",
        "args": [
          {
            "name": "family",
            "type": "sa_family_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_GETASSOCID(3)": {
    "functions": [
      {
        "prototype": "sctp_assoc_t sctp_getassocid(int s, struct sockaddr *addr)",
        "name": "sctp_getassocid",
        "type": "sctp_assoc_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "addr",
            "type": "struct sockaddr *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_GETPADDRS(3)": {
    "functions": [
      {
        "prototype": "int sctp_getpaddrs(int s, sctp_assoc_t asocid, struct sockaddr **addrs)",
        "name": "sctp_getpaddrs",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "asocid",
            "type": "sctp_assoc_t"
          },
          {
            "name": "addrs",
            "type": "struct sockaddr **"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      },
      {
        "prototype": "int sctp_getladdrs(int s, sctp_assoc_t asocid, struct sockaddr **addrs)",
        "name": "sctp_getladdrs",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "asocid",
            "type": "sctp_assoc_t"
          },
          {
            "name": "addrs",
            "type": "struct sockaddr **"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_OPT_INFO(3)": {
    "functions": [
      {
        "prototype": "int sctp_opt_info(int sd, sctp_assoc_t id, int opt, void *arg, socklen_t *size)",
        "name": "sctp_opt_info",
        "type": "int",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "id",
            "type": "sctp_assoc_t"
          },
          {
            "name": "opt",
            "type": "int"
          },
          {
            "name": "arg",
            "type": "void *"
          },
          {
            "name": "size",
            "type": "socklen_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_RECVMSG(3)": {
    "functions": [
      {
        "prototype": "ssize_t sctp_recvmsg(int s, void *msg, size_t len, struct sockaddr * restrict from, socklen_t * restrict fromlen, struct sctp_sndrcvinfo *sinfo, int *flags)",
        "name": "sctp_recvmsg",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "from",
            "type": "struct sockaddr * restrict"
          },
          {
            "name": "fromlen",
            "type": "socklen_t * restrict"
          },
          {
            "name": "sinfo",
            "type": "struct sctp_sndrcvinfo *"
          },
          {
            "name": "flags",
            "type": "int *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_SEND(3)": {
    "functions": [
      {
        "prototype": "ssize_t sctp_send(int sd, const void *msg, size_t len, const struct sctp_sndrcvinfo *sinfo, int flags)",
        "name": "sctp_send",
        "type": "ssize_t",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "sinfo",
            "type": "const struct sctp_sndrcvinfo *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      },
      {
        "prototype": "ssize_t sctp_sendx(int sd, const void *msg, size_t len, struct sockaddr *addrs, int addrcnt, const struct sctp_sndrcvinfo *sinfo, int flags)",
        "name": "sctp_sendx",
        "type": "ssize_t",
        "args": [
          {
            "name": "sd",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "addrs",
            "type": "struct sockaddr *"
          },
          {
            "name": "addrcnt",
            "type": "int"
          },
          {
            "name": "sinfo",
            "type": "const struct sctp_sndrcvinfo *"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SCTP_SENDMSG(3)": {
    "functions": [
      {
        "prototype": "ssize_t sctp_sendmsg(int s, const void *msg, size_t len, const struct sockaddr *to, socklen_t tolen, uint32_t ppid, uint32_t flags, uint16_t stream_no, uint32_t timetolive, uint32_t context)",
        "name": "sctp_sendmsg",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "to",
            "type": "const struct sockaddr *"
          },
          {
            "name": "tolen",
            "type": "socklen_t"
          },
          {
            "name": "ppid",
            "type": "uint32_t"
          },
          {
            "name": "flags",
            "type": "uint32_t"
          },
          {
            "name": "stream_no",
            "type": "uint16_t"
          },
          {
            "name": "timetolive",
            "type": "uint32_t"
          },
          {
            "name": "context",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      },
      {
        "prototype": "ssize_t sctp_sendmsgx(int s, const void *msg, size_t len, const struct sockaddr *to, int addrcnt, uint32_t ppid, uint32_t flags, uint16_t stream_no, uint32_t timetolive, uint32_t context)",
        "name": "sctp_sendmsgx",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "int"
          },
          {
            "name": "msg",
            "type": "const void *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "to",
            "type": "const struct sockaddr *"
          },
          {
            "name": "addrcnt",
            "type": "int"
          },
          {
            "name": "ppid",
            "type": "uint32_t"
          },
          {
            "name": "flags",
            "type": "uint32_t"
          },
          {
            "name": "stream_no",
            "type": "uint16_t"
          },
          {
            "name": "timetolive",
            "type": "uint32_t"
          },
          {
            "name": "context",
            "type": "uint32_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/socket.h>",
          "#include <netinet/sctp.h>"
        ]
      }
    ]
  },
  "SEM_TIMEDWAIT(3)": {
    "functions": [
      {
        "prototype": "int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout)",
        "name": "sem_timedwait",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          },
          {
            "name": "abs_timeout",
            "type": "const struct timespec *"
          }
        ],
        "includes": [
          "#include <semaphore.h>",
          "#include <time.h>"
        ]
      },
      {
        "prototype": "int sem_clockwait_np(sem_t * restrict sem, clockid_t clock_id, int flags, const struct timespec * rqtp, struct timespec * rmtp)",
        "name": "sem_clockwait_np",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t * restrict"
          },
          {
            "name": "clock_id",
            "type": "clockid_t"
          },
          {
            "name": "flags",
            "type": "int"
          },
          {
            "name": "rqtp",
            "type": "const struct timespec *"
          },
          {
            "name": "rmtp",
            "type": "struct timespec *"
          }
        ],
        "includes": [
          "#include <semaphore.h>",
          "#include <time.h>"
        ]
      }
    ]
  },
  "SEM_OPEN(3)": {
    "functions": [
      {
        "prototype": "sem_t * sem_open(const char *name, int oflag, ...)",
        "name": "sem_open",
        "type": "sem_t *",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "oflag",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      },
      {
        "prototype": "int sem_close(sem_t *sem)",
        "name": "sem_close",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      },
      {
        "prototype": "int sem_unlink(const char *name)",
        "name": "sem_unlink",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      }
    ]
  },
  "SEM_DESTROY(3)": {
    "functions": [
      {
        "prototype": "int sem_destroy(sem_t *sem)",
        "name": "sem_destroy",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      }
    ]
  },
  "SEM_GETVALUE(3)": {
    "functions": [
      {
        "prototype": "int sem_getvalue(sem_t * restrict sem, int * restrict sval)",
        "name": "sem_getvalue",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t * restrict"
          },
          {
            "name": "sval",
            "type": "int * restrict"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      }
    ]
  },
  "SEM_INIT(3)": {
    "functions": [
      {
        "prototype": "int sem_init(sem_t *sem, int pshared, unsigned int value)",
        "name": "sem_init",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          },
          {
            "name": "pshared",
            "type": "int"
          },
          {
            "name": "value",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      }
    ]
  },
  "SEM_POST(3)": {
    "functions": [
      {
        "prototype": "int sem_post(sem_t *sem)",
        "name": "sem_post",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      }
    ]
  },
  "SEM_WAIT(3)": {
    "functions": [
      {
        "prototype": "int sem_wait(sem_t *sem)",
        "name": "sem_wait",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      },
      {
        "prototype": "int sem_trywait(sem_t *sem)",
        "name": "sem_trywait",
        "type": "int",
        "args": [
          {
            "name": "sem",
            "type": "sem_t *"
          }
        ],
        "includes": [
          "#include <semaphore.h>"
        ]
      }
    ]
  },
  "SETBUF(3)": {
    "functions": [
      {
        "prototype": "void setbuf(FILE * restrict stream, char * restrict buf)",
        "name": "setbuf",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "buf",
            "type": "char * restrict"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "void setbuffer(FILE *stream, char *buf, int size)",
        "name": "setbuffer",
        "type": "void",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          },
          {
            "name": "buf",
            "type": "char *"
          },
          {
            "name": "size",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int setlinebuf(FILE *stream)",
        "name": "setlinebuf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "int setvbuf(FILE * restrict stream, char * restrict buf, int mode, size_t size)",
        "name": "setvbuf",
        "type": "int",
        "args": [
          {
            "name": "stream",
            "type": "FILE * restrict"
          },
          {
            "name": "buf",
            "type": "char * restrict"
          },
          {
            "name": "mode",
            "type": "int"
          },
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "SETLOCALE(3)": {
    "functions": [
      {
        "prototype": "char * setlocale(int category, const char *locale)",
        "name": "setlocale",
        "type": "char *",
        "args": [
          {
            "name": "category",
            "type": "int"
          },
          {
            "name": "locale",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      }
    ]
  },
  "SETRUID(3)": {
    "functions": [
      {
        "prototype": "int setruid(uid_t ruid)",
        "name": "setruid",
        "type": "int",
        "args": [
          {
            "name": "ruid",
            "type": "uid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      },
      {
        "prototype": "int setrgid(gid_t rgid)",
        "name": "setrgid",
        "type": "int",
        "args": [
          {
            "name": "rgid",
            "type": "gid_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SIGSETOPS(3)": {
    "functions": [
      {
        "prototype": "int sigemptyset(sigset_t *set)",
        "name": "sigemptyset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigfillset(sigset_t *set)",
        "name": "sigfillset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigaddset(sigset_t *set, int signo)",
        "name": "sigaddset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          },
          {
            "name": "signo",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigdelset(sigset_t *set, int signo)",
        "name": "sigdelset",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "sigset_t *"
          },
          {
            "name": "signo",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      },
      {
        "prototype": "int sigismember(const sigset_t *set, int signo)",
        "name": "sigismember",
        "type": "int",
        "args": [
          {
            "name": "set",
            "type": "const sigset_t *"
          },
          {
            "name": "signo",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGINTERRUPT(3)": {
    "functions": [
      {
        "prototype": "int siginterrupt(int sig, int flag)",
        "name": "siginterrupt",
        "type": "int",
        "args": [
          {
            "name": "sig",
            "type": "int"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <signal.h>"
        ]
      }
    ]
  },
  "SIGNBIT(3)": {
    "functions": [

    ]
  },
  "SIN(3)": {
    "functions": [
      {
        "prototype": "double sin(double x)",
        "name": "sin",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float sinf(float x)",
        "name": "sinf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double sinl(long double x)",
        "name": "sinl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "SINCOS(3)": {
    "functions": [
      {
        "prototype": "void sincos(double x, double *s, double *c)",
        "name": "sincos",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "double"
          },
          {
            "name": "s",
            "type": "double *"
          },
          {
            "name": "c",
            "type": "double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincosf(float x, float *s, float *c)",
        "name": "sincosf",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "float"
          },
          {
            "name": "s",
            "type": "float *"
          },
          {
            "name": "c",
            "type": "float *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "void sincosl(long double x, long double *s, long double *c)",
        "name": "sincosl",
        "type": "void",
        "args": [
          {
            "name": "x",
            "type": "long double"
          },
          {
            "name": "s",
            "type": "long double *"
          },
          {
            "name": "c",
            "type": "long double *"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "SINH(3)": {
    "functions": [
      {
        "prototype": "double sinh(double x)",
        "name": "sinh",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float sinhf(float x)",
        "name": "sinhf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double sinhl(long double x)",
        "name": "sinhl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "STRINGLIST(3)": {
    "functions": [
      {
        "prototype": "StringList * sl_init()",
        "name": "sl_init",
        "type": "StringList *",
        "args": [

        ],
        "includes": [
          "#include <stringlist.h>"
        ]
      },
      {
        "prototype": "int sl_add(StringList *sl, char *item)",
        "name": "sl_add",
        "type": "int",
        "args": [
          {
            "name": "sl",
            "type": "StringList *"
          },
          {
            "name": "item",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stringlist.h>"
        ]
      },
      {
        "prototype": "void sl_free(StringList *sl, int freeall)",
        "name": "sl_free",
        "type": "void",
        "args": [
          {
            "name": "sl",
            "type": "StringList *"
          },
          {
            "name": "freeall",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stringlist.h>"
        ]
      },
      {
        "prototype": "char * sl_find(StringList *sl, const char *item)",
        "name": "sl_find",
        "type": "char *",
        "args": [
          {
            "name": "sl",
            "type": "StringList *"
          },
          {
            "name": "item",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stringlist.h>"
        ]
      }
    ]
  },
  "SLEEP(3)": {
    "functions": [
      {
        "prototype": "unsigned int sleep(unsigned int seconds)",
        "name": "sleep",
        "type": "unsigned int",
        "args": [
          {
            "name": "seconds",
            "type": "unsigned int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SOCKATMARK(3)": {
    "functions": [
      {
        "prototype": "int sockatmark(int s)",
        "name": "sockatmark",
        "type": "int",
        "args": [
          {
            "name": "s",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/socket.h>"
        ]
      }
    ]
  },
  "STDIO(3)": {
    "functions": [

    ]
  },
  "STRCPY(3)": {
    "functions": [
      {
        "prototype": "char * stpcpy(char * restrict dst, const char * restrict src)",
        "name": "stpcpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * stpncpy(char * restrict dst, const char * restrict src, size_t len)",
        "name": "stpncpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strcpy(char * restrict dst, const char * restrict src)",
        "name": "strcpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strncpy(char * restrict dst, const char * restrict src, size_t len)",
        "name": "strncpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRCASECMP(3)": {
    "functions": [
      {
        "prototype": "int strcasecmp(const char *s1, const char *s2)",
        "name": "strcasecmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int strncasecmp(const char *s1, const char *s2, size_t len)",
        "name": "strncasecmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <strings.h>"
        ]
      },
      {
        "prototype": "int strcasecmp_l(const char *s1, const char *s2, locale_t loc)",
        "name": "strcasecmp_l",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <strings.h>",
          "#include <xlocale.h>"
        ]
      },
      {
        "prototype": "int strncasecmp_l(const char *s1, const char *s2, size_t len, locale_t loc)",
        "name": "strncasecmp_l",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <strings.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "STRSTR(3)": {
    "functions": [
      {
        "prototype": "char * strstr(const char *big, const char *little)",
        "name": "strstr",
        "type": "char *",
        "args": [
          {
            "name": "big",
            "type": "const char *"
          },
          {
            "name": "little",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strcasestr(const char *big, const char *little)",
        "name": "strcasestr",
        "type": "char *",
        "args": [
          {
            "name": "big",
            "type": "const char *"
          },
          {
            "name": "little",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strnstr(const char *big, const char *little, size_t len)",
        "name": "strnstr",
        "type": "char *",
        "args": [
          {
            "name": "big",
            "type": "const char *"
          },
          {
            "name": "little",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strcasestr_l(const char *big, const char *little, locale_t loc)",
        "name": "strcasestr_l",
        "type": "char *",
        "args": [
          {
            "name": "big",
            "type": "const char *"
          },
          {
            "name": "little",
            "type": "const char *"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <string.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "STRCAT(3)": {
    "functions": [
      {
        "prototype": "char * strcat(char * restrict s, const char * restrict append)",
        "name": "strcat",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "append",
            "type": "const char * restrict"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strncat(char * restrict s, const char * restrict append, size_t count)",
        "name": "strncat",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "append",
            "type": "const char * restrict"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRCHR(3)": {
    "functions": [
      {
        "prototype": "char * strchr(const char *s, int c)",
        "name": "strchr",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strrchr(const char *s, int c)",
        "name": "strrchr",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strchrnul(const char *s, int c)",
        "name": "strchrnul",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRCMP(3)": {
    "functions": [
      {
        "prototype": "int strcmp(const char *s1, const char *s2)",
        "name": "strcmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strncmp(const char *s1, const char *s2, size_t len)",
        "name": "strncmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRCOLL(3)": {
    "functions": [
      {
        "prototype": "int strcoll(const char *s1, const char *s2)",
        "name": "strcoll",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strcoll_l(const char *s1, const char *s2, locale_t loc)",
        "name": "strcoll_l",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRSPN(3)": {
    "functions": [
      {
        "prototype": "size_t strspn(const char *s, const char *charset)",
        "name": "strspn",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "charset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strcspn(const char *s, const char *charset)",
        "name": "strcspn",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "charset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRDUP(3)": {
    "functions": [
      {
        "prototype": "char * strdup(const char *str)",
        "name": "strdup",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strndup(const char *str, size_t len)",
        "name": "strndup",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "const char *"
          },
          {
            "name": "len",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRFMON(3)": {
    "functions": [
      {
        "prototype": "ssize_t strfmon(char * restrict s, size_t maxsize, const char * restrict format, ...)",
        "name": "strfmon",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "maxsize",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <monetary.h>"
        ]
      },
      {
        "prototype": "ssize_t strfmon_l(char * restrict s, size_t maxsize, locale_t loc, const char * restrict format, ...)",
        "name": "strfmon_l",
        "type": "ssize_t",
        "args": [
          {
            "name": "s",
            "type": "char * restrict"
          },
          {
            "name": "maxsize",
            "type": "size_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <monetary.h>"
        ]
      }
    ]
  },
  "STRFTIME(3)": {
    "functions": [
      {
        "prototype": "size_t strftime(char * restrict buf, size_t maxsize, const char * restrict format, const struct tm * restrict timeptr)",
        "name": "strftime",
        "type": "size_t",
        "args": [
          {
            "name": "buf",
            "type": "char * restrict"
          },
          {
            "name": "maxsize",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "timeptr",
            "type": "const struct tm * restrict"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "size_t strftime_l(char *restrict buf, size_t maxsize, const char * restrict format, const struct tm *restrict timeptr, locale_t loc)",
        "name": "strftime_l",
        "type": "size_t",
        "args": [
          {
            "name": "buf",
            "type": "char *restrict"
          },
          {
            "name": "maxsize",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "timeptr",
            "type": "const struct tm *restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "STRING(3)": {
    "functions": [
      {
        "prototype": "char * stpcpy(char *dst, const char *src)",
        "name": "stpcpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strcat(char *s, const char * append)",
        "name": "strcat",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "append",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strncat(char *s, const char *append, size_t count)",
        "name": "strncat",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "append",
            "type": "const char *"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strchr(const char *s, int c)",
        "name": "strchr",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strrchr(const char *s, int c)",
        "name": "strrchr",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strcmp(const char *s1, const char *s2)",
        "name": "strcmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strncmp(const char *s1, const char *s2, size_t count)",
        "name": "strncmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strcasecmp(const char *s1, const char *s2)",
        "name": "strcasecmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "int strncasecmp(const char *s1, const char *s2, size_t count)",
        "name": "strncasecmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const char *"
          },
          {
            "name": "s2",
            "type": "const char *"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strcpy(char *dst, const char *src)",
        "name": "strcpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strncpy(char *dst, const char *src, size_t count)",
        "name": "strncpy",
        "type": "char *",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "count",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strerror(int errno)",
        "name": "strerror",
        "type": "char *",
        "args": [
          {
            "name": "errno",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strlen(const char *s)",
        "name": "strlen",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strpbrk(const char *s, const char *charset)",
        "name": "strpbrk",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "charset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strsep(char **stringp, const char *delim)",
        "name": "strsep",
        "type": "char *",
        "args": [
          {
            "name": "stringp",
            "type": "char **"
          },
          {
            "name": "delim",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strspn(const char *s, const char *charset)",
        "name": "strspn",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "charset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strcspn(const char *s, const char *charset)",
        "name": "strcspn",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "charset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strstr(const char *big, const char *little)",
        "name": "strstr",
        "type": "char *",
        "args": [
          {
            "name": "big",
            "type": "const char *"
          },
          {
            "name": "little",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strtok(char *s, const char *delim)",
        "name": "strtok",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "char *"
          },
          {
            "name": "delim",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * index(const char *s, int c)",
        "name": "index",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * rindex(const char *s, int c)",
        "name": "rindex",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRLCPY(3)": {
    "functions": [
      {
        "prototype": "size_t strlcpy(char * restrict dst, const char * restrict src, size_t dstsize)",
        "name": "strlcpy",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          },
          {
            "name": "dstsize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strlcat(char * restrict dst, const char * restrict src, size_t dstsize)",
        "name": "strlcat",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          },
          {
            "name": "dstsize",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRLEN(3)": {
    "functions": [
      {
        "prototype": "size_t strlen(const char *s)",
        "name": "strlen",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strnlen(const char *s, size_t maxlen)",
        "name": "strnlen",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRMODE(3)": {
    "functions": [
      {
        "prototype": "void strmode(mode_t mode, char *bp)",
        "name": "strmode",
        "type": "void",
        "args": [
          {
            "name": "mode",
            "type": "mode_t"
          },
          {
            "name": "bp",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRPBRK(3)": {
    "functions": [
      {
        "prototype": "char * strpbrk(const char *s, const char *charset)",
        "name": "strpbrk",
        "type": "char *",
        "args": [
          {
            "name": "s",
            "type": "const char *"
          },
          {
            "name": "charset",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRPTIME(3)": {
    "functions": [
      {
        "prototype": "char * strptime(const char * restrict buf, const char * restrict format, struct tm * restrict timeptr)",
        "name": "strptime",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "const char * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "timeptr",
            "type": "struct tm * restrict"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "char * strptime_l(const char * restrict buf, const char * restrict format, struct tm * restrict timeptr, locale_t loc)",
        "name": "strptime_l",
        "type": "char *",
        "args": [
          {
            "name": "buf",
            "type": "const char * restrict"
          },
          {
            "name": "format",
            "type": "const char * restrict"
          },
          {
            "name": "timeptr",
            "type": "struct tm * restrict"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <time.h>",
          "#include <xlocale.h>"
        ]
      }
    ]
  },
  "STRSEP(3)": {
    "functions": [
      {
        "prototype": "char * strsep(char **stringp, const char *delim)",
        "name": "strsep",
        "type": "char *",
        "args": [
          {
            "name": "stringp",
            "type": "char **"
          },
          {
            "name": "delim",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRTOD(3)": {
    "functions": [
      {
        "prototype": "double strtod(const char * restrict nptr, char ** restrict endptr)",
        "name": "strtod",
        "type": "double",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "float strtof(const char * restrict nptr, char ** restrict endptr)",
        "name": "strtof",
        "type": "float",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      },
      {
        "prototype": "long double strtold(const char * restrict nptr, char ** restrict endptr)",
        "name": "strtold",
        "type": "long double",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "STRTOL(3)": {
    "functions": [
      {
        "prototype": "long strtol(const char * restrict nptr, char ** restrict endptr, int base)",
        "name": "strtol",
        "type": "long",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "long long strtoll(const char * restrict nptr, char ** restrict endptr, int base)",
        "name": "strtoll",
        "type": "long long",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base)",
        "name": "strtoimax",
        "type": "intmax_t",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <inttypes.h>",
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "quad_t strtoq(const char *nptr, char **endptr, int base)",
        "name": "strtoq",
        "type": "quad_t",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          },
          {
            "name": "endptr",
            "type": "char **"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <inttypes.h>",
          "#include <sys/types.h>",
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      }
    ]
  },
  "STRTOK(3)": {
    "functions": [
      {
        "prototype": "char * strtok(char *str, const char *sep)",
        "name": "strtok",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "char *"
          },
          {
            "name": "sep",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "char * strtok_r(char *str, const char *sep, char **last)",
        "name": "strtok_r",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "char *"
          },
          {
            "name": "sep",
            "type": "const char *"
          },
          {
            "name": "last",
            "type": "char **"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "STRTOUL(3)": {
    "functions": [
      {
        "prototype": "unsigned long strtoul(const char * restrict nptr, char ** restrict endptr, int base)",
        "name": "strtoul",
        "type": "unsigned long",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "unsigned long long strtoull(const char * restrict nptr, char ** restrict endptr, int base)",
        "name": "strtoull",
        "type": "unsigned long long",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "uintmax_t strtoumax(const char * restrict nptr, char ** restrict endptr, int base)",
        "name": "strtoumax",
        "type": "uintmax_t",
        "args": [
          {
            "name": "nptr",
            "type": "const char * restrict"
          },
          {
            "name": "endptr",
            "type": "char ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <inttypes.h>",
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      },
      {
        "prototype": "u_quad_t strtouq(const char *nptr, char **endptr, int base)",
        "name": "strtouq",
        "type": "u_quad_t",
        "args": [
          {
            "name": "nptr",
            "type": "const char *"
          },
          {
            "name": "endptr",
            "type": "char **"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <inttypes.h>",
          "#include <sys/types.h>",
          "#include <stdlib.h>",
          "#include <limits.h>"
        ]
      }
    ]
  },
  "UNVIS(3)": {
    "functions": [
      {
        "prototype": "int unvis(char *cp, int c, int *astate, int flag)",
        "name": "unvis",
        "type": "int",
        "args": [
          {
            "name": "cp",
            "type": "char *"
          },
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "astate",
            "type": "int *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strunvis(char *dst, const char *src)",
        "name": "strunvis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strnunvis(char *dst, size_t dlen, const char *src)",
        "name": "strnunvis",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strunvisx(char *dst, const char *src, int flag)",
        "name": "strunvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      },
      {
        "prototype": "int strnunvisx(char *dst, size_t dlen, const char *src, int flag)",
        "name": "strnunvisx",
        "type": "int",
        "args": [
          {
            "name": "dst",
            "type": "char *"
          },
          {
            "name": "dlen",
            "type": "size_t"
          },
          {
            "name": "src",
            "type": "const char *"
          },
          {
            "name": "flag",
            "type": "int"
          }
        ],
        "includes": [
          "#include <vis.h>"
        ]
      }
    ]
  },
  "STRXFRM(3)": {
    "functions": [
      {
        "prototype": "size_t strxfrm(char * restrict dst, const char * restrict src, size_t n)",
        "name": "strxfrm",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      },
      {
        "prototype": "size_t strxfrm_l(char * restrict dst, const char *restrict src, size_t n, locale_t loc)",
        "name": "strxfrm_l",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const char *restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          },
          {
            "name": "loc",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <string.h>"
        ]
      }
    ]
  },
  "SWAB(3)": {
    "functions": [
      {
        "prototype": "void swab(const void * restrict src, void * restrict dst, ssize_t len)",
        "name": "swab",
        "type": "void",
        "args": [
          {
            "name": "src",
            "type": "const void * restrict"
          },
          {
            "name": "dst",
            "type": "void * restrict"
          },
          {
            "name": "len",
            "type": "ssize_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SYSCONF(3)": {
    "functions": [
      {
        "prototype": "long sysconf(int name)",
        "name": "sysconf",
        "type": "long",
        "args": [
          {
            "name": "name",
            "type": "int"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "SYSCTL(3)": {
    "functions": [
      {
        "prototype": "int sysctl(const int *name, u_int namelen, void *oldp, size_t *oldlenp, const void *newp, size_t newlen)",
        "name": "sysctl",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const int *"
          },
          {
            "name": "namelen",
            "type": "u_int"
          },
          {
            "name": "oldp",
            "type": "void *"
          },
          {
            "name": "oldlenp",
            "type": "size_t *"
          },
          {
            "name": "newp",
            "type": "const void *"
          },
          {
            "name": "newlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/sysctl.h>"
        ]
      },
      {
        "prototype": "int sysctlbyname(const char *name, void *oldp, size_t *oldlenp, const void *newp, size_t newlen)",
        "name": "sysctlbyname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "oldp",
            "type": "void *"
          },
          {
            "name": "oldlenp",
            "type": "size_t *"
          },
          {
            "name": "newp",
            "type": "const void *"
          },
          {
            "name": "newlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/sysctl.h>"
        ]
      },
      {
        "prototype": "int sysctlnametomib(const char *name, int *mibp, size_t *sizep)",
        "name": "sysctlnametomib",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "const char *"
          },
          {
            "name": "mibp",
            "type": "int *"
          },
          {
            "name": "sizep",
            "type": "size_t *"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <sys/sysctl.h>"
        ]
      }
    ]
  },
  "SYSTEM(3)": {
    "functions": [
      {
        "prototype": "int system(const char *string)",
        "name": "system",
        "type": "int",
        "args": [
          {
            "name": "string",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "TAN(3)": {
    "functions": [
      {
        "prototype": "double tan(double x)",
        "name": "tan",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float tanf(float x)",
        "name": "tanf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double tanl(long double x)",
        "name": "tanl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "TANH(3)": {
    "functions": [
      {
        "prototype": "double tanh(double x)",
        "name": "tanh",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float tanhf(float x)",
        "name": "tanhf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double tanhl(long double x)",
        "name": "tanhl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "TCSENDBREAK(3)": {
    "functions": [
      {
        "prototype": "int tcdrain(int fd)",
        "name": "tcdrain",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int tcflow(int fd, int action)",
        "name": "tcflow",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "action",
            "type": "int"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int tcflush(int fd, int action)",
        "name": "tcflush",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "action",
            "type": "int"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      },
      {
        "prototype": "int tcsendbreak(int fd, int len)",
        "name": "tcsendbreak",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "len",
            "type": "int"
          }
        ],
        "includes": [
          "#include <termios.h>"
        ]
      }
    ]
  },
  "TCGETPGRP(3)": {
    "functions": [
      {
        "prototype": "pid_t tcgetpgrp(int fd)",
        "name": "tcgetpgrp",
        "type": "pid_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "TCGETSID(3)": {
    "functions": [
      {
        "prototype": "pid_t tcgetsid(int fd)",
        "name": "tcgetsid",
        "type": "pid_t",
        "args": [
          {
            "name": "fd",
            "type": "int"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <termios.h>"
        ]
      }
    ]
  },
  "TCSETPGRP(3)": {
    "functions": [
      {
        "prototype": "int tcsetpgrp(int fd, pid_t pgrp_id)",
        "name": "tcsetpgrp",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "pgrp_id",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "TCSETSID(3)": {
    "functions": [
      {
        "prototype": "int tcsetsid(int fd, pid_t pid)",
        "name": "tcsetsid",
        "type": "int",
        "args": [
          {
            "name": "fd",
            "type": "int"
          },
          {
            "name": "pid",
            "type": "pid_t"
          }
        ],
        "includes": [
          "#include <sys/types.h>",
          "#include <termios.h>"
        ]
      }
    ]
  },
  "TMPFILE(3)": {
    "functions": [
      {
        "prototype": "FILE * tmpfile(void)",
        "name": "tmpfile",
        "type": "FILE *",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * tmpnam(char *str)",
        "name": "tmpnam",
        "type": "char *",
        "args": [
          {
            "name": "str",
            "type": "char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      },
      {
        "prototype": "char * tempnam(const char *tmpdir, const char *prefix)",
        "name": "tempnam",
        "type": "char *",
        "args": [
          {
            "name": "tmpdir",
            "type": "const char *"
          },
          {
            "name": "prefix",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "TIME(3)": {
    "functions": [
      {
        "prototype": "time_t time(time_t *tloc)",
        "name": "time",
        "type": "time_t",
        "args": [
          {
            "name": "tloc",
            "type": "time_t *"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "TIMES(3)": {
    "functions": [
      {
        "prototype": "clock_t times(struct tms *tp)",
        "name": "times",
        "type": "clock_t",
        "args": [
          {
            "name": "tp",
            "type": "struct tms *"
          }
        ],
        "includes": [
          "#include <sys/times.h>"
        ]
      }
    ]
  },
  "TIMEZONE(3)": {
    "functions": [
      {
        "prototype": "char * timezone(int zone, int dst)",
        "name": "timezone",
        "type": "char *",
        "args": [
          {
            "name": "zone",
            "type": "int"
          },
          {
            "name": "dst",
            "type": "int"
          }
        ],
        "includes": [

        ]
      }
    ]
  },
  "TOASCII(3)": {
    "functions": [
      {
        "prototype": "int toascii(int c)",
        "name": "toascii",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "TOLOWER(3)": {
    "functions": [
      {
        "prototype": "int tolower(int c)",
        "name": "tolower",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "TOUPPER(3)": {
    "functions": [
      {
        "prototype": "int toupper(int c)",
        "name": "toupper",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          }
        ],
        "includes": [
          "#include <ctype.h>"
        ]
      }
    ]
  },
  "WCTRANS(3)": {
    "functions": [
      {
        "prototype": "wint_t towctrans(wint_t wc, wctrans_t desc)",
        "name": "towctrans",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "desc",
            "type": "wctrans_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      },
      {
        "prototype": "wctrans_t wctrans(const char *charclass)",
        "name": "wctrans",
        "type": "wctrans_t",
        "args": [
          {
            "name": "charclass",
            "type": "const char *"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "TOWLOWER(3)": {
    "functions": [
      {
        "prototype": "wint_t towlower(wint_t wc)",
        "name": "towlower",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "TOWUPPER(3)": {
    "functions": [
      {
        "prototype": "wint_t towupper(wint_t wc)",
        "name": "towupper",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          }
        ],
        "includes": [
          "#include <wctype.h>"
        ]
      }
    ]
  },
  "TRUNC(3)": {
    "functions": [
      {
        "prototype": "double trunc(double x)",
        "name": "trunc",
        "type": "double",
        "args": [
          {
            "name": "x",
            "type": "double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "float truncf(float x)",
        "name": "truncf",
        "type": "float",
        "args": [
          {
            "name": "x",
            "type": "float"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      },
      {
        "prototype": "long double truncl(long double x)",
        "name": "truncl",
        "type": "long double",
        "args": [
          {
            "name": "x",
            "type": "long double"
          }
        ],
        "includes": [
          "#include <math.h>"
        ]
      }
    ]
  },
  "TZSET(3)": {
    "functions": [
      {
        "prototype": "void tzset(void)",
        "name": "tzset",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      },
      {
        "prototype": "void tzsetwall(void)",
        "name": "tzsetwall",
        "type": "void",
        "args": [
          {
            "name": null,
            "type": "void"
          }
        ],
        "includes": [
          "#include <time.h>"
        ]
      }
    ]
  },
  "UALARM(3)": {
    "functions": [
      {
        "prototype": "useconds_t ualarm(useconds_t microseconds, useconds_t interval)",
        "name": "ualarm",
        "type": "useconds_t",
        "args": [
          {
            "name": "microseconds",
            "type": "useconds_t"
          },
          {
            "name": "interval",
            "type": "useconds_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "UCONTEXT(3)": {
    "functions": [

    ]
  },
  "ULIMIT(3)": {
    "functions": [
      {
        "prototype": "long ulimit(int cmd, ...)",
        "name": "ulimit",
        "type": "long",
        "args": [
          {
            "name": "cmd",
            "type": "int"
          },
          {
            "name": "...",
            "type": null
          }
        ],
        "includes": [
          "#include <ulimit.h>"
        ]
      }
    ]
  },
  "UNAME(3)": {
    "functions": [
      {
        "prototype": "int uname(struct utsname *name)",
        "name": "uname",
        "type": "int",
        "args": [
          {
            "name": "name",
            "type": "struct utsname *"
          }
        ],
        "includes": [
          "#include <sys/utsname.h>"
        ]
      }
    ]
  },
  "UNGETC(3)": {
    "functions": [
      {
        "prototype": "int ungetc(int c, FILE *stream)",
        "name": "ungetc",
        "type": "int",
        "args": [
          {
            "name": "c",
            "type": "int"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>"
        ]
      }
    ]
  },
  "UNGETWC(3)": {
    "functions": [
      {
        "prototype": "wint_t ungetwc(wint_t wc, FILE *stream)",
        "name": "ungetwc",
        "type": "wint_t",
        "args": [
          {
            "name": "wc",
            "type": "wint_t"
          },
          {
            "name": "stream",
            "type": "FILE *"
          }
        ],
        "includes": [
          "#include <stdio.h>",
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "USELOCALE(3)": {
    "functions": [
      {
        "prototype": "locale_t uselocale(locale_t locale)",
        "name": "uselocale",
        "type": "locale_t",
        "args": [
          {
            "name": "locale",
            "type": "locale_t"
          }
        ],
        "includes": [
          "#include <locale.h>"
        ]
      }
    ]
  },
  "USLEEP(3)": {
    "functions": [
      {
        "prototype": "int usleep(useconds_t microseconds)",
        "name": "usleep",
        "type": "int",
        "args": [
          {
            "name": "microseconds",
            "type": "useconds_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "UTIME(3)": {
    "functions": [
      {
        "prototype": "int utime(const char *file, const struct utimbuf *timep)",
        "name": "utime",
        "type": "int",
        "args": [
          {
            "name": "file",
            "type": "const char *"
          },
          {
            "name": "timep",
            "type": "const struct utimbuf *"
          }
        ],
        "includes": [
          "#include <utime.h>"
        ]
      }
    ]
  },
  "UUID(3)": {
    "functions": [
      {
        "prototype": "int32_t uuid_compare(const uuid_t *uuid1, const uuid_t *uuid2, uint32_t *status)",
        "name": "uuid_compare",
        "type": "int32_t",
        "args": [
          {
            "name": "uuid1",
            "type": "const uuid_t *"
          },
          {
            "name": "uuid2",
            "type": "const uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_create(uuid_t *uuid, uint32_t *status)",
        "name": "uuid_create",
        "type": "void",
        "args": [
          {
            "name": "uuid",
            "type": "uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_create_nil(uuid_t *uuid, uint32_t *status)",
        "name": "uuid_create_nil",
        "type": "void",
        "args": [
          {
            "name": "uuid",
            "type": "uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "int32_t uuid_equal(const uuid_t *uuid1, const uuid_t *uuid2, uint32_t *status)",
        "name": "uuid_equal",
        "type": "int32_t",
        "args": [
          {
            "name": "uuid1",
            "type": "const uuid_t *"
          },
          {
            "name": "uuid2",
            "type": "const uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_from_string(const char *str, uuid_t *uuid, uint32_t *status)",
        "name": "uuid_from_string",
        "type": "void",
        "args": [
          {
            "name": "str",
            "type": "const char *"
          },
          {
            "name": "uuid",
            "type": "uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "uint16_t uuid_hash(const uuid_t *uuid, uint32_t *status)",
        "name": "uuid_hash",
        "type": "uint16_t",
        "args": [
          {
            "name": "uuid",
            "type": "const uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "int32_t uuid_is_nil(const uuid_t *uuid, uint32_t *status)",
        "name": "uuid_is_nil",
        "type": "int32_t",
        "args": [
          {
            "name": "uuid",
            "type": "const uuid_t *"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_to_string(const uuid_t *uuid, char **str, uint32_t *status)",
        "name": "uuid_to_string",
        "type": "void",
        "args": [
          {
            "name": "uuid",
            "type": "const uuid_t *"
          },
          {
            "name": "str",
            "type": "char **"
          },
          {
            "name": "status",
            "type": "uint32_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_enc_le(void *buf, const uuid_t *uuid)",
        "name": "uuid_enc_le",
        "type": "void",
        "args": [
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "uuid",
            "type": "const uuid_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_dec_le(const void *buf, uuid_t *)",
        "name": "uuid_dec_le",
        "type": "void",
        "args": [
          {
            "name": "buf",
            "type": "const void *"
          },
          {
            "name": "_arg_2",
            "type": "uuid_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_enc_be(void *buf, const uuid_t *uuid)",
        "name": "uuid_enc_be",
        "type": "void",
        "args": [
          {
            "name": "buf",
            "type": "void *"
          },
          {
            "name": "uuid",
            "type": "const uuid_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      },
      {
        "prototype": "void uuid_dec_be(const void *buf, uuid_t *)",
        "name": "uuid_dec_be",
        "type": "void",
        "args": [
          {
            "name": "buf",
            "type": "const void *"
          },
          {
            "name": "_arg_2",
            "type": "uuid_t *"
          }
        ],
        "includes": [
          "#include <uuid.h>"
        ]
      }
    ]
  },
  "VALLOC(3)": {
    "functions": [
      {
        "prototype": "void * valloc(size_t size)",
        "name": "valloc",
        "type": "void *",
        "args": [
          {
            "name": "size",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <unistd.h>"
        ]
      }
    ]
  },
  "WMEMCHR(3)": {
    "functions": [
      {
        "prototype": "wchar_t * wmemchr(const wchar_t *s, wchar_t c, size_t n)",
        "name": "wmemchr",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s",
            "type": "const wchar_t *"
          },
          {
            "name": "c",
            "type": "wchar_t"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n)",
        "name": "wmemcmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wmemcpy(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)",
        "name": "wmemcpy",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t * restrict"
          },
          {
            "name": "s2",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wmemmove(wchar_t *s1, const wchar_t *s2, size_t n)",
        "name": "wmemmove",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wmemset(wchar_t *s, wchar_t c, size_t n)",
        "name": "wmemset",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s",
            "type": "wchar_t *"
          },
          {
            "name": "c",
            "type": "wchar_t"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcpcpy(wchar_t *s1, wchar_t *s2)",
        "name": "wcpcpy",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcpncpy(wchar_t *s1, wchar_t *s2, size_t n)",
        "name": "wcpncpy",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wcscasecmp(const wchar_t *s1, const wchar_t *s2)",
        "name": "wcscasecmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcscat(wchar_t * restrict s1, const wchar_t * restrict s2)",
        "name": "wcscat",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t * restrict"
          },
          {
            "name": "s2",
            "type": "const wchar_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcschr(const wchar_t *s, wchar_t c)",
        "name": "wcschr",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s",
            "type": "const wchar_t *"
          },
          {
            "name": "c",
            "type": "wchar_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wcscmp(const wchar_t *s1, const wchar_t *s2)",
        "name": "wcscmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcscpy(wchar_t * restrict s1, const wchar_t * restrict s2)",
        "name": "wcscpy",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t * restrict"
          },
          {
            "name": "s2",
            "type": "const wchar_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcscspn(const wchar_t *s1, const wchar_t *s2)",
        "name": "wcscspn",
        "type": "size_t",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcsdup(const wchar_t *s)",
        "name": "wcsdup",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcslcat(wchar_t *s1, const wchar_t *s2, size_t n)",
        "name": "wcslcat",
        "type": "size_t",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcslcpy(wchar_t *s1, const wchar_t *s2, size_t n)",
        "name": "wcslcpy",
        "type": "size_t",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcslen(const wchar_t *s)",
        "name": "wcslen",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wcsncasecmp(const wchar_t *s1, const wchar_t *s2, size_t n)",
        "name": "wcsncasecmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcsncat(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)",
        "name": "wcsncat",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t * restrict"
          },
          {
            "name": "s2",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "int wcsncmp(const wchar_t *s1, const wchar_t * s2, size_t n)",
        "name": "wcsncmp",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcsncpy(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)",
        "name": "wcsncpy",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "wchar_t * restrict"
          },
          {
            "name": "s2",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcsnlen(const wchar_t *s, size_t maxlen)",
        "name": "wcsnlen",
        "type": "size_t",
        "args": [
          {
            "name": "s",
            "type": "const wchar_t *"
          },
          {
            "name": "maxlen",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcspbrk(const wchar_t *s1, const wchar_t *s2)",
        "name": "wcspbrk",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcsrchr(const wchar_t *s, wchar_t c)",
        "name": "wcsrchr",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s",
            "type": "const wchar_t *"
          },
          {
            "name": "c",
            "type": "wchar_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcsspn(const wchar_t *s1, const wchar_t *s2)",
        "name": "wcsspn",
        "type": "size_t",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "wchar_t * wcsstr(const wchar_t * restrict s1, const wchar_t * restrict s2)",
        "name": "wcsstr",
        "type": "wchar_t *",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "s2",
            "type": "const wchar_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSCOLL(3)": {
    "functions": [
      {
        "prototype": "int wcscoll(const wchar_t *s1, const wchar_t *s2)",
        "name": "wcscoll",
        "type": "int",
        "args": [
          {
            "name": "s1",
            "type": "const wchar_t *"
          },
          {
            "name": "s2",
            "type": "const wchar_t *"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSFTIME(3)": {
    "functions": [
      {
        "prototype": "size_t wcsftime(wchar_t * restrict wcs, size_t maxsize, const wchar_t * restrict format, const struct tm * restrict timeptr)",
        "name": "wcsftime",
        "type": "size_t",
        "args": [
          {
            "name": "wcs",
            "type": "wchar_t * restrict"
          },
          {
            "name": "maxsize",
            "type": "size_t"
          },
          {
            "name": "format",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "timeptr",
            "type": "const struct tm * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSRTOMBS(3)": {
    "functions": [
      {
        "prototype": "size_t wcsrtombs(char * restrict dst, const wchar_t ** restrict src, size_t len, mbstate_t * restrict ps)",
        "name": "wcsrtombs",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const wchar_t ** restrict"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "size_t wcsnrtombs(char * restrict dst, const wchar_t ** restrict src, size_t nwc, size_t len, mbstate_t * restrict ps)",
        "name": "wcsnrtombs",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "char * restrict"
          },
          {
            "name": "src",
            "type": "const wchar_t ** restrict"
          },
          {
            "name": "nwc",
            "type": "size_t"
          },
          {
            "name": "len",
            "type": "size_t"
          },
          {
            "name": "ps",
            "type": "mbstate_t * restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSTOD(3)": {
    "functions": [
      {
        "prototype": "float wcstof(const wchar_t * restrict nptr, wchar_t ** restrict endptr)",
        "name": "wcstof",
        "type": "float",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "long double wcstold(const wchar_t * restrict nptr, wchar_t ** restrict endptr)",
        "name": "wcstold",
        "type": "long double",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "double wcstod(const wchar_t * restrict nptr, wchar_t ** restrict endptr)",
        "name": "wcstod",
        "type": "double",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSTOL(3)": {
    "functions": [
      {
        "prototype": "long wcstol(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstol",
        "type": "long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "unsigned long wcstoul(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstoul",
        "type": "unsigned long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "long long wcstoll(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstoll",
        "type": "long long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "unsigned long long wcstoull(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstoull",
        "type": "unsigned long long",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      },
      {
        "prototype": "intmax_t wcstoimax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstoimax",
        "type": "intmax_t",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <inttypes.h>"
        ]
      },
      {
        "prototype": "uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)",
        "name": "wcstoumax",
        "type": "uintmax_t",
        "args": [
          {
            "name": "nptr",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "endptr",
            "type": "wchar_t ** restrict"
          },
          {
            "name": "base",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wchar.h>",
          "#include <inttypes.h>"
        ]
      }
    ]
  },
  "WCSTOK(3)": {
    "functions": [
      {
        "prototype": "wchar_t * wcstok(wchar_t * restrict str, const wchar_t * restrict sep, wchar_t ** restrict last)",
        "name": "wcstok",
        "type": "wchar_t *",
        "args": [
          {
            "name": "str",
            "type": "wchar_t * restrict"
          },
          {
            "name": "sep",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "last",
            "type": "wchar_t ** restrict"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSTOMBS(3)": {
    "functions": [
      {
        "prototype": "size_t wcstombs(char * restrict mbstring, const wchar_t * restrict wcstring, size_t nbytes)",
        "name": "wcstombs",
        "type": "size_t",
        "args": [
          {
            "name": "mbstring",
            "type": "char * restrict"
          },
          {
            "name": "wcstring",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "nbytes",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "WCSWIDTH(3)": {
    "functions": [
      {
        "prototype": "int wcswidth(const wchar_t *pwcs, size_t n)",
        "name": "wcswidth",
        "type": "int",
        "args": [
          {
            "name": "pwcs",
            "type": "const wchar_t *"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCSXFRM(3)": {
    "functions": [
      {
        "prototype": "size_t wcsxfrm(wchar_t * restrict dst, const wchar_t * restrict src, size_t n)",
        "name": "wcsxfrm",
        "type": "size_t",
        "args": [
          {
            "name": "dst",
            "type": "wchar_t * restrict"
          },
          {
            "name": "src",
            "type": "const wchar_t * restrict"
          },
          {
            "name": "n",
            "type": "size_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WCTOMB(3)": {
    "functions": [
      {
        "prototype": "int wctomb(char *mbchar, wchar_t wchar)",
        "name": "wctomb",
        "type": "int",
        "args": [
          {
            "name": "mbchar",
            "type": "char *"
          },
          {
            "name": "wchar",
            "type": "wchar_t"
          }
        ],
        "includes": [
          "#include <stdlib.h>"
        ]
      }
    ]
  },
  "WCWIDTH(3)": {
    "functions": [
      {
        "prototype": "int wcwidth(wchar_t wc)",
        "name": "wcwidth",
        "type": "int",
        "args": [
          {
            "name": "wc",
            "type": "wchar_t"
          }
        ],
        "includes": [
          "#include <wchar.h>"
        ]
      }
    ]
  },
  "WORDEXP(3)": {
    "functions": [
      {
        "prototype": "int wordexp(const char * restrict words, wordexp_t * restrict we, int flags)",
        "name": "wordexp",
        "type": "int",
        "args": [
          {
            "name": "words",
            "type": "const char * restrict"
          },
          {
            "name": "we",
            "type": "wordexp_t * restrict"
          },
          {
            "name": "flags",
            "type": "int"
          }
        ],
        "includes": [
          "#include <wordexp.h>"
        ]
      },
      {
        "prototype": "void wordfree(wordexp_t *we)",
        "name": "wordfree",
        "type": "void",
        "args": [
          {
            "name": "we",
            "type": "wordexp_t *"
          }
        ],
        "includes": [
          "#include <wordexp.h>"
        ]
      }
    ]
  },
  "XDR(3)": {
    "functions": [

    ]
  },
  "XLOCALE(3)": {
    "functions": [

    ]
  }
}
